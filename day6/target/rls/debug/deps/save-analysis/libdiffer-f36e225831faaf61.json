{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0","program":"/home/ryan/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","differ","--edition=2018","/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=f36e225831faaf61","-C","extra-filename=-f36e225831faaf61","--out-dir","/home/ryan/repo/AOC2019/day6/target/rls/debug/deps","-L","dependency=/home/ryan/repo/AOC2019/day6/target/rls/debug/deps","--extern","fnv=/home/ryan/repo/AOC2019/day6/target/rls/debug/deps/libfnv-81af3048d6e04eb5.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/ryan/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/ryan/repo/AOC2019/day6/target/rls/debug/deps/libdiffer-f36e225831faaf61.rmeta"},"prelude":{"crate_id":{"name":"differ","disambiguator":[12552848501671770452,1741168433157418564]},"crate_root":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src","external_crates":[{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[7620319826054890005,5717302534568989792]}},{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[4475606148663180750,5419346832002689975]}},{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[18209801913766412741,14708739502762596590]}},{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[17534900064032465835,11074003829314630197]}},{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[5259792513756561775,1479263106690228407]}},{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[14346116818397650781,2977216825120829807]}},{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[3936655635976934790,16389253933182331078]}},{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[5174545163365617014,15822577537272331306]}},{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[1537777832242498626,9514621648460519184]}},{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[18358940337312830879,10081988574518201852]}},{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[12121062121650459058,11489301800313262789]}},{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[14319052529584542008,1066639489166686923]}},{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[9012578297089494616,4116522626272880912]}},{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[8611561841149342373,8229239553347846203]}},{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/differ.rs","num":15,"id":{"name":"fnv","disambiguator":[16390262907343863761,15597314809643332747]}}],"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/lib.rs","byte_start":54,"byte_end":4076,"line_start":3,"line_end":162,"column_start":1,"column_end":44}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":12},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/lib.rs","byte_start":4005,"byte_end":4011,"line_start":161,"line_end":161,"column_start":25,"column_end":31},"alias_span":null,"name":"Differ","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":26},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/lib.rs","byte_start":4013,"byte_end":4030,"line_start":161,"line_end":161,"column_start":33,"column_end":50},"alias_span":null,"name":"spans_for_matches","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":45},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/lib.rs","byte_start":4058,"byte_end":4063,"line_start":162,"line_end":162,"column_start":26,"column_end":31},"alias_span":null,"name":"Match","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":92},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/lib.rs","byte_start":4065,"byte_end":4069,"line_start":162,"line_end":162,"column_start":33,"column_end":37},"alias_span":null,"name":"Span","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":76},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/lib.rs","byte_start":4071,"byte_end":4074,"line_start":162,"line_end":162,"column_start":39,"column_end":42},"alias_span":null,"name":"Tag","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/lib.rs","byte_start":54,"byte_end":4076,"line_start":3,"line_end":162,"column_start":1,"column_end":44},"name":"","qualname":"::","value":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":27},{"krate":0,"index":38},{"krate":0,"index":41}],"decl_id":null,"docs":"Differ is a library for finding the differences between two sequences.","sig":null,"attributes":[{"value":"!\n\nDiffer is a library for finding the differences between two sequences.\n\nThe sequences can be vectors of lines, strings (e.g., words), characters,\nbytes, or of any custom “item” type so long as it implements the `Hash`\nand `Eq` traits (and uses the same data for both).\n\nThe simplest use case is first to create a new\n[`Differ`](struct.Differ.html) using\n[`Differ::new()`](struct.Differ.html#method.new). Then iterate over the\n[`Span`](struct.Span.html)s returned by\n[`Differ::spans()`](struct.Differ.html#method.spans). These spans show how\nto transform sequence `a` into sequence `b` using insertions, deletions,\nand replacements.\n\n`differ` is based on the Python\n[`difflib.SequenceMatcher`](https://docs.python.org/3/library/difflib.html#difflib.SequenceMatcher).\n\n# Dependencies\n\nTo use differ, add this line your `Cargo.toml` file's `[dependencies]`\nsection:\n\n```toml,ignore\ndiffer = \"1\"\n```\n\nIf you want to be able to serialize or deserialize\n[`Match`](struct.Match.html)es, [`Span`](struct.Span.html)s, or\n[`Tag`](struct.Tag.html)s, then use:\n\n```toml,ignore\ndiffer = { version = \"1\", features = [\"use_serde\"] }\n```\n\nThen, in your crate root, for Rust 2015 add `extern crate differ`, and for\nRust 2018 add `use differ`.\n\n# Examples\n\nThese examples are in the file `examples/simple.rs`. For more examples see\n`src/tests.rs`.\n\n## Comparing Text\n\nHere lines are compared, but it could just as easily be strings (e.g.,\nwords by splitting on whitespace), or characters or bytes.\n\n```\nuse differ::{Differ, Tag};\n\nlet a = \"foo\\nbar\\nbaz\\nquux\".lines().collect::<Vec<_>>();\nlet b = \"foo\\nbaz\\nbar\\nquux\".lines().collect::<Vec<_>>();\nlet differ = Differ::new(&a, &b);\nfor span in differ.spans() {\n    match span.tag {\n        Tag::Equal => print_lines('=', &a[span.a_start..span.a_end]),\n        Tag::Insert => print_lines('+', &b[span.b_start..span.b_end]),\n        Tag::Delete => print_lines('-', &a[span.a_start..span.a_end]),\n        Tag::Replace => print_lines('%', &b[span.b_start..span.b_end]),\n    }\n}\n\nfn print_lines(c: char, lines: &[&str]) {\n    for line in lines {\n        println!(\"{} {}\", c, line);\n    }\n}\n```\n\nOutput:\n```text\n= foo\n+ baz\n= bar\n- baz\n= quux\n```\n\n## Comparing Custom Items\n\n```\nuse differ::{Differ, Tag};\nuse std::hash::{Hash, Hasher};\n\n#[derive(Debug, Clone)]\nstruct Item<'a> { // Can have any data\n    x: i32,\n    y: i32,\n    text: &'a str, // For this example we've decided to compare the text\n}\n\nimpl<'a> Item<'a> {\n    fn new(x: i32, y: i32, text: &'a str) -> Item<'a> {\n        Item { x, y, text }\n    }\n}\n\nimpl<'a> Hash for Item<'a> {\n    fn hash<H: Hasher>(&self, state: &mut H) {\n        self.text.hash(state); // MUST use same data as PartialEq\n    }\n}\n\nimpl<'a> PartialEq for Item<'a> {\n    fn eq(&self, other: &Item) -> bool {\n        self.text == other.text // MUST use same data as Hash\n    }\n}\nimpl<'a> Eq for Item<'a> {}\n\nlet a = vec![\n    Item::new(1, 3, \"quebec\"),\n    Item::new(2, 4, \"alpha\"),\n    Item::new(3, 8, \"bravo\"),\n    Item::new(5, 9, \"x-ray\"),\n];\nlet b = vec![\n    Item::new(3, 1, \"alpha\"),\n    Item::new(8, 3, \"bravo\"),\n    Item::new(9, 5, \"yankee\"),\n    Item::new(8, 3, \"charlie\"),\n];\nlet differ = Differ::new(&a, &b);\nfor span in differ.spans() {\n    match span.tag {\n        Tag::Equal => (), // ignore\n        Tag::Insert => println!(\"{:?}\", span),\n        Tag::Delete => println!(\"{:?}\", span),\n        Tag::Replace => println!(\"{:?}\", span),\n    }\n}\n```\n\nOutput:\n```text\nSpan { tag: Delete, a_start: 0, a_end: 1, b_start: 0, b_end: 0 }\nSpan { tag: Replace, a_start: 3, a_end: 4, b_start: 2, b_end: 4 }\n```\n\n# Upgrading\n\nTo upgrade from 0.3._x_ to 1._x_, change method calls to\n`spans_for_matches()` to function calls to \n[`differ::spans_for_matches()`](spans_for_matches.v.html).\n\n# License\n\nDiffer is free open source software (FOSS) licensed under the GNU\nGeneral Public License version 3 (GPLv3).\n*/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/lib.rs","byte_start":54,"byte_end":3929,"line_start":3,"line_end":154,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":12},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/differ.rs","byte_start":4361,"byte_end":4367,"line_start":10,"line_end":10,"column_start":12,"column_end":18},"name":"Differ","qualname":"::differ::Differ","value":"Differ {  }","parent":null,"children":[{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17}],"decl_id":null,"docs":" Provides methods for comparing two sequences.","sig":null,"attributes":[{"value":"/ Provides methods for comparing two sequences.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/differ.rs","byte_start":4229,"byte_end":4278,"line_start":7,"line_end":7,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/differ.rs","byte_start":4279,"byte_end":4282,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ See the [crate docs](index.html) for an overview and examples.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/differ.rs","byte_start":4283,"byte_end":4349,"line_start":9,"line_end":9,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":21},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/differ.rs","byte_start":5196,"byte_end":5199,"line_start":36,"line_end":36,"column_start":12,"column_end":15},"name":"new","qualname":"<Differ>::new","value":"fn (a: &'a [T], b: &'a [T]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Differ` and computes the comparison data.","sig":null,"attributes":[{"value":"/ Creates a new `Differ` and computes the comparison data.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/differ.rs","byte_start":4558,"byte_end":4618,"line_start":23,"line_end":23,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/differ.rs","byte_start":4623,"byte_end":4626,"line_start":24,"line_end":24,"column_start":5,"column_end":8}},{"value":"/ To get all the spans (equals, insertions, deletions, replacements)","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/differ.rs","byte_start":4631,"byte_end":4701,"line_start":25,"line_end":25,"column_start":5,"column_end":75}},{"value":"/ necessary to convert sequence `a` into `b`, use","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/differ.rs","byte_start":4706,"byte_end":4757,"line_start":26,"line_end":26,"column_start":5,"column_end":56}},{"value":"/ [`spans()`](struct.Differ.html#method.spans).","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/differ.rs","byte_start":4762,"byte_end":4811,"line_start":27,"line_end":27,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/differ.rs","byte_start":4816,"byte_end":4819,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ To get all the matches (i.e., the positions and lengths) where `a`","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/differ.rs","byte_start":4824,"byte_end":4894,"line_start":29,"line_end":29,"column_start":5,"column_end":75}},{"value":"/ and `b` are the same, use","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/differ.rs","byte_start":4899,"byte_end":4928,"line_start":30,"line_end":30,"column_start":5,"column_end":34}},{"value":"/ [`matches()`](struct.Differ.html#method.matches).","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/differ.rs","byte_start":4933,"byte_end":4986,"line_start":31,"line_end":31,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/differ.rs","byte_start":4991,"byte_end":4994,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ If you need _both_ the matches _and_ the spans, use","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/differ.rs","byte_start":4999,"byte_end":5054,"line_start":33,"line_end":33,"column_start":5,"column_end":60}},{"value":"/ [`matches()`](struct.Differ.html#method.matches), and then use","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/differ.rs","byte_start":5059,"byte_end":5125,"line_start":34,"line_end":34,"column_start":5,"column_end":71}},{"value":"/ [`spans_for_matches()`](spans_for_matches.v.html).","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/differ.rs","byte_start":5130,"byte_end":5184,"line_start":35,"line_end":35,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":23},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/differ.rs","byte_start":6391,"byte_end":6396,"line_start":69,"line_end":69,"column_start":12,"column_end":17},"name":"spans","qualname":"<Differ>::spans","value":"fn (&self) -> Vec<Span>","parent":null,"children":[],"decl_id":null,"docs":" Returns all the spans (equals, insertions, deletions,\n replacements) necessary to convert sequence `a` into `b`.","sig":null,"attributes":[{"value":"/ Returns all the spans (equals, insertions, deletions,","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/differ.rs","byte_start":6058,"byte_end":6115,"line_start":63,"line_end":63,"column_start":5,"column_end":62}},{"value":"/ replacements) necessary to convert sequence `a` into `b`.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/differ.rs","byte_start":6120,"byte_end":6181,"line_start":64,"line_end":64,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/differ.rs","byte_start":6186,"byte_end":6189,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ If you need _both_ the matches _and_ the spans, use","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/differ.rs","byte_start":6194,"byte_end":6249,"line_start":66,"line_end":66,"column_start":5,"column_end":60}},{"value":"/ [`matches()`](struct.Differ.html#method.matches), and then use","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/differ.rs","byte_start":6254,"byte_end":6320,"line_start":67,"line_end":67,"column_start":5,"column_end":71}},{"value":"/ [`spans_for_matches()`](spans_for_matches.v.html).","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/differ.rs","byte_start":6325,"byte_end":6379,"line_start":68,"line_end":68,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/differ.rs","byte_start":6853,"byte_end":6860,"line_start":82,"line_end":82,"column_start":12,"column_end":19},"name":"matches","qualname":"<Differ>::matches","value":"fn (&self) -> Vec<Match>","parent":null,"children":[],"decl_id":null,"docs":" Returns every [`Match`](struct.Match.html) between the two\n sequences.","sig":null,"attributes":[{"value":"/ Returns every [`Match`](struct.Match.html) between the two","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/differ.rs","byte_start":6504,"byte_end":6566,"line_start":74,"line_end":74,"column_start":5,"column_end":67}},{"value":"/ sequences.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/differ.rs","byte_start":6571,"byte_end":6585,"line_start":75,"line_end":75,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/differ.rs","byte_start":6590,"byte_end":6593,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ The differences are the spans between matches.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/differ.rs","byte_start":6598,"byte_end":6648,"line_start":77,"line_end":77,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/differ.rs","byte_start":6653,"byte_end":6656,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ To get all the spans (equals, insertions, deletions, replacements)","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/differ.rs","byte_start":6661,"byte_end":6731,"line_start":79,"line_end":79,"column_start":5,"column_end":75}},{"value":"/ necessary to convert sequence `a` into `b`, use","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/differ.rs","byte_start":6736,"byte_end":6787,"line_start":80,"line_end":80,"column_start":5,"column_end":56}},{"value":"/ [`spans()`](struct.Differ.html#method.spans).","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/differ.rs","byte_start":6792,"byte_end":6841,"line_start":81,"line_end":81,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/differ.rs","byte_start":8744,"byte_end":8757,"line_start":135,"line_end":135,"column_start":12,"column_end":25},"name":"longest_match","qualname":"<Differ>::longest_match","value":"fn (&self, a_start: usize, a_end: usize, b_start: usize, b_end: usize) -> Match","parent":null,"children":[],"decl_id":null,"docs":" Returns the longest [`Match`](struct.Match.html) between the two\n given sequences, within the given index ranges.","sig":null,"attributes":[{"value":"/ Returns the longest [`Match`](struct.Match.html) between the two","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/differ.rs","byte_start":8464,"byte_end":8532,"line_start":130,"line_end":130,"column_start":5,"column_end":73}},{"value":"/ given sequences, within the given index ranges.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/differ.rs","byte_start":8537,"byte_end":8588,"line_start":131,"line_end":131,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/differ.rs","byte_start":8593,"byte_end":8596,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ This is used internally, but may be useful, e.g., when called","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/differ.rs","byte_start":8601,"byte_end":8666,"line_start":133,"line_end":133,"column_start":5,"column_end":70}},{"value":"/ with say, `differ.longest_match(0, a.len(), 0, b.len())`.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/differ.rs","byte_start":8671,"byte_end":8732,"line_start":134,"line_end":134,"column_start":5,"column_end":66}}]},{"kind":"Function","id":{"krate":0,"index":26},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/differ.rs","byte_start":10935,"byte_end":10952,"line_start":201,"line_end":201,"column_start":8,"column_end":25},"name":"spans_for_matches","qualname":"::differ::spans_for_matches","value":"fn (matches: &[Match]) -> Vec<Span>","parent":null,"children":[],"decl_id":null,"docs":" Returns all the spans (equals, insertions, deletions, replacements)\n necessary to convert sequence `a` into `b`, given the precomputed\n matches.","sig":null,"attributes":[{"value":"/ Returns all the spans (equals, insertions, deletions, replacements)","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/differ.rs","byte_start":10435,"byte_end":10506,"line_start":190,"line_end":190,"column_start":1,"column_end":72}},{"value":"/ necessary to convert sequence `a` into `b`, given the precomputed","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/differ.rs","byte_start":10507,"byte_end":10576,"line_start":191,"line_end":191,"column_start":1,"column_end":70}},{"value":"/ matches.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/differ.rs","byte_start":10577,"byte_end":10589,"line_start":192,"line_end":192,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/differ.rs","byte_start":10590,"byte_end":10593,"line_start":193,"line_end":193,"column_start":1,"column_end":4}},{"value":"/ Use this if you need _both_ matches _and_ spans, to avoid needlessly","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/differ.rs","byte_start":10594,"byte_end":10666,"line_start":194,"line_end":194,"column_start":1,"column_end":73}},{"value":"/ recomputing the matches, i.e., call","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/differ.rs","byte_start":10667,"byte_end":10706,"line_start":195,"line_end":195,"column_start":1,"column_end":40}},{"value":"/ [`Differ::matches()`](struct.Differ.html#method.matches) to get the","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/differ.rs","byte_start":10707,"byte_end":10778,"line_start":196,"line_end":196,"column_start":1,"column_end":72}},{"value":"/ matches, and then this function for the spans.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/differ.rs","byte_start":10779,"byte_end":10829,"line_start":197,"line_end":197,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/differ.rs","byte_start":10830,"byte_end":10833,"line_start":198,"line_end":198,"column_start":1,"column_end":4}},{"value":"/ If you don't need the matches, then use","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/differ.rs","byte_start":10834,"byte_end":10877,"line_start":199,"line_end":199,"column_start":1,"column_end":44}},{"value":"/ [`spans()`](struct.Differ.html#method.spans).","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/differ.rs","byte_start":10878,"byte_end":10927,"line_start":200,"line_end":200,"column_start":1,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":45},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/structs.rs","byte_start":11962,"byte_end":11967,"line_start":10,"line_end":10,"column_start":12,"column_end":17},"name":"Match","qualname":"::structs::Match","value":"Match { a_start, b_start, length }","parent":null,"children":[{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48}],"decl_id":null,"docs":" Holds the start indexes and length of one match.\n","sig":null,"attributes":[{"value":"/ Holds the start indexes and length of one match.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/structs.rs","byte_start":11777,"byte_end":11829,"line_start":7,"line_end":7,"column_start":1,"column_end":53}}]},{"kind":"Field","id":{"krate":0,"index":46},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/structs.rs","byte_start":11978,"byte_end":11985,"line_start":11,"line_end":11,"column_start":9,"column_end":16},"name":"a_start","qualname":"::structs::Match::a_start","value":"usize","parent":{"krate":0,"index":45},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":47},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/structs.rs","byte_start":12002,"byte_end":12009,"line_start":12,"line_end":12,"column_start":9,"column_end":16},"name":"b_start","qualname":"::structs::Match::b_start","value":"usize","parent":{"krate":0,"index":45},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":48},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/structs.rs","byte_start":12026,"byte_end":12032,"line_start":13,"line_end":13,"column_start":9,"column_end":15},"name":"length","qualname":"::structs::Match::length","value":"usize","parent":{"krate":0,"index":45},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/structs.rs","byte_start":12087,"byte_end":12090,"line_start":18,"line_end":18,"column_start":12,"column_end":15},"name":"new","qualname":"<Match>::new","value":"fn (a_start: usize, b_start: usize, length: usize) -> Match","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":77},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/structs.rs","byte_start":12402,"byte_end":12407,"line_start":28,"line_end":28,"column_start":5,"column_end":10},"name":"Equal","qualname":"::structs::Tag::Equal","value":"Tag::Equal","parent":{"krate":0,"index":76},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":79},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/structs.rs","byte_start":12413,"byte_end":12419,"line_start":29,"line_end":29,"column_start":5,"column_end":11},"name":"Insert","qualname":"::structs::Tag::Insert","value":"Tag::Insert","parent":{"krate":0,"index":76},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":81},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/structs.rs","byte_start":12425,"byte_end":12431,"line_start":30,"line_end":30,"column_start":5,"column_end":11},"name":"Delete","qualname":"::structs::Tag::Delete","value":"Tag::Delete","parent":{"krate":0,"index":76},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":83},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/structs.rs","byte_start":12437,"byte_end":12444,"line_start":31,"line_end":31,"column_start":5,"column_end":12},"name":"Replace","qualname":"::structs::Tag::Replace","value":"Tag::Replace","parent":{"krate":0,"index":76},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":76},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/structs.rs","byte_start":12392,"byte_end":12395,"line_start":27,"line_end":27,"column_start":10,"column_end":13},"name":"Tag","qualname":"::structs::Tag","value":"Tag::{Equal, Insert, Delete, Replace}","parent":null,"children":[{"krate":0,"index":77},{"krate":0,"index":79},{"krate":0,"index":81},{"krate":0,"index":83}],"decl_id":null,"docs":" Used in a [`Span`](struct.Span.html) to indicate what kind of span it\n is.\n","sig":null,"attributes":[{"value":"/ Used in a [`Span`](struct.Span.html) to indicate what kind of span it","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/structs.rs","byte_start":12201,"byte_end":12274,"line_start":23,"line_end":23,"column_start":1,"column_end":74}},{"value":"/ is.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/structs.rs","byte_start":12275,"byte_end":12282,"line_start":24,"line_end":24,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":92},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/structs.rs","byte_start":13130,"byte_end":13134,"line_start":54,"line_end":54,"column_start":12,"column_end":16},"name":"Span","qualname":"::structs::Span","value":"Span { tag, a_start, a_end, b_start, b_end }","parent":null,"children":[{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97}],"decl_id":null,"docs":" Holds the data describing one span: what kind of span it is (the\n [`Tag`](enum.Tag.html)) and the start and end indexes in sequence `a`\n and `b`.","sig":null,"attributes":[{"value":"/ Holds the data describing one span: what kind of span it is (the","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/structs.rs","byte_start":12765,"byte_end":12833,"line_start":46,"line_end":46,"column_start":1,"column_end":69}},{"value":"/ [`Tag`](enum.Tag.html)) and the start and end indexes in sequence `a`","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/structs.rs","byte_start":12834,"byte_end":12907,"line_start":47,"line_end":47,"column_start":1,"column_end":74}},{"value":"/ and `b`.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/structs.rs","byte_start":12908,"byte_end":12920,"line_start":48,"line_end":48,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/structs.rs","byte_start":12921,"byte_end":12924,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ The indexes are half-open ranges, so go from the start up to one","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/structs.rs","byte_start":12925,"byte_end":12993,"line_start":50,"line_end":50,"column_start":1,"column_end":69}},{"value":"/ position before the end.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/structs.rs","byte_start":12994,"byte_end":13022,"line_start":51,"line_end":51,"column_start":1,"column_end":29}}]},{"kind":"Field","id":{"krate":0,"index":93},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/structs.rs","byte_start":13145,"byte_end":13148,"line_start":55,"line_end":55,"column_start":9,"column_end":12},"name":"tag","qualname":"::structs::Span::tag","value":"structs::Tag","parent":{"krate":0,"index":92},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":94},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/structs.rs","byte_start":13163,"byte_end":13170,"line_start":56,"line_end":56,"column_start":9,"column_end":16},"name":"a_start","qualname":"::structs::Span::a_start","value":"usize","parent":{"krate":0,"index":92},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":95},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/structs.rs","byte_start":13187,"byte_end":13192,"line_start":57,"line_end":57,"column_start":9,"column_end":14},"name":"a_end","qualname":"::structs::Span::a_end","value":"usize","parent":{"krate":0,"index":92},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":96},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/structs.rs","byte_start":13209,"byte_end":13216,"line_start":58,"line_end":58,"column_start":9,"column_end":16},"name":"b_start","qualname":"::structs::Span::b_start","value":"usize","parent":{"krate":0,"index":92},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":97},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/structs.rs","byte_start":13233,"byte_end":13238,"line_start":59,"line_end":59,"column_start":9,"column_end":14},"name":"b_end","qualname":"::structs::Span::b_end","value":"usize","parent":{"krate":0,"index":92},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/structs.rs","byte_start":13292,"byte_end":13297,"line_start":64,"line_end":64,"column_start":12,"column_end":17},"name":"equal","qualname":"<Span>::equal","value":"fn (a_start: usize, a_end: usize, b_start: usize, b_end: usize) -> Span","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/structs.rs","byte_start":13509,"byte_end":13515,"line_start":74,"line_end":74,"column_start":12,"column_end":18},"name":"insert","qualname":"<Span>::insert","value":"fn (a_start: usize, a_end: usize, b_start: usize, b_end: usize) -> Span","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/structs.rs","byte_start":13728,"byte_end":13734,"line_start":84,"line_end":84,"column_start":12,"column_end":18},"name":"delete","qualname":"<Span>::delete","value":"fn (a_start: usize, a_end: usize, b_start: usize, b_end: usize) -> Span","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/structs.rs","byte_start":13947,"byte_end":13954,"line_start":94,"line_end":94,"column_start":12,"column_end":19},"name":"replace","qualname":"<Span>::replace","value":"fn (a_start: usize, a_end: usize, b_start: usize, b_end: usize) -> Span","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/differ.rs","byte_start":4501,"byte_end":4507,"line_start":19,"line_end":19,"column_start":13,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/structs.rs","byte_start":12049,"byte_end":12054,"line_start":16,"line_end":16,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":30}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/structs.rs","byte_start":12471,"byte_end":12474,"line_start":34,"line_end":34,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":32}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/structs.rs","byte_start":13255,"byte_end":13259,"line_start":62,"line_end":62,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/differ.rs","byte_start":4501,"byte_end":4507,"line_start":19,"line_end":19,"column_start":13,"column_end":19},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":12},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/structs.rs","byte_start":12049,"byte_end":12054,"line_start":16,"line_end":16,"column_start":6,"column_end":11},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":45},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/structs.rs","byte_start":12471,"byte_end":12474,"line_start":34,"line_end":34,"column_start":23,"column_end":26},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":76},"to":{"krate":2,"index":5921}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/differ-1.0.0/src/structs.rs","byte_start":13255,"byte_end":13259,"line_start":62,"line_end":62,"column_start":6,"column_end":10},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":92},"to":{"krate":4294967295,"index":4294967295}}]}