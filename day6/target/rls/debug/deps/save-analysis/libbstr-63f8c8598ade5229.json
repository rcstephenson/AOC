{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12","program":"/home/ryan/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","bstr","/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"lazy_static\"","--cfg","feature=\"regex-automata\"","--cfg","feature=\"serde\"","--cfg","feature=\"serde1\"","--cfg","feature=\"serde1-nostd\"","--cfg","feature=\"std\"","--cfg","feature=\"unicode\"","-C","metadata=63f8c8598ade5229","-C","extra-filename=-63f8c8598ade5229","--out-dir","/home/ryan/repo/AOC2019/day6/target/rls/debug/deps","-L","dependency=/home/ryan/repo/AOC2019/day6/target/rls/debug/deps","--extern","lazy_static=/home/ryan/repo/AOC2019/day6/target/rls/debug/deps/liblazy_static-fb13d2ff58e5f597.rmeta","--extern","memchr=/home/ryan/repo/AOC2019/day6/target/rls/debug/deps/libmemchr-d8256c5f28271cfc.rmeta","--extern","regex_automata=/home/ryan/repo/AOC2019/day6/target/rls/debug/deps/libregex_automata-755a0c2cf4366ec3.rmeta","--extern","serde=/home/ryan/repo/AOC2019/day6/target/rls/debug/deps/libserde-ea7ccfda720f4777.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/ryan/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/ryan/repo/AOC2019/day6/target/rls/debug/deps/libbstr-63f8c8598ade5229.rmeta"},"prelude":{"crate_id":{"name":"bstr","disambiguator":[5088953149530703628,4862763192216351594]},"crate_root":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src","external_crates":[{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[7620319826054890005,5717302534568989792]}},{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[4475606148663180750,5419346832002689975]}},{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[18209801913766412741,14708739502762596590]}},{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[17534900064032465835,11074003829314630197]}},{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[5259792513756561775,1479263106690228407]}},{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[14346116818397650781,2977216825120829807]}},{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[3936655635976934790,16389253933182331078]}},{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[5174545163365617014,15822577537272331306]}},{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[1537777832242498626,9514621648460519184]}},{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[18358940337312830879,10081988574518201852]}},{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[12121062121650459058,11489301800313262789]}},{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[14319052529584542008,1066639489166686923]}},{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[9012578297089494616,4116522626272880912]}},{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[8611561841149342373,8229239553347846203]}},{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/lib.rs","num":15,"id":{"name":"lazy_static","disambiguator":[6623145172369021167,8669571995477936301]}},{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[3573466191885300946,15571706647381084586]}},{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/lib.rs","num":17,"id":{"name":"regex_automata","disambiguator":[8753889083607326870,15670543675663635358]}},{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/lib.rs","num":18,"id":{"name":"byteorder","disambiguator":[17196501534212264921,7573405847807460096]}},{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/lib.rs","num":19,"id":{"name":"serde","disambiguator":[7936411587165843447,14587141980252146778]}}],"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/lib.rs","byte_start":0,"byte_end":20276,"line_start":1,"line_end":456,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":1025},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/lib.rs","byte_start":18560,"byte_end":18564,"line_start":389,"line_end":389,"column_start":15,"column_end":19},"alias_span":null,"name":"BStr","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1030},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/lib.rs","byte_start":18607,"byte_end":18614,"line_start":391,"line_end":391,"column_start":18,"column_end":25},"alias_span":null,"name":"BString","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":182},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/lib.rs","byte_start":18641,"byte_end":18650,"line_start":393,"line_end":393,"column_start":5,"column_end":14},"alias_span":null,"name":"ByteSlice","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1093},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/lib.rs","byte_start":18652,"byte_end":18657,"line_start":393,"line_end":393,"column_start":16,"column_end":21},"alias_span":null,"name":"Bytes","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1102},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/lib.rs","byte_start":18659,"byte_end":18665,"line_start":393,"line_end":393,"column_start":23,"column_end":29},"alias_span":null,"name":"Fields","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1108},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/lib.rs","byte_start":18667,"byte_end":18677,"line_start":393,"line_end":393,"column_start":31,"column_end":41},"alias_span":null,"name":"FieldsWith","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1075},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/lib.rs","byte_start":18679,"byte_end":18683,"line_start":393,"line_end":393,"column_start":43,"column_end":47},"alias_span":null,"name":"Find","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1084},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/lib.rs","byte_start":18685,"byte_end":18696,"line_start":393,"line_end":393,"column_start":49,"column_end":60},"alias_span":null,"name":"FindReverse","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1057},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/lib.rs","byte_start":18698,"byte_end":18704,"line_start":393,"line_end":393,"column_start":62,"column_end":68},"alias_span":null,"name":"Finder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1066},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/lib.rs","byte_start":18710,"byte_end":18723,"line_start":394,"line_end":394,"column_start":5,"column_end":18},"alias_span":null,"name":"FinderReverse","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":394},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/lib.rs","byte_start":18725,"byte_end":18730,"line_start":394,"line_end":394,"column_start":20,"column_end":25},"alias_span":null,"name":"Lines","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":404},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/lib.rs","byte_start":18732,"byte_end":18751,"line_start":394,"line_end":394,"column_start":27,"column_end":46},"alias_span":null,"name":"LinesWithTerminator","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1118},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/lib.rs","byte_start":18753,"byte_end":18758,"line_start":394,"line_end":394,"column_start":48,"column_end":53},"alias_span":null,"name":"Split","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1134},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/lib.rs","byte_start":18760,"byte_end":18766,"line_start":394,"line_end":394,"column_start":55,"column_end":61},"alias_span":null,"name":"SplitN","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1142},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/lib.rs","byte_start":18768,"byte_end":18781,"line_start":394,"line_end":394,"column_start":63,"column_end":76},"alias_span":null,"name":"SplitNReverse","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1126},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/lib.rs","byte_start":18787,"byte_end":18799,"line_start":395,"line_end":395,"column_start":5,"column_end":17},"alias_span":null,"name":"SplitReverse","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":174},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/lib.rs","byte_start":18801,"byte_end":18802,"line_start":395,"line_end":395,"column_start":19,"column_end":20},"alias_span":null,"name":"B","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":433},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/lib.rs","byte_start":18849,"byte_end":18855,"line_start":398,"line_end":398,"column_start":19,"column_end":25},"alias_span":null,"name":"concat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":436},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/lib.rs","byte_start":18857,"byte_end":18861,"line_start":398,"line_end":398,"column_start":27,"column_end":31},"alias_span":null,"name":"join","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":446},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/lib.rs","byte_start":18863,"byte_end":18870,"line_start":398,"line_end":398,"column_start":33,"column_end":40},"alias_span":null,"name":"ByteVec","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1150},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/lib.rs","byte_start":18872,"byte_end":18882,"line_start":398,"line_end":398,"column_start":42,"column_end":52},"alias_span":null,"name":"DrainBytes","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1156},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/lib.rs","byte_start":18884,"byte_end":18897,"line_start":398,"line_end":398,"column_start":54,"column_end":67},"alias_span":null,"name":"FromUtf8Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1667},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/lib.rs","byte_start":18951,"byte_end":18966,"line_start":401,"line_end":401,"column_start":5,"column_end":20},"alias_span":null,"name":"GraphemeIndices","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1658},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/lib.rs","byte_start":18968,"byte_end":18977,"line_start":401,"line_end":401,"column_start":22,"column_end":31},"alias_span":null,"name":"Graphemes","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1687},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/lib.rs","byte_start":18979,"byte_end":18994,"line_start":401,"line_end":401,"column_start":33,"column_end":48},"alias_span":null,"name":"SentenceIndices","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1678},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/lib.rs","byte_start":18996,"byte_end":19005,"line_start":401,"line_end":401,"column_start":50,"column_end":59},"alias_span":null,"name":"Sentences","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1707},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/lib.rs","byte_start":19007,"byte_end":19018,"line_start":401,"line_end":401,"column_start":61,"column_end":72},"alias_span":null,"name":"WordIndices","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1697},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/lib.rs","byte_start":19024,"byte_end":19029,"line_start":402,"line_end":402,"column_start":5,"column_end":10},"alias_span":null,"name":"Words","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1726},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/lib.rs","byte_start":19031,"byte_end":19052,"line_start":402,"line_end":402,"column_start":12,"column_end":33},"alias_span":null,"name":"WordsWithBreakIndices","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1717},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/lib.rs","byte_start":19054,"byte_end":19069,"line_start":402,"line_end":402,"column_start":35,"column_end":50},"alias_span":null,"name":"WordsWithBreaks","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1015},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/lib.rs","byte_start":19094,"byte_end":19100,"line_start":405,"line_end":405,"column_start":5,"column_end":11},"alias_span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/lib.rs","byte_start":19104,"byte_end":19115,"line_start":405,"line_end":405,"column_start":15,"column_end":26},"name":"decode_utf8","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1019},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/lib.rs","byte_start":19117,"byte_end":19128,"line_start":405,"line_end":405,"column_start":28,"column_end":39},"alias_span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/lib.rs","byte_start":19132,"byte_end":19148,"line_start":405,"line_end":405,"column_start":43,"column_end":59},"name":"decode_last_utf8","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1745},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/lib.rs","byte_start":19150,"byte_end":19161,"line_start":405,"line_end":405,"column_start":61,"column_end":72},"alias_span":null,"name":"CharIndices","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1736},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/lib.rs","byte_start":19167,"byte_end":19172,"line_start":406,"line_end":406,"column_start":5,"column_end":10},"alias_span":null,"name":"Chars","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":987},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/lib.rs","byte_start":19174,"byte_end":19183,"line_start":406,"line_end":406,"column_start":12,"column_end":21},"alias_span":null,"name":"Utf8Chunk","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1756},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/lib.rs","byte_start":19185,"byte_end":19195,"line_start":406,"line_end":406,"column_start":23,"column_end":33},"alias_span":null,"name":"Utf8Chunks","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1765},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/lib.rs","byte_start":19197,"byte_end":19206,"line_start":406,"line_end":406,"column_start":35,"column_end":44},"alias_span":null,"name":"Utf8Error","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/lib.rs","byte_start":0,"byte_end":20276,"line_start":1,"line_end":456,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":26},{"krate":0,"index":32},{"krate":0,"index":41},{"krate":0,"index":49},{"krate":0,"index":61},{"krate":0,"index":71},{"krate":0,"index":77},{"krate":0,"index":120},{"krate":0,"index":138},{"krate":0,"index":414},{"krate":0,"index":511},{"krate":0,"index":743},{"krate":0,"index":762},{"krate":0,"index":823},{"krate":0,"index":951}],"decl_id":null,"docs":"An experimental byte string library.","sig":null,"attributes":[{"value":"!\nAn experimental byte string library.\n\nByte strings are just like standard Unicode strings with one very important\ndifference: byte strings are only *conventionally* UTF-8 while Rust's standard\nUnicode strings are *guaranteed* to be valid UTF-8. The primary motivation for\nbyte strings is for handling arbitrary bytes that are mostly UTF-8.\n\n# Overview\n\nThis crate provides two important traits that provide string oriented methods\non `&[u8]` and `Vec<u8>` types:\n\n* [`ByteSlice`](trait.ByteSlice.html) extends the `[u8]` type with additional\n  string oriented methods.\n* [`ByteVec`](trait.ByteVec.html) extends the `Vec<u8>` type with additional\n  string oriented methods.\n\nAdditionally, this crate provides two concrete byte string types that deref to\n`[u8]` and `Vec<u8>`. These are useful for storing byte string types, and come\nwith convenient `std::fmt::Debug` implementations:\n\n* [`BStr`](struct.BStr.html) is a byte string slice, analogous to `str`.\n* [`BString`](struct.BString.html) is an owned growable byte string buffer,\n  analogous to `String`.\n\nAdditionally, the free function [`B`](fn.B.html) serves as a convenient short\nhand for writing byte string literals.\n\n# Quick examples\n\nByte strings build on the existing APIs for `Vec<u8>` and `&[u8]`, with\nadditional string oriented methods. Operations such as iterating over\ngraphemes, searching for substrings, replacing substrings, trimming and case\nconversion are examples of things not provided on the standard library `&[u8]`\nAPIs but are provided by this crate. For example, this code iterates over all\nof occurrences of a subtring:\n\n```\nuse bstr::ByteSlice;\n\nlet s = b\"foo bar foo foo quux foo\";\n\nlet mut matches = vec![];\nfor start in s.find_iter(\"foo\") {\n    matches.push(start);\n}\nassert_eq!(matches, [0, 8, 12, 21]);\n```\n\nHere's another example showing how to do a search and replace (and also showing\nuse of the `B` function):\n\n```\nuse bstr::{B, ByteSlice};\n\nlet old = B(\"foo ☃☃☃ foo foo quux foo\");\nlet new = old.replace(\"foo\", \"hello\");\nassert_eq!(new, B(\"hello ☃☃☃ hello hello quux hello\"));\n```\n\nAnd here's an example that shows case conversion, even in the presence of\ninvalid UTF-8:\n\n```\nuse bstr::{ByteSlice, ByteVec};\n\nlet mut lower = Vec::from(\"hello β\");\nlower[0] = b'\\xFF';\n// lowercase β is uppercased to Β\nassert_eq!(lower.to_uppercase(), b\"\\xFFELLO \\xCE\\x92\");\n```\n\n# Convenient debug representation\n\nWhen working with byte strings, it is often useful to be able to print them\nas if they were byte strings and not sequences of integers. While this crate\ncannot affect the `std::fmt::Debug` implementations for `[u8]` and `Vec<u8>`,\nthis crate does provide the `BStr` and `BString` types which have convenient\n`std::fmt::Debug` implementations.\n\nFor example, this\n\n```\nuse bstr::ByteSlice;\n\nlet mut bytes = Vec::from(\"hello β\");\nbytes[0] = b'\\xFF';\n\nprintln!(\"{:?}\", bytes.as_bstr());\n```\n\nwill output `\"\\xFFello β\"`.\n\nThis example works because the\n[`ByteSlice::as_bstr`](trait.ByteSlice.html#method.as_bstr)\nmethod converts any `&[u8]` to a `&BStr`.\n\n# When should I use byte strings?\n\nThis library is somewhat of an experiment that reflects my hypothesis that\nUTF-8 by convention is a better trade off in some circumstances than guaranteed\nUTF-8. It's possible, perhaps even likely, that this is a niche concern for\nfolks working closely with core text primitives.\n\nThe first time this idea hit me was in the implementation of Rust's regex\nengine. In particular, very little of the internal implementation cares at all\nabout searching valid UTF-8 encoded strings. Indeed, internally, the\nimplementation converts `&str` from the API to `&[u8]` fairly quickly and\njust deals with raw bytes. UTF-8 match boundaries are then guaranteed by the\nfinite state machine itself rather than any specific string type. This makes it\npossible to not only run regexes on `&str` values, but also on `&[u8]` values.\n\nWhy would you ever want to run a regex on a `&[u8]` though? Well, `&[u8]` is\nthe fundamental way at which one reads data from all sorts of streams, via the\nstandard library's [`Read`](https://doc.rust-lang.org/std/io/trait.Read.html)\ntrait. In particular, there is no platform independent way to determine whether\nwhat you're reading from is some binary file or a human readable text file.\nTherefore, if you're writing a program to search files, you probably need to\ndeal with `&[u8]` directly unless you're okay with first converting it to a\n`&str` and dropping any bytes that aren't valid UTF-8. (Or otherwise determine\nthe encoding---which is often impractical---and perform a transcoding step.)\nOften, the simplest and most robust way to approach this is to simply treat the\ncontents of a file as if it were mostly valid UTF-8 and pass through invalid\nUTF-8 untouched. This may not be the most correct approach though!\n\nOne case in particular exacerbates these issues, and that's memory mapping\na file. When you memory map a file, that file may be gigabytes big, but all\nyou get is a `&[u8]`. Converting that to a `&str` all in one go is generally\nnot a good idea because of the costs associated with doing so, and also\nbecause it generally causes one to do two passes over the data instead of\none, which is quite undesirable. It is of course usually possible to do it an\nincremental way by only parsing chunks at a time, but this is often complex to\ndo or impractical. For example, many regex engines only accept one contiguous\nsequence of bytes at a time with no way to perform incremental matching.\n\nIn summary, the conventional UTF-8 byte strings provided by this library is an\nexperiment. They are definitely useful in some limited circumstances, but how\nuseful they are more broadly isn't clear yet.\n\n# `bstr` in public APIs\n\nSince this library is still experimental, you should not use it in the public\nAPI of your crates until it hits `1.0` (unless you're OK with with tracking\nbreaking releases of `bstr`).\n\nIn general, it should be possible to avoid putting anything in this crate into\nyour public APIs. Namely, you should never need to use the `ByteSlice` or\n`ByteVec` traits as bounds on public APIs, since their only purpose is to\nextend the methods on the concrete types `[u8]` and `Vec<u8>`, respectively.\nSimilarly, it should not be necessary to put either the `BStr` or `BString`\ntypes into public APIs. If you want to use them internally, then they can\nbe converted to/from `[u8]`/`Vec<u8>` as needed.\n\n# Differences with standard strings\n\nThe primary difference between `[u8]` and `str` is that the former is\nconventionally UTF-8 while the latter is guaranteed to be UTF-8. The phrase\n\"conventionally UTF-8\" means that a `[u8]` may contain bytes that do not form\na valid UTF-8 sequence, but operations defined on the type in this crate are\ngenerally most useful on valid UTF-8 sequences. For example, iterating over\nUnicode codepoints or grapheme clusters is an operation that is only defined\non valid UTF-8. Therefore, when invalid UTF-8 is encountered, the Unicode\nreplacement codepoint is substituted. Thus, a byte string that is not UTF-8 at\nall is of limited utility when using these crate.\n\nHowever, not all operations on byte strings are specifically Unicode aware. For\nexample, substring search has no specific Unicode semantics ascribed to it. It\nworks just as well for byte strings that are completely valid UTF-8 as for byte\nstrings that contain no valid UTF-8 at all. Similarly for replacements and\nvarious other operations that do not need any Unicode specific tailoring.\n\nAside from the difference in how UTF-8 is handled, the APIs between `[u8]` and\n`str` (and `Vec<u8>` and `String`) are intentionally very similar, including\nmaintaining the same behavior for corner cases in things like substring\nsplitting. There are, however, some differences:\n\n* Substring search is not done with `matches`, but instead, `find_iter`.\n  In general, this crate does not define any generic\n  [`Pattern`](https://doc.rust-lang.org/std/str/pattern/trait.Pattern.html)\n  infrastructure, and instead prefers adding new methods for different\n  argument types. For example, `matches` can search by a `char` or a `&str`,\n  where as `find_iter` can only search by a byte string. `find_char` can be\n  used for searching by a `char`.\n* Since `SliceConcatExt` in the standard library is unstable, it is not\n  possible to reuse that to implement `join` and `concat` methods. Instead,\n  [`join`](fn.join.html) and [`concat`](fn.concat.html) are provided as free\n  functions that perform a similar task.\n* This library bundles in a few more Unicode operations, such as grapheme,\n  word and sentence iterators. More operations, such as normalization and\n  case folding, may be provided in the future.\n* Some `String`/`str` APIs will panic if a particular index was not on a valid\n  UTF-8 code unit sequence boundary. Conversely, no such checking is performed\n  in this crate, as is consistent with treating byte strings as a sequence of\n  bytes. This means callers are responsible for maintaining a UTF-8 invariant\n  if that's important.\n* Some routines provided by this crate, such as `starts_with_str`, have a\n  `_str` suffix to differentiate them from similar routines already defined\n  on the `[u8]` type. The difference is that `starts_with` requires its\n  parameter to be a `&[u8]`, where as `starts_with_str` permits its parameter\n  to by anything that implements `AsRef<[u8]>`, which is more flexible. This\n  means you can write `bytes.starts_with_str(\"☃\")` instead of\n  `bytes.starts_with(\"☃\".as_bytes())`.\n\nOtherwise, you should find most of the APIs between this crate and the standard\nlibrary string APIs to be very similar, if not identical.\n\n# Handling of invalid UTF-8\n\nSince byte strings are only *conventionally* UTF-8, there is no guarantee\nthat byte strings contain valid UTF-8. Indeed, it is perfectly legal for a\nbyte string to contain arbitrary bytes. However, since this library defines\na *string* type, it provides many operations specified by Unicode. These\noperations are typically only defined over codepoints, and thus have no real\nmeaning on bytes that are invalid UTF-8 because they do not map to a particular\ncodepoint.\n\nFor this reason, whenever operations defined only on codepoints are used, this\nlibrary will automatically convert invalid UTF-8 to the Unicode replacement\ncodepoint, `U+FFFD`, which looks like this: `�`. For example, an\n[iterator over codepoints](struct.Chars.html) will yield a Unicode\nreplacement codepoint whenever it comes across bytes that are not valid UTF-8:\n\n```\nuse bstr::ByteSlice;\n\nlet bs = b\"a\\xFF\\xFFz\";\nlet chars: Vec<char> = bs.chars().collect();\nassert_eq!(vec!['a', '\\u{FFFD}', '\\u{FFFD}', 'z'], chars);\n```\n\nThere are a few ways in which invalid bytes can be substituted with a Unicode\nreplacement codepoint. One way, not used by this crate, is to replace every\nindividual invalid byte with a single replacement codepoint. In contrast, the\napproach this crate uses is called the \"substitution of maximal subparts,\" as\nspecified by the Unicode Standard (Chapter 3, Section 9). (This approach is\nalso used by [W3C's Encoding Standard](https://www.w3.org/TR/encoding/).) In\nthis strategy, a replacement codepoint is inserted whenever a byte is found\nthat cannot possibly lead to a valid UTF-8 code unit sequence. If there were\nprevious bytes that represented a *prefix* of a well-formed UTF-8 code unit\nsequence, then all of those bytes (up to 3) are substituted with a single\nreplacement codepoint. For example:\n\n```\nuse bstr::ByteSlice;\n\nlet bs = b\"a\\xF0\\x9F\\x87z\";\nlet chars: Vec<char> = bs.chars().collect();\n// The bytes \\xF0\\x9F\\x87 could lead to a valid UTF-8 sequence, but 3 of them\n// on their own are invalid. Only one replacement codepoint is substituted,\n// which demonstrates the \"substitution of maximal subparts\" strategy.\nassert_eq!(vec!['a', '\\u{FFFD}', 'z'], chars);\n```\n\nIf you do need to access the raw bytes for some reason in an iterator like\n`Chars`, then you should use the iterator's \"indices\" variant, which gives\nthe byte offsets containing the invalid UTF-8 bytes that were substituted with\nthe replacement codepoint. For example:\n\n```\nuse bstr::{B, ByteSlice};\n\nlet bs = b\"a\\xE2\\x98z\";\nlet chars: Vec<(usize, usize, char)> = bs.char_indices().collect();\n// Even though the replacement codepoint is encoded as 3 bytes itself, the\n// byte range given here is only two bytes, corresponding to the original\n// raw bytes.\nassert_eq!(vec![(0, 1, 'a'), (1, 3, '\\u{FFFD}'), (3, 4, 'z')], chars);\n\n// Thus, getting the original raw bytes is as simple as slicing the original\n// byte string:\nlet chars: Vec<&[u8]> = bs.char_indices().map(|(s, e, _)| &bs[s..e]).collect();\nassert_eq!(vec![B(\"a\"), B(b\"\\xE2\\x98\"), B(\"z\")], chars);\n```\n\n# File paths and OS strings\n\nOne of the premiere features of Rust's standard library is how it handles file\npaths. In particular, it makes it very hard to write incorrect code while\nsimultaneously providing a correct cross platform abstraction for manipulating\nfile paths. The key challenge that one faces with file paths across platforms\nis derived from the following observations:\n\n* On most Unix-like systems, file paths are an arbitrary sequence of bytes.\n* On Windows, file paths are an arbitrary sequence of 16-bit integers.\n\n(In both cases, certain sequences aren't allowed. For example a `NUL` byte is\nnot allowed in either case. But we can ignore this for the purposes of this\nsection.)\n\nByte strings, like the ones provided in this crate, line up really well with\nfile paths on Unix like systems, which are themselves just arbitrary sequences\nof bytes. It turns out that if you treat them as \"mostly UTF-8,\" then things\nwork out pretty well. On the contrary, byte strings _don't_ really work\nthat well on Windows because it's not possible to correctly roundtrip file\npaths between 16-bit integers and something that looks like UTF-8 _without_\nexplicitly defining an encoding to do this for you, which is anathema to byte\nstrings, which are just bytes.\n\nRust's standard library elegantly solves this problem by specifying an\ninternal encoding for file paths that's only used on Windows called\n[WTF-8](https://simonsapin.github.io/wtf-8/). Its key properties are that they\npermit losslessly roundtripping file paths on Windows by extending UTF-8 to\nsupport an encoding of surrogate codepoints, while simultaneously supporting\nzero-cost conversion from Rust's Unicode strings to file paths. (Since UTF-8 is\na proper subset of WTF-8.)\n\nThe fundamental point at which the above strategy fails is when you want to\ntreat file paths as things that look like strings in a zero cost way. In most\ncases, this is actually the wrong thing to do, but some cases call for it,\nfor example, glob or regex matching on file paths. This is because WTF-8 is\ntreated as an internal implementation detail, and there is no way to access\nthose bytes via a public API. Therefore, such consumers are limited in what\nthey can do:\n\n1. One could re-implement WTF-8 and re-encode file paths on Windows to WTF-8\n   by accessing their underlying 16-bit integer representation. Unfortunately,\n   this isn't zero cost (it introduces a second WTF-8 decoding step) and it's\n   not clear this is a good thing to do, since WTF-8 should ideally remain an\n   internal implementation detail.\n2. One could instead declare that they will not handle paths on Windows that\n   are not valid UTF-16, and return an error when one is encountered.\n3. Like (2), but instead of returning an error, lossily decode the file path\n   on Windows that isn't valid UTF-16 into UTF-16 by replacing invalid bytes\n   with the Unicode replacement codepoint.\n\nWhile this library may provide facilities for (1) in the future, currently,\nthis library only provides facilities for (2) and (3). In particular, a suite\nof conversion functions are provided that permit converting between byte\nstrings, OS strings and file paths. For owned byte strings, they are:\n\n* [`ByteVec::from_os_string`](trait.ByteVec.html#method.from_os_string)\n* [`ByteVec::from_os_str_lossy`](trait.ByteVec.html#method.from_os_str_lossy)\n* [`ByteVec::from_path_buf`](trait.ByteVec.html#method.from_path_buf)\n* [`ByteVec::from_path_lossy`](trait.ByteVec.html#method.from_path_lossy)\n* [`ByteVec::into_os_string`](trait.ByteVec.html#method.into_os_string)\n* [`ByteVec::into_os_string_lossy`](trait.ByteVec.html#method.into_os_string_lossy)\n* [`ByteVec::into_path_buf`](trait.ByteVec.html#method.into_path_buf)\n* [`ByteVec::into_path_buf_lossy`](trait.ByteVec.html#method.into_path_buf_lossy)\n\nFor byte string slices, they are:\n\n* [`ByteSlice::from_os_str`](trait.ByteSlice.html#method.from_os_str)\n* [`ByteSlice::from_path`](trait.ByteSlice.html#method.from_path)\n* [`ByteSlice::to_os_str`](trait.ByteSlice.html#method.to_os_str)\n* [`ByteSlice::to_os_str_lossy`](trait.ByteSlice.html#method.to_os_str_lossy)\n* [`ByteSlice::to_path`](trait.ByteSlice.html#method.to_path)\n* [`ByteSlice::to_path_lossy`](trait.ByteSlice.html#method.to_path_lossy)\n\nOn Unix, all of these conversions are rigorously zero cost, which gives one\na way to ergonomically deal with raw file paths exactly as they are using\nnormal string-related functions. On Windows, these conversion routines perform\na UTF-8 check and either return an error or lossily decode the file path\ninto valid UTF-8, depending on which function you use. This means that you\ncannot roundtrip all file paths on Windows correctly using these conversion\nroutines. However, this may be an acceptable downside since such file paths\nare exceptionally rare. Moreover, roundtripping isn't always necessary, for\nexample, if all you're doing is filtering based on file paths.\n\nThe reason why using byte strings for this is potentially superior than the\nstandard library's approach is that a lot of Rust code is already lossily\nconverting file paths to Rust's Unicode strings, which are required to be valid\nUTF-8, and thus contain latent bugs on Unix where paths with invalid UTF-8 are\nnot terribly uncommon. If you instead use byte strings, then you're guaranteed\nto write correct code for Unix, at the cost of getting a corner case wrong on\nWindows.\n*/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/lib.rs","byte_start":0,"byte_end":18148,"line_start":1,"line_end":367,"column_start":1,"column_end":3}},{"value":"allow(dead_code)","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/lib.rs","byte_start":18193,"byte_end":18213,"line_start":370,"line_end":370,"column_start":1,"column_end":21}}]},{"kind":"Struct","id":{"krate":0,"index":1025},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstr.rs","byte_start":33513,"byte_end":33517,"line_start":31,"line_end":31,"column_start":12,"column_end":16},"name":"BStr","qualname":"::bstr::BStr","value":"BStr {  }","parent":null,"children":[{"krate":0,"index":1026}],"decl_id":null,"docs":" A wrapper for `&[u8]` that provides convenient string oriented trait impls.","sig":null,"attributes":[{"value":"/ A wrapper for `&[u8]` that provides convenient string oriented trait impls.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstr.rs","byte_start":32361,"byte_end":32440,"line_start":3,"line_end":3,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstr.rs","byte_start":32441,"byte_end":32444,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ If you need ownership or a growable byte string buffer, then use","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstr.rs","byte_start":32445,"byte_end":32513,"line_start":5,"line_end":5,"column_start":1,"column_end":69}},{"value":"/ [`BString`](struct.BString.html).","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstr.rs","byte_start":32514,"byte_end":32551,"line_start":6,"line_end":6,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstr.rs","byte_start":32552,"byte_end":32555,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ Using a `&BStr` is just like using a `&[u8]`, since `BStr`","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstr.rs","byte_start":32556,"byte_end":32618,"line_start":8,"line_end":8,"column_start":1,"column_end":63}},{"value":"/ implements `Deref` to `[u8]`. So all methods available on `[u8]`","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstr.rs","byte_start":32619,"byte_end":32687,"line_start":9,"line_end":9,"column_start":1,"column_end":69}},{"value":"/ are also available on `BStr`.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstr.rs","byte_start":32688,"byte_end":32721,"line_start":10,"line_end":10,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstr.rs","byte_start":32722,"byte_end":32725,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ # Representation","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstr.rs","byte_start":32726,"byte_end":32746,"line_start":12,"line_end":12,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstr.rs","byte_start":32747,"byte_end":32750,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ A `&BStr` has the same representation as a `&str`. That is, a `&BStr` is","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstr.rs","byte_start":32751,"byte_end":32827,"line_start":14,"line_end":14,"column_start":1,"column_end":77}},{"value":"/ a fat pointer which consists of a pointer to some bytes and a length.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstr.rs","byte_start":32828,"byte_end":32901,"line_start":15,"line_end":15,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstr.rs","byte_start":32902,"byte_end":32905,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ # Trait implementations","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstr.rs","byte_start":32906,"byte_end":32933,"line_start":17,"line_end":17,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstr.rs","byte_start":32934,"byte_end":32937,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ The `BStr` type has a number of trait implementations, and in particular,","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstr.rs","byte_start":32938,"byte_end":33015,"line_start":19,"line_end":19,"column_start":1,"column_end":78}},{"value":"/ defines equality and ordinal comparisons between `&BStr`, `&str` and","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstr.rs","byte_start":33016,"byte_end":33088,"line_start":20,"line_end":20,"column_start":1,"column_end":73}},{"value":"/ `&[u8]` for convenience.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstr.rs","byte_start":33089,"byte_end":33117,"line_start":21,"line_end":21,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstr.rs","byte_start":33118,"byte_end":33121,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ The `Debug` implementation for `BStr` shows its bytes as a normal string.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstr.rs","byte_start":33122,"byte_end":33199,"line_start":23,"line_end":23,"column_start":1,"column_end":78}},{"value":"/ For invalid UTF-8, hex escape sequences are used.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstr.rs","byte_start":33200,"byte_end":33253,"line_start":24,"line_end":24,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstr.rs","byte_start":33254,"byte_end":33257,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ The `Display` implementation behaves as if `BStr` were first lossily","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstr.rs","byte_start":33258,"byte_end":33330,"line_start":26,"line_end":26,"column_start":1,"column_end":73}},{"value":"/ converted to a `str`. Invalid UTF-8 bytes are substituted with the Unicode","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstr.rs","byte_start":33331,"byte_end":33409,"line_start":27,"line_end":27,"column_start":1,"column_end":79}},{"value":"/ replacement codepoint, which looks like this: �.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstr.rs","byte_start":33410,"byte_end":33464,"line_start":28,"line_end":28,"column_start":1,"column_end":53}},{"value":"repr(transparent)","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstr.rs","byte_start":33481,"byte_end":33501,"line_start":30,"line_end":30,"column_start":1,"column_end":21}}]},{"kind":"Struct","id":{"krate":0,"index":1030},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstring.rs","byte_start":35567,"byte_end":35574,"line_start":40,"line_end":40,"column_start":12,"column_end":19},"name":"BString","qualname":"::bstring::BString","value":"BString {  }","parent":null,"children":[{"krate":0,"index":1031}],"decl_id":null,"docs":" A wrapper for `Vec<u8>` that provides convenient string oriented trait\n impls.","sig":null,"attributes":[{"value":"/ A wrapper for `Vec<u8>` that provides convenient string oriented trait","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstring.rs","byte_start":34205,"byte_end":34279,"line_start":3,"line_end":3,"column_start":1,"column_end":75}},{"value":"/ impls.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstring.rs","byte_start":34280,"byte_end":34290,"line_start":4,"line_end":4,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstring.rs","byte_start":34291,"byte_end":34294,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ A `BString` has ownership over its contents and corresponds to","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstring.rs","byte_start":34295,"byte_end":34361,"line_start":6,"line_end":6,"column_start":1,"column_end":67}},{"value":"/ a growable or shrinkable buffer. Its borrowed counterpart is a","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstring.rs","byte_start":34362,"byte_end":34428,"line_start":7,"line_end":7,"column_start":1,"column_end":67}},{"value":"/ [`BStr`](struct.BStr.html), called a byte string slice.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstring.rs","byte_start":34429,"byte_end":34488,"line_start":8,"line_end":8,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstring.rs","byte_start":34489,"byte_end":34492,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ Using a `BString` is just like using a `Vec<u8>`, since `BString`","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstring.rs","byte_start":34493,"byte_end":34562,"line_start":10,"line_end":10,"column_start":1,"column_end":70}},{"value":"/ implements `Deref` to `Vec<u8>`. So all methods available on `Vec<u8>`","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstring.rs","byte_start":34563,"byte_end":34637,"line_start":11,"line_end":11,"column_start":1,"column_end":75}},{"value":"/ are also available on `BString`.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstring.rs","byte_start":34638,"byte_end":34674,"line_start":12,"line_end":12,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstring.rs","byte_start":34675,"byte_end":34678,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstring.rs","byte_start":34679,"byte_end":34693,"line_start":14,"line_end":14,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstring.rs","byte_start":34694,"byte_end":34697,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ You can create a new `BString` from a `Vec<u8>` via a `From` impl:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstring.rs","byte_start":34698,"byte_end":34768,"line_start":16,"line_end":16,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstring.rs","byte_start":34769,"byte_end":34772,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstring.rs","byte_start":34773,"byte_end":34780,"line_start":18,"line_end":18,"column_start":1,"column_end":8}},{"value":"/ use bstr::BString;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstring.rs","byte_start":34781,"byte_end":34803,"line_start":19,"line_end":19,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstring.rs","byte_start":34804,"byte_end":34807,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ let s = BString::from(\"Hello, world!\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstring.rs","byte_start":34808,"byte_end":34851,"line_start":21,"line_end":21,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstring.rs","byte_start":34852,"byte_end":34859,"line_start":22,"line_end":22,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstring.rs","byte_start":34860,"byte_end":34863,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ # Deref","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstring.rs","byte_start":34864,"byte_end":34875,"line_start":24,"line_end":24,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstring.rs","byte_start":34876,"byte_end":34879,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ The `BString` type implements `Deref` and `DerefMut`, where the target","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstring.rs","byte_start":34880,"byte_end":34954,"line_start":26,"line_end":26,"column_start":1,"column_end":75}},{"value":"/ types are `&Vec<u8>` and `&mut Vec<u8>`, respectively. `Deref` permits all of the","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstring.rs","byte_start":34955,"byte_end":35040,"line_start":27,"line_end":27,"column_start":1,"column_end":86}},{"value":"/ methods defined on `Vec<u8>` to be implicitly callable on any `BString`.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstring.rs","byte_start":35041,"byte_end":35117,"line_start":28,"line_end":28,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstring.rs","byte_start":35118,"byte_end":35121,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ For more information about how deref works, see the documentation for the","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstring.rs","byte_start":35122,"byte_end":35199,"line_start":30,"line_end":30,"column_start":1,"column_end":78}},{"value":"/ [`std::ops::Deref`](https://doc.rust-lang.org/std/ops/trait.Deref.html)","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstring.rs","byte_start":35200,"byte_end":35275,"line_start":31,"line_end":31,"column_start":1,"column_end":76}},{"value":"/ trait.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstring.rs","byte_start":35276,"byte_end":35286,"line_start":32,"line_end":32,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstring.rs","byte_start":35287,"byte_end":35290,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ # Representation","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstring.rs","byte_start":35291,"byte_end":35311,"line_start":34,"line_end":34,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstring.rs","byte_start":35312,"byte_end":35315,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ A `BString` has the same representation as a `Vec<u8>` and a `String`.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstring.rs","byte_start":35316,"byte_end":35390,"line_start":36,"line_end":36,"column_start":1,"column_end":75}},{"value":"/ That is, it is made up of three word sized components: a pointer to a","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstring.rs","byte_start":35391,"byte_end":35464,"line_start":37,"line_end":37,"column_start":1,"column_end":74}},{"value":"/ region of memory containing the bytes, a length and a capacity.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstring.rs","byte_start":35465,"byte_end":35532,"line_start":38,"line_end":38,"column_start":1,"column_end":68}}]},{"kind":"Function","id":{"krate":0,"index":174},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":53466,"byte_end":53467,"line_start":76,"line_end":76,"column_start":8,"column_end":9},"name":"B","qualname":"::ext_slice::B","value":"fn <'a, B> (bytes: &'a B) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":" A short-hand constructor for building a `&[u8]`.","sig":null,"attributes":[{"value":"/ A short-hand constructor for building a `&[u8]`.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":51838,"byte_end":51890,"line_start":30,"line_end":30,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":51891,"byte_end":51894,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ This idiosyncratic constructor is useful for concisely building byte string","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":51895,"byte_end":51974,"line_start":32,"line_end":32,"column_start":1,"column_end":80}},{"value":"/ slices. Its primary utility is in conveniently writing byte string literals","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":51975,"byte_end":52054,"line_start":33,"line_end":33,"column_start":1,"column_end":80}},{"value":"/ in a uniform way. For example, consider this code that does not compile:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":52055,"byte_end":52131,"line_start":34,"line_end":34,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":52132,"byte_end":52135,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":52136,"byte_end":52149,"line_start":36,"line_end":36,"column_start":1,"column_end":14}},{"value":"/ let strs = vec![b\"a\", b\"xy\"];","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":52150,"byte_end":52183,"line_start":37,"line_end":37,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":52184,"byte_end":52191,"line_start":38,"line_end":38,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":52192,"byte_end":52195,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ The above code doesn't compile because the type of the byte string literal","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":52196,"byte_end":52274,"line_start":40,"line_end":40,"column_start":1,"column_end":79}},{"value":"/ `b\"a\"` is `&'static [u8; 1]`, and the type of `b\"xy\"` is","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":52275,"byte_end":52335,"line_start":41,"line_end":41,"column_start":1,"column_end":61}},{"value":"/ `&'static [u8; 2]`. Since their types aren't the same, they can't be stored","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":52336,"byte_end":52415,"line_start":42,"line_end":42,"column_start":1,"column_end":80}},{"value":"/ in the same `Vec`. (This is dissimilar from normal Unicode string slices,","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":52416,"byte_end":52493,"line_start":43,"line_end":43,"column_start":1,"column_end":78}},{"value":"/ where both `\"a\"` and `\"xy\"` have the same type of `&'static str`.)","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":52494,"byte_end":52564,"line_start":44,"line_end":44,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":52565,"byte_end":52568,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ One way of getting the above code to compile is to convert byte strings to","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":52569,"byte_end":52647,"line_start":46,"line_end":46,"column_start":1,"column_end":79}},{"value":"/ slices. You might try this:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":52648,"byte_end":52679,"line_start":47,"line_end":47,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":52680,"byte_end":52683,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":52684,"byte_end":52697,"line_start":49,"line_end":49,"column_start":1,"column_end":14}},{"value":"/ let strs = vec![&b\"a\", &b\"xy\"];","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":52698,"byte_end":52733,"line_start":50,"line_end":50,"column_start":1,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":52734,"byte_end":52741,"line_start":51,"line_end":51,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":52742,"byte_end":52745,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ But this just creates values with type `& &'static [u8; 1]` and","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":52746,"byte_end":52813,"line_start":53,"line_end":53,"column_start":1,"column_end":68}},{"value":"/ `& &'static [u8; 2]`. Instead, you need to force the issue like so:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":52814,"byte_end":52885,"line_start":54,"line_end":54,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":52886,"byte_end":52889,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":52890,"byte_end":52897,"line_start":56,"line_end":56,"column_start":1,"column_end":8}},{"value":"/ let strs = vec![&b\"a\"[..], &b\"xy\"[..]];","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":52898,"byte_end":52941,"line_start":57,"line_end":57,"column_start":1,"column_end":44}},{"value":"/ // or","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":52942,"byte_end":52951,"line_start":58,"line_end":58,"column_start":1,"column_end":10}},{"value":"/ let strs = vec![b\"a\".as_ref(), b\"xy\".as_ref()];","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":52952,"byte_end":53003,"line_start":59,"line_end":59,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":53004,"byte_end":53011,"line_start":60,"line_end":60,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":53012,"byte_end":53015,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ But neither of these are particularly convenient to type, especially when","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":53016,"byte_end":53093,"line_start":62,"line_end":62,"column_start":1,"column_end":78}},{"value":"/ it's something as common as a string literal. Thus, this constructor","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":53094,"byte_end":53166,"line_start":63,"line_end":63,"column_start":1,"column_end":73}},{"value":"/ permits writing the following instead:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":53167,"byte_end":53209,"line_start":64,"line_end":64,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":53210,"byte_end":53213,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":53214,"byte_end":53221,"line_start":66,"line_end":66,"column_start":1,"column_end":8}},{"value":"/ use bstr::B;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":53222,"byte_end":53238,"line_start":67,"line_end":67,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":53239,"byte_end":53242,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ let strs = vec![B(\"a\"), B(b\"xy\")];","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":53243,"byte_end":53281,"line_start":69,"line_end":69,"column_start":1,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":53282,"byte_end":53289,"line_start":70,"line_end":70,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":53290,"byte_end":53293,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ Notice that this also lets you mix and match both string literals and byte","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":53294,"byte_end":53372,"line_start":72,"line_end":72,"column_start":1,"column_end":79}},{"value":"/ string literals. This can be quite convenient!","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":53373,"byte_end":53423,"line_start":73,"line_end":73,"column_start":1,"column_end":51}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":53424,"byte_end":53448,"line_start":74,"line_end":74,"column_start":1,"column_end":25}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":53449,"byte_end":53458,"line_start":75,"line_end":75,"column_start":1,"column_end":10}}]},{"kind":"Trait","id":{"krate":0,"index":180},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":53840,"byte_end":53846,"line_start":94,"line_end":94,"column_start":11,"column_end":17},"name":"Sealed","qualname":"::ext_slice::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":" Ensure that callers cannot implement `ByteSlice` by making an\n umplementable trait its super trait.\n","sig":null,"attributes":[{"value":"/ Ensure that callers cannot implement `ByteSlice` by making an","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":53723,"byte_end":53788,"line_start":92,"line_end":92,"column_start":1,"column_end":66}},{"value":"/ umplementable trait its super trait.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":53789,"byte_end":53829,"line_start":93,"line_end":93,"column_start":1,"column_end":41}}]},{"kind":"Trait","id":{"krate":0,"index":182},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":53948,"byte_end":53957,"line_start":98,"line_end":98,"column_start":11,"column_end":20},"name":"ByteSlice","qualname":"::ext_slice::ByteSlice","value":"ByteSlice: Sealed","parent":null,"children":[{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":187},{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":199},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":208},{"krate":0,"index":210},{"krate":0,"index":212},{"krate":0,"index":214},{"krate":0,"index":216},{"krate":0,"index":219},{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":226},{"krate":0,"index":228},{"krate":0,"index":230},{"krate":0,"index":232},{"krate":0,"index":234},{"krate":0,"index":236},{"krate":0,"index":237},{"krate":0,"index":239},{"krate":0,"index":242},{"krate":0,"index":245},{"krate":0,"index":248},{"krate":0,"index":251},{"krate":0,"index":254},{"krate":0,"index":257},{"krate":0,"index":260},{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":265},{"krate":0,"index":266},{"krate":0,"index":267},{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":282},{"krate":0,"index":284},{"krate":0,"index":286},{"krate":0,"index":287},{"krate":0,"index":288},{"krate":0,"index":289},{"krate":0,"index":290},{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":302},{"krate":0,"index":303}],"decl_id":null,"docs":" A trait that extends `&[u8]` with string oriented methods.\n","sig":null,"attributes":[{"value":"/ A trait that extends `&[u8]` with string oriented methods.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":53875,"byte_end":53937,"line_start":97,"line_end":97,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":183},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":54183,"byte_end":54191,"line_start":103,"line_end":103,"column_start":8,"column_end":16},"name":"as_bytes","qualname":"::ext_slice::ByteSlice::as_bytes","value":"fn (&self) -> &[u8]","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" A method for accessing the raw bytes of this type. This is always a\n no-op and callers shouldn't care about it. This only exists for making\n the extension trait work.\n","sig":null,"attributes":[{"value":"/ A method for accessing the raw bytes of this type. This is always a","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":53972,"byte_end":54043,"line_start":99,"line_end":99,"column_start":5,"column_end":76}},{"value":"/ no-op and callers shouldn't care about it. This only exists for making","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":54048,"byte_end":54122,"line_start":100,"line_end":100,"column_start":5,"column_end":79}},{"value":"/ the extension trait work.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":54127,"byte_end":54156,"line_start":101,"line_end":101,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":54434,"byte_end":54446,"line_start":109,"line_end":109,"column_start":8,"column_end":20},"name":"as_bytes_mut","qualname":"::ext_slice::ByteSlice::as_bytes_mut","value":"fn (&mut self) -> &mut [u8]","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" A method for accessing the raw bytes of this type, mutably. This is\n always a no-op and callers shouldn't care about it. This only exists\n for making the extension trait work.\n","sig":null,"attributes":[{"value":"/ A method for accessing the raw bytes of this type, mutably. This is","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":54214,"byte_end":54285,"line_start":105,"line_end":105,"column_start":5,"column_end":76}},{"value":"/ always a no-op and callers shouldn't care about it. This only exists","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":54290,"byte_end":54362,"line_start":106,"line_end":106,"column_start":5,"column_end":77}},{"value":"/ for making the extension trait work.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":54367,"byte_end":54407,"line_start":107,"line_end":107,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":185},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":55033,"byte_end":55040,"line_start":128,"line_end":128,"column_start":8,"column_end":15},"name":"as_bstr","qualname":"::ext_slice::ByteSlice::as_bstr","value":"fn (&self) -> &BStr","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Return this byte slice as a `&BStr`.","sig":null,"attributes":[{"value":"/ Return this byte slice as a `&BStr`.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":54477,"byte_end":54517,"line_start":111,"line_end":111,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":54522,"byte_end":54525,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ Use `&BStr` is useful because of its `fmt::Debug` representation","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":54530,"byte_end":54598,"line_start":113,"line_end":113,"column_start":5,"column_end":73}},{"value":"/ and various other trait implementations (such as `PartialEq` and","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":54603,"byte_end":54671,"line_start":114,"line_end":114,"column_start":5,"column_end":73}},{"value":"/ `PartialOrd`). In particular, the `Debug` implementation for `BStr`","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":54676,"byte_end":54747,"line_start":115,"line_end":115,"column_start":5,"column_end":76}},{"value":"/ shows its bytes as a normal string. For invalid UTF-8, hex escape","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":54752,"byte_end":54821,"line_start":116,"line_end":116,"column_start":5,"column_end":74}},{"value":"/ sequences are used.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":54826,"byte_end":54849,"line_start":117,"line_end":117,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":54854,"byte_end":54857,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":54862,"byte_end":54876,"line_start":119,"line_end":119,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":54881,"byte_end":54884,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":54889,"byte_end":54905,"line_start":121,"line_end":121,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":54910,"byte_end":54913,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":54918,"byte_end":54925,"line_start":123,"line_end":123,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":54930,"byte_end":54954,"line_start":124,"line_end":124,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":54959,"byte_end":54962,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ println!(\"{:?}\", b\"foo\\xFFbar\".as_bstr());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":54967,"byte_end":55013,"line_start":126,"line_end":126,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":55018,"byte_end":55025,"line_start":127,"line_end":127,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":55710,"byte_end":55721,"line_start":150,"line_end":150,"column_start":8,"column_end":19},"name":"as_bstr_mut","qualname":"::ext_slice::ByteSlice::as_bstr_mut","value":"fn (&mut self) -> &mut BStr","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Return this byte slice as a `&mut BStr`.","sig":null,"attributes":[{"value":"/ Return this byte slice as a `&mut BStr`.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":55105,"byte_end":55149,"line_start":132,"line_end":132,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":55154,"byte_end":55157,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ Use `&mut BStr` is useful because of its `fmt::Debug` representation","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":55162,"byte_end":55234,"line_start":134,"line_end":134,"column_start":5,"column_end":77}},{"value":"/ and various other trait implementations (such as `PartialEq` and","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":55239,"byte_end":55307,"line_start":135,"line_end":135,"column_start":5,"column_end":73}},{"value":"/ `PartialOrd`). In particular, the `Debug` implementation for `BStr`","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":55312,"byte_end":55383,"line_start":136,"line_end":136,"column_start":5,"column_end":76}},{"value":"/ shows its bytes as a normal string. For invalid UTF-8, hex escape","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":55388,"byte_end":55457,"line_start":137,"line_end":137,"column_start":5,"column_end":74}},{"value":"/ sequences are used.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":55462,"byte_end":55485,"line_start":138,"line_end":138,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":55490,"byte_end":55493,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":55498,"byte_end":55512,"line_start":140,"line_end":140,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":55517,"byte_end":55520,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":55525,"byte_end":55541,"line_start":142,"line_end":142,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":55546,"byte_end":55549,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":55554,"byte_end":55561,"line_start":144,"line_end":144,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":55566,"byte_end":55590,"line_start":145,"line_end":145,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":55595,"byte_end":55598,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = *b\"foo\\xFFbar\";","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":55603,"byte_end":55638,"line_start":147,"line_end":147,"column_start":5,"column_end":40}},{"value":"/ println!(\"{:?}\", &mut bytes.as_bstr_mut());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":55643,"byte_end":55690,"line_start":148,"line_end":148,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":55695,"byte_end":55702,"line_start":149,"line_end":149,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":187},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":56565,"byte_end":56576,"line_start":177,"line_end":177,"column_start":8,"column_end":19},"name":"from_os_str","qualname":"::ext_slice::ByteSlice::from_os_str","value":"fn (os_str: &OsStr) -> Option<&[u8]>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Create an immutable byte string from an OS string slice.","sig":null,"attributes":[{"value":"/ Create an immutable byte string from an OS string slice.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":55802,"byte_end":55862,"line_start":154,"line_end":154,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":55867,"byte_end":55870,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ On Unix, this always succeeds and is zero cost. On non-Unix systems,","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":55875,"byte_end":55947,"line_start":156,"line_end":156,"column_start":5,"column_end":77}},{"value":"/ this returns `None` if the given OS string is not valid UTF-8. (For","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":55952,"byte_end":56023,"line_start":157,"line_end":157,"column_start":5,"column_end":76}},{"value":"/ example, on Windows, file paths are allowed to be a sequence of","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":56028,"byte_end":56095,"line_start":158,"line_end":158,"column_start":5,"column_end":72}},{"value":"/ arbitrary 16-bit integers. Not all such sequences can be transcoded to","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":56100,"byte_end":56174,"line_start":159,"line_end":159,"column_start":5,"column_end":79}},{"value":"/ valid UTF-8.)","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":56179,"byte_end":56196,"line_start":160,"line_end":160,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":56201,"byte_end":56204,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":56209,"byte_end":56223,"line_start":162,"line_end":162,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":56228,"byte_end":56231,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":56236,"byte_end":56252,"line_start":164,"line_end":164,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":56257,"byte_end":56260,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":56265,"byte_end":56272,"line_start":166,"line_end":166,"column_start":5,"column_end":12}},{"value":"/ use std::ffi::OsStr;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":56277,"byte_end":56301,"line_start":167,"line_end":167,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":56306,"byte_end":56309,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":56314,"byte_end":56343,"line_start":169,"line_end":169,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":56348,"byte_end":56351,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ let os_str = OsStr::new(\"foo\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":56356,"byte_end":56391,"line_start":171,"line_end":171,"column_start":5,"column_end":40}},{"value":"/ let bs = <[u8]>::from_os_str(os_str).expect(\"should be valid UTF-8\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":56396,"byte_end":56469,"line_start":172,"line_end":172,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(bs, B(\"foo\"));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":56474,"byte_end":56503,"line_start":173,"line_end":173,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":56508,"byte_end":56515,"line_start":174,"line_end":174,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":56520,"byte_end":56543,"line_start":175,"line_end":175,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":56548,"byte_end":56557,"line_start":176,"line_end":176,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":190},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":57717,"byte_end":57726,"line_start":217,"line_end":217,"column_start":8,"column_end":17},"name":"from_path","qualname":"::ext_slice::ByteSlice::from_path","value":"fn (path: &Path) -> Option<&[u8]>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Create an immutable byte string from a file path.","sig":null,"attributes":[{"value":"/ Create an immutable byte string from a file path.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":56981,"byte_end":57034,"line_start":195,"line_end":195,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":57039,"byte_end":57042,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ On Unix, this always succeeds and is zero cost. On non-Unix systems,","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":57047,"byte_end":57119,"line_start":197,"line_end":197,"column_start":5,"column_end":77}},{"value":"/ this returns `None` if the given path is not valid UTF-8. (For example,","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":57124,"byte_end":57199,"line_start":198,"line_end":198,"column_start":5,"column_end":80}},{"value":"/ on Windows, file paths are allowed to be a sequence of arbitrary 16-bit","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":57204,"byte_end":57279,"line_start":199,"line_end":199,"column_start":5,"column_end":80}},{"value":"/ integers. Not all such sequences can be transcoded to valid UTF-8.)","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":57284,"byte_end":57355,"line_start":200,"line_end":200,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":57360,"byte_end":57363,"line_start":201,"line_end":201,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":57368,"byte_end":57382,"line_start":202,"line_end":202,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":57387,"byte_end":57390,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":57395,"byte_end":57411,"line_start":204,"line_end":204,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":57416,"byte_end":57419,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":57424,"byte_end":57431,"line_start":206,"line_end":206,"column_start":5,"column_end":12}},{"value":"/ use std::path::Path;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":57436,"byte_end":57460,"line_start":207,"line_end":207,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":57465,"byte_end":57468,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":57473,"byte_end":57502,"line_start":209,"line_end":209,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":57507,"byte_end":57510,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ let path = Path::new(\"foo\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":57515,"byte_end":57547,"line_start":211,"line_end":211,"column_start":5,"column_end":37}},{"value":"/ let bs = <[u8]>::from_path(path).expect(\"should be valid UTF-8\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":57552,"byte_end":57621,"line_start":212,"line_end":212,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(bs, B(\"foo\"));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":57626,"byte_end":57655,"line_start":213,"line_end":213,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":57660,"byte_end":57667,"line_start":214,"line_end":214,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":57672,"byte_end":57695,"line_start":215,"line_end":215,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":57700,"byte_end":57709,"line_start":216,"line_end":216,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":191},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":58846,"byte_end":58852,"line_start":250,"line_end":250,"column_start":8,"column_end":14},"name":"to_str","qualname":"::ext_slice::ByteSlice::to_str","value":"fn (&self) -> Result<&str, Utf8Error>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Safely convert this byte string into a `&str` if it's valid UTF-8.","sig":null,"attributes":[{"value":"/ Safely convert this byte string into a `&str` if it's valid UTF-8.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":57814,"byte_end":57884,"line_start":221,"line_end":221,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":57889,"byte_end":57892,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ If this byte string is not valid UTF-8, then an error is returned. The","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":57897,"byte_end":57971,"line_start":223,"line_end":223,"column_start":5,"column_end":79}},{"value":"/ error returned indicates the first invalid byte found and the length","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":57976,"byte_end":58048,"line_start":224,"line_end":224,"column_start":5,"column_end":77}},{"value":"/ of the error.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":58053,"byte_end":58070,"line_start":225,"line_end":225,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":58075,"byte_end":58078,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ In cases where a lossy conversion to `&str` is acceptable, then use one","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":58083,"byte_end":58158,"line_start":227,"line_end":227,"column_start":5,"column_end":80}},{"value":"/ of the [`to_str_lossy`](trait.ByteSlice.html#method.to_str_lossy) or","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":58163,"byte_end":58235,"line_start":228,"line_end":228,"column_start":5,"column_end":77}},{"value":"/ [`to_str_lossy_into`](trait.ByteSlice.html#method.to_str_lossy_into)","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":58240,"byte_end":58312,"line_start":229,"line_end":229,"column_start":5,"column_end":77}},{"value":"/ methods.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":58317,"byte_end":58329,"line_start":230,"line_end":230,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":58334,"byte_end":58337,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":58342,"byte_end":58356,"line_start":232,"line_end":232,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":58361,"byte_end":58364,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":58369,"byte_end":58385,"line_start":234,"line_end":234,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":58390,"byte_end":58393,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":58398,"byte_end":58405,"line_start":236,"line_end":236,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice, ByteVec};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":58410,"byte_end":58448,"line_start":237,"line_end":237,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":58453,"byte_end":58456,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ # fn example() -> Result<(), bstr::Utf8Error> {","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":58461,"byte_end":58512,"line_start":239,"line_end":239,"column_start":5,"column_end":56}},{"value":"/ let s = B(\"☃βツ\").to_str()?;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":58517,"byte_end":58553,"line_start":240,"line_end":240,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(\"☃βツ\", s);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":58558,"byte_end":58588,"line_start":241,"line_end":241,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":58593,"byte_end":58596,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ let mut bstring = <Vec<u8>>::from(\"☃βツ\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":58601,"byte_end":58651,"line_start":243,"line_end":243,"column_start":5,"column_end":50}},{"value":"/ bstring.push(b'\\xFF');","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":58656,"byte_end":58682,"line_start":244,"line_end":244,"column_start":5,"column_end":31}},{"value":"/ let err = bstring.to_str().unwrap_err();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":58687,"byte_end":58731,"line_start":245,"line_end":245,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(8, err.valid_up_to());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":58736,"byte_end":58773,"line_start":246,"line_end":246,"column_start":5,"column_end":42}},{"value":"/ # Ok(()) }; example().unwrap()","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":58778,"byte_end":58812,"line_start":247,"line_end":247,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":58817,"byte_end":58824,"line_start":248,"line_end":248,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":58829,"byte_end":58838,"line_start":249,"line_end":249,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":193},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":60127,"byte_end":60143,"line_start":284,"line_end":284,"column_start":15,"column_end":31},"name":"to_str_unchecked","qualname":"::ext_slice::ByteSlice::to_str_unchecked","value":"fn (&self) -> &str","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Unsafely convert this byte string into a `&str`, without checking for\n valid UTF-8.","sig":null,"attributes":[{"value":"/ Unsafely convert this byte string into a `&str`, without checking for","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":59131,"byte_end":59204,"line_start":258,"line_end":258,"column_start":5,"column_end":78}},{"value":"/ valid UTF-8.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":59209,"byte_end":59225,"line_start":259,"line_end":259,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":59230,"byte_end":59233,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":59238,"byte_end":59250,"line_start":261,"line_end":261,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":59255,"byte_end":59258,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ Callers *must* ensure that this byte string is valid UTF-8 before","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":59263,"byte_end":59332,"line_start":263,"line_end":263,"column_start":5,"column_end":74}},{"value":"/ calling this method. Converting a byte string into a `&str` that is","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":59337,"byte_end":59408,"line_start":264,"line_end":264,"column_start":5,"column_end":76}},{"value":"/ not valid UTF-8 is considered undefined behavior.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":59413,"byte_end":59466,"line_start":265,"line_end":265,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":59471,"byte_end":59474,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ This routine is useful in performance sensitive contexts where the","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":59479,"byte_end":59549,"line_start":267,"line_end":267,"column_start":5,"column_end":75}},{"value":"/ UTF-8 validity of the byte string is already known and it is","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":59554,"byte_end":59618,"line_start":268,"line_end":268,"column_start":5,"column_end":69}},{"value":"/ undesirable to pay the cost of an additional UTF-8 validation check","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":59623,"byte_end":59694,"line_start":269,"line_end":269,"column_start":5,"column_end":76}},{"value":"/ that [`to_str`](trait.ByteSlice.html#method.to_str) performs.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":59699,"byte_end":59764,"line_start":270,"line_end":270,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":59769,"byte_end":59772,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":59777,"byte_end":59791,"line_start":272,"line_end":272,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":59796,"byte_end":59799,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":59804,"byte_end":59820,"line_start":274,"line_end":274,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":59825,"byte_end":59828,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":59833,"byte_end":59840,"line_start":276,"line_end":276,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":59845,"byte_end":59874,"line_start":277,"line_end":277,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":59879,"byte_end":59882,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ // SAFETY: This is safe because string literals are guaranteed to be","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":59887,"byte_end":59959,"line_start":279,"line_end":279,"column_start":5,"column_end":77}},{"value":"/ // valid UTF-8 by the Rust compiler.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":59964,"byte_end":60004,"line_start":280,"line_end":280,"column_start":5,"column_end":45}},{"value":"/ let s = unsafe { B(\"☃βツ\").to_str_unchecked() };","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":60009,"byte_end":60065,"line_start":281,"line_end":281,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(\"☃βツ\", s);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":60070,"byte_end":60100,"line_start":282,"line_end":282,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":60105,"byte_end":60112,"line_start":283,"line_end":283,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":63029,"byte_end":63041,"line_start":349,"line_end":349,"column_start":8,"column_end":20},"name":"to_str_lossy","qualname":"::ext_slice::ByteSlice::to_str_lossy","value":"fn (&self) -> Cow<str>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Convert this byte string to a valid UTF-8 string by replacing invalid\n UTF-8 bytes with the Unicode replacement codepoint (`U+FFFD`).","sig":null,"attributes":[{"value":"/ Convert this byte string to a valid UTF-8 string by replacing invalid","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":60222,"byte_end":60295,"line_start":288,"line_end":288,"column_start":5,"column_end":78}},{"value":"/ UTF-8 bytes with the Unicode replacement codepoint (`U+FFFD`).","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":60300,"byte_end":60366,"line_start":289,"line_end":289,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":60371,"byte_end":60374,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ If the byte string is already valid UTF-8, then no copying or","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":60379,"byte_end":60444,"line_start":291,"line_end":291,"column_start":5,"column_end":70}},{"value":"/ allocation is performed and a borrrowed string slice is returned. If","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":60449,"byte_end":60521,"line_start":292,"line_end":292,"column_start":5,"column_end":77}},{"value":"/ the byte string is not valid UTF-8, then an owned string buffer is","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":60526,"byte_end":60596,"line_start":293,"line_end":293,"column_start":5,"column_end":75}},{"value":"/ returned with invalid bytes replaced by the replacement codepoint.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":60601,"byte_end":60671,"line_start":294,"line_end":294,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":60676,"byte_end":60679,"line_start":295,"line_end":295,"column_start":5,"column_end":8}},{"value":"/ This method uses the \"substitution of maximal subparts\" (Unicode","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":60684,"byte_end":60752,"line_start":296,"line_end":296,"column_start":5,"column_end":73}},{"value":"/ Standard, Chapter 3, Section 9) strategy for inserting the replacement","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":60757,"byte_end":60831,"line_start":297,"line_end":297,"column_start":5,"column_end":79}},{"value":"/ codepoint. Specifically, a replacement codepoint is inserted whenever a","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":60836,"byte_end":60911,"line_start":298,"line_end":298,"column_start":5,"column_end":80}},{"value":"/ byte is found that cannot possibly lead to a valid code unit sequence.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":60916,"byte_end":60990,"line_start":299,"line_end":299,"column_start":5,"column_end":79}},{"value":"/ If there were previous bytes that represented a prefix of a well-formed","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":60995,"byte_end":61070,"line_start":300,"line_end":300,"column_start":5,"column_end":80}},{"value":"/ code unit sequence, then all of those bytes are substituted with a","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":61075,"byte_end":61145,"line_start":301,"line_end":301,"column_start":5,"column_end":75}},{"value":"/ single replacement codepoint. The \"substitution of maximal subparts\"","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":61150,"byte_end":61222,"line_start":302,"line_end":302,"column_start":5,"column_end":77}},{"value":"/ strategy is the same strategy used by","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":61227,"byte_end":61268,"line_start":303,"line_end":303,"column_start":5,"column_end":46}},{"value":"/ [W3C's Encoding standard](https://www.w3.org/TR/encoding/).","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":61273,"byte_end":61336,"line_start":304,"line_end":304,"column_start":5,"column_end":68}},{"value":"/ For a more precise description of the maximal subpart strategy, see","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":61341,"byte_end":61412,"line_start":305,"line_end":305,"column_start":5,"column_end":76}},{"value":"/ the Unicode Standard, Chapter 3, Section 9. See also","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":61417,"byte_end":61473,"line_start":306,"line_end":306,"column_start":5,"column_end":61}},{"value":"/ [Public Review Issue #121](http://www.unicode.org/review/pr-121.html).","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":61478,"byte_end":61552,"line_start":307,"line_end":307,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":61557,"byte_end":61560,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ N.B. Rust's standard library also appears to use the same strategy,","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":61565,"byte_end":61636,"line_start":309,"line_end":309,"column_start":5,"column_end":76}},{"value":"/ but it does not appear to be an API guarantee.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":61641,"byte_end":61691,"line_start":310,"line_end":310,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":61696,"byte_end":61699,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":61704,"byte_end":61718,"line_start":312,"line_end":312,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":61723,"byte_end":61726,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":61731,"byte_end":61747,"line_start":314,"line_end":314,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":61752,"byte_end":61755,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":61760,"byte_end":61767,"line_start":316,"line_end":316,"column_start":5,"column_end":12}},{"value":"/ use std::borrow::Cow;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":61772,"byte_end":61797,"line_start":317,"line_end":317,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":61802,"byte_end":61805,"line_start":318,"line_end":318,"column_start":5,"column_end":8}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":61810,"byte_end":61834,"line_start":319,"line_end":319,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":61839,"byte_end":61842,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ let mut bstring = <Vec<u8>>::from(\"☃βツ\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":61847,"byte_end":61897,"line_start":321,"line_end":321,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(Cow::Borrowed(\"☃βツ\"), bstring.to_str_lossy());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":61902,"byte_end":61968,"line_start":322,"line_end":322,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":61973,"byte_end":61976,"line_start":323,"line_end":323,"column_start":5,"column_end":8}},{"value":"/ // Add a byte that makes the sequence invalid.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":61981,"byte_end":62031,"line_start":324,"line_end":324,"column_start":5,"column_end":55}},{"value":"/ bstring.push(b'\\xFF');","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":62036,"byte_end":62062,"line_start":325,"line_end":325,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(Cow::Borrowed(\"☃βツ\\u{FFFD}\"), bstring.to_str_lossy());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":62067,"byte_end":62141,"line_start":326,"line_end":326,"column_start":5,"column_end":74}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":62146,"byte_end":62153,"line_start":327,"line_end":327,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":62158,"byte_end":62161,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ This demonstrates the \"maximal subpart\" substitution logic.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":62166,"byte_end":62229,"line_start":329,"line_end":329,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":62234,"byte_end":62237,"line_start":330,"line_end":330,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":62242,"byte_end":62249,"line_start":331,"line_end":331,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":62254,"byte_end":62283,"line_start":332,"line_end":332,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":62288,"byte_end":62291,"line_start":333,"line_end":333,"column_start":5,"column_end":8}},{"value":"/ // \\x61 is the ASCII codepoint for 'a'.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":62296,"byte_end":62339,"line_start":334,"line_end":334,"column_start":5,"column_end":48}},{"value":"/ // \\xF1\\x80\\x80 is a valid 3-byte code unit prefix.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":62344,"byte_end":62399,"line_start":335,"line_end":335,"column_start":5,"column_end":60}},{"value":"/ // \\xE1\\x80 is a valid 2-byte code unit prefix.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":62404,"byte_end":62455,"line_start":336,"line_end":336,"column_start":5,"column_end":56}},{"value":"/ // \\xC2 is a valid 1-byte code unit prefix.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":62460,"byte_end":62507,"line_start":337,"line_end":337,"column_start":5,"column_end":52}},{"value":"/ // \\x62 is the ASCII codepoint for 'b'.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":62512,"byte_end":62555,"line_start":338,"line_end":338,"column_start":5,"column_end":48}},{"value":"/ //","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":62560,"byte_end":62566,"line_start":339,"line_end":339,"column_start":5,"column_end":11}},{"value":"/ // In sum, each of the prefixes is replaced by a single replacement","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":62571,"byte_end":62642,"line_start":340,"line_end":340,"column_start":5,"column_end":76}},{"value":"/ // codepoint since none of the prefixes are properly completed. This","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":62647,"byte_end":62719,"line_start":341,"line_end":341,"column_start":5,"column_end":77}},{"value":"/ // is in contrast to other strategies that might insert a replacement","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":62724,"byte_end":62797,"line_start":342,"line_end":342,"column_start":5,"column_end":78}},{"value":"/ // codepoint for every single byte.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":62802,"byte_end":62841,"line_start":343,"line_end":343,"column_start":5,"column_end":44}},{"value":"/ let bs = B(b\"\\x61\\xF1\\x80\\x80\\xE1\\x80\\xC2\\x62\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":62846,"byte_end":62898,"line_start":344,"line_end":344,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(\"a\\u{FFFD}\\u{FFFD}\\u{FFFD}b\", bs.to_str_lossy());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":62903,"byte_end":62967,"line_start":345,"line_end":345,"column_start":5,"column_end":69}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":62972,"byte_end":62979,"line_start":346,"line_end":346,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":62984,"byte_end":63007,"line_start":347,"line_end":347,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":63012,"byte_end":63021,"line_start":348,"line_end":348,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":195},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":65200,"byte_end":65217,"line_start":406,"line_end":406,"column_start":8,"column_end":25},"name":"to_str_lossy_into","qualname":"::ext_slice::ByteSlice::to_str_lossy_into","value":"fn (&self, dest: &mut String) -> ()","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Copy the contents of this byte string into the given owned string\n buffer, while replacing invalid UTF-8 code unit sequences with the\n Unicode replacement codepoint (`U+FFFD`).","sig":null,"attributes":[{"value":"/ Copy the contents of this byte string into the given owned string","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":64041,"byte_end":64110,"line_start":374,"line_end":374,"column_start":5,"column_end":74}},{"value":"/ buffer, while replacing invalid UTF-8 code unit sequences with the","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":64115,"byte_end":64185,"line_start":375,"line_end":375,"column_start":5,"column_end":75}},{"value":"/ Unicode replacement codepoint (`U+FFFD`).","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":64190,"byte_end":64235,"line_start":376,"line_end":376,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":64240,"byte_end":64243,"line_start":377,"line_end":377,"column_start":5,"column_end":8}},{"value":"/ This method uses the same \"substitution of maximal subparts\" strategy","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":64248,"byte_end":64321,"line_start":378,"line_end":378,"column_start":5,"column_end":78}},{"value":"/ for inserting the replacement codepoint as the","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":64326,"byte_end":64376,"line_start":379,"line_end":379,"column_start":5,"column_end":55}},{"value":"/ [`to_str_lossy`](trait.ByteSlice.html#method.to_str_lossy) method.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":64381,"byte_end":64451,"line_start":380,"line_end":380,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":64456,"byte_end":64459,"line_start":381,"line_end":381,"column_start":5,"column_end":8}},{"value":"/ This routine is useful for amortizing allocation. However, unlike","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":64464,"byte_end":64533,"line_start":382,"line_end":382,"column_start":5,"column_end":74}},{"value":"/ `to_str_lossy`, this routine will _always_ copy the contents of this","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":64538,"byte_end":64610,"line_start":383,"line_end":383,"column_start":5,"column_end":77}},{"value":"/ byte string into the destination buffer, even if this byte string is","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":64615,"byte_end":64687,"line_start":384,"line_end":384,"column_start":5,"column_end":77}},{"value":"/ valid UTF-8.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":64692,"byte_end":64708,"line_start":385,"line_end":385,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":64713,"byte_end":64716,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":64721,"byte_end":64735,"line_start":387,"line_end":387,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":64740,"byte_end":64743,"line_start":388,"line_end":388,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":64748,"byte_end":64764,"line_start":389,"line_end":389,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":64769,"byte_end":64772,"line_start":390,"line_end":390,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":64777,"byte_end":64784,"line_start":391,"line_end":391,"column_start":5,"column_end":12}},{"value":"/ use std::borrow::Cow;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":64789,"byte_end":64814,"line_start":392,"line_end":392,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":64819,"byte_end":64822,"line_start":393,"line_end":393,"column_start":5,"column_end":8}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":64827,"byte_end":64851,"line_start":394,"line_end":394,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":64856,"byte_end":64859,"line_start":395,"line_end":395,"column_start":5,"column_end":8}},{"value":"/ let mut bstring = <Vec<u8>>::from(\"☃βツ\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":64864,"byte_end":64914,"line_start":396,"line_end":396,"column_start":5,"column_end":50}},{"value":"/ // Add a byte that makes the sequence invalid.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":64919,"byte_end":64969,"line_start":397,"line_end":397,"column_start":5,"column_end":55}},{"value":"/ bstring.push(b'\\xFF');","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":64974,"byte_end":65000,"line_start":398,"line_end":398,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":65005,"byte_end":65008,"line_start":399,"line_end":399,"column_start":5,"column_end":8}},{"value":"/ let mut dest = String::new();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":65013,"byte_end":65046,"line_start":400,"line_end":400,"column_start":5,"column_end":38}},{"value":"/ bstring.to_str_lossy_into(&mut dest);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":65051,"byte_end":65092,"line_start":401,"line_end":401,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(\"☃βツ\\u{FFFD}\", dest);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":65097,"byte_end":65138,"line_start":402,"line_end":402,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":65143,"byte_end":65150,"line_start":403,"line_end":403,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":65155,"byte_end":65178,"line_start":404,"line_end":404,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":65183,"byte_end":65192,"line_start":405,"line_end":405,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":67011,"byte_end":67020,"line_start":453,"line_end":453,"column_start":8,"column_end":17},"name":"to_os_str","qualname":"::ext_slice::ByteSlice::to_os_str","value":"fn (&self) -> Result<&OsStr, Utf8Error>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Create an OS string slice from this byte string.","sig":null,"attributes":[{"value":"/ Create an OS string slice from this byte string.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":66255,"byte_end":66307,"line_start":432,"line_end":432,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":66312,"byte_end":66315,"line_start":433,"line_end":433,"column_start":5,"column_end":8}},{"value":"/ On Unix, this always succeeds and is zero cost. On non-Unix systems,","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":66320,"byte_end":66392,"line_start":434,"line_end":434,"column_start":5,"column_end":77}},{"value":"/ this returns a UTF-8 decoding error if this byte string is not valid","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":66397,"byte_end":66469,"line_start":435,"line_end":435,"column_start":5,"column_end":77}},{"value":"/ UTF-8. (For example, on Windows, file paths are allowed to be a","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":66474,"byte_end":66541,"line_start":436,"line_end":436,"column_start":5,"column_end":72}},{"value":"/ sequence of arbitrary 16-bit integers. There is no obvious mapping from","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":66546,"byte_end":66621,"line_start":437,"line_end":437,"column_start":5,"column_end":80}},{"value":"/ an arbitrary sequence of 8-bit integers to an arbitrary sequence of","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":66626,"byte_end":66697,"line_start":438,"line_end":438,"column_start":5,"column_end":76}},{"value":"/ 16-bit integers.)","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":66702,"byte_end":66723,"line_start":439,"line_end":439,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":66728,"byte_end":66731,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":66736,"byte_end":66750,"line_start":441,"line_end":441,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":66755,"byte_end":66758,"line_start":442,"line_end":442,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":66763,"byte_end":66779,"line_start":443,"line_end":443,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":66784,"byte_end":66787,"line_start":444,"line_end":444,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":66792,"byte_end":66799,"line_start":445,"line_end":445,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":66804,"byte_end":66833,"line_start":446,"line_end":446,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":66838,"byte_end":66841,"line_start":447,"line_end":447,"column_start":5,"column_end":8}},{"value":"/ let os_str = b\"foo\".to_os_str().expect(\"should be valid UTF-8\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":66846,"byte_end":66914,"line_start":448,"line_end":448,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(os_str, \"foo\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":66919,"byte_end":66949,"line_start":449,"line_end":449,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":66954,"byte_end":66961,"line_start":450,"line_end":450,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":66966,"byte_end":66989,"line_start":451,"line_end":451,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":66994,"byte_end":67003,"line_start":452,"line_end":452,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":199},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":68235,"byte_end":68250,"line_start":493,"line_end":493,"column_start":8,"column_end":23},"name":"to_os_str_lossy","qualname":"::ext_slice::ByteSlice::to_os_str_lossy","value":"fn (&self) -> Cow<OsStr>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Lossily create an OS string slice from this byte string.","sig":null,"attributes":[{"value":"/ Lossily create an OS string slice from this byte string.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":67455,"byte_end":67515,"line_start":471,"line_end":471,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":67520,"byte_end":67523,"line_start":472,"line_end":472,"column_start":5,"column_end":8}},{"value":"/ On Unix, this always succeeds and is zero cost. On non-Unix systems,","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":67528,"byte_end":67600,"line_start":473,"line_end":473,"column_start":5,"column_end":77}},{"value":"/ this will perform a UTF-8 check and lossily convert this byte string","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":67605,"byte_end":67677,"line_start":474,"line_end":474,"column_start":5,"column_end":77}},{"value":"/ into valid UTF-8 using the Unicode replacement codepoint.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":67682,"byte_end":67743,"line_start":475,"line_end":475,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":67748,"byte_end":67751,"line_start":476,"line_end":476,"column_start":5,"column_end":8}},{"value":"/ Note that this can prevent the correct roundtripping of file paths on","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":67756,"byte_end":67829,"line_start":477,"line_end":477,"column_start":5,"column_end":78}},{"value":"/ non-Unix systems such as Windows, where file paths are an arbitrary","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":67834,"byte_end":67905,"line_start":478,"line_end":478,"column_start":5,"column_end":76}},{"value":"/ sequence of 16-bit integers.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":67910,"byte_end":67942,"line_start":479,"line_end":479,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":67947,"byte_end":67950,"line_start":480,"line_end":480,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":67955,"byte_end":67969,"line_start":481,"line_end":481,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":67974,"byte_end":67977,"line_start":482,"line_end":482,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":67982,"byte_end":67998,"line_start":483,"line_end":483,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":68003,"byte_end":68006,"line_start":484,"line_end":484,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":68011,"byte_end":68018,"line_start":485,"line_end":485,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":68023,"byte_end":68047,"line_start":486,"line_end":486,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":68052,"byte_end":68055,"line_start":487,"line_end":487,"column_start":5,"column_end":8}},{"value":"/ let os_str = b\"foo\\xFFbar\".to_os_str_lossy();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":68060,"byte_end":68109,"line_start":488,"line_end":488,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(os_str.to_string_lossy(), \"foo\\u{FFFD}bar\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":68114,"byte_end":68173,"line_start":489,"line_end":489,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":68178,"byte_end":68185,"line_start":490,"line_end":490,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":68190,"byte_end":68213,"line_start":491,"line_end":491,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":68218,"byte_end":68227,"line_start":492,"line_end":492,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":69581,"byte_end":69588,"line_start":537,"line_end":537,"column_start":8,"column_end":15},"name":"to_path","qualname":"::ext_slice::ByteSlice::to_path","value":"fn (&self) -> Result<&Path, Utf8Error>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Create a path slice from this byte string.","sig":null,"attributes":[{"value":"/ Create a path slice from this byte string.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":68830,"byte_end":68876,"line_start":516,"line_end":516,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":68881,"byte_end":68884,"line_start":517,"line_end":517,"column_start":5,"column_end":8}},{"value":"/ On Unix, this always succeeds and is zero cost. On non-Unix systems,","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":68889,"byte_end":68961,"line_start":518,"line_end":518,"column_start":5,"column_end":77}},{"value":"/ this returns a UTF-8 decoding error if this byte string is not valid","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":68966,"byte_end":69038,"line_start":519,"line_end":519,"column_start":5,"column_end":77}},{"value":"/ UTF-8. (For example, on Windows, file paths are allowed to be a","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":69043,"byte_end":69110,"line_start":520,"line_end":520,"column_start":5,"column_end":72}},{"value":"/ sequence of arbitrary 16-bit integers. There is no obvious mapping from","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":69115,"byte_end":69190,"line_start":521,"line_end":521,"column_start":5,"column_end":80}},{"value":"/ an arbitrary sequence of 8-bit integers to an arbitrary sequence of","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":69195,"byte_end":69266,"line_start":522,"line_end":522,"column_start":5,"column_end":76}},{"value":"/ 16-bit integers.)","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":69271,"byte_end":69292,"line_start":523,"line_end":523,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":69297,"byte_end":69300,"line_start":524,"line_end":524,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":69305,"byte_end":69319,"line_start":525,"line_end":525,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":69324,"byte_end":69327,"line_start":526,"line_end":526,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":69332,"byte_end":69348,"line_start":527,"line_end":527,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":69353,"byte_end":69356,"line_start":528,"line_end":528,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":69361,"byte_end":69368,"line_start":529,"line_end":529,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":69373,"byte_end":69397,"line_start":530,"line_end":530,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":69402,"byte_end":69405,"line_start":531,"line_end":531,"column_start":5,"column_end":8}},{"value":"/ let path = b\"foo\".to_path().expect(\"should be valid UTF-8\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":69410,"byte_end":69474,"line_start":532,"line_end":532,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(path.as_os_str(), \"foo\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":69479,"byte_end":69519,"line_start":533,"line_end":533,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":69524,"byte_end":69531,"line_start":534,"line_end":534,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":69536,"byte_end":69559,"line_start":535,"line_end":535,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":69564,"byte_end":69573,"line_start":536,"line_end":536,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":203},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":70466,"byte_end":70479,"line_start":564,"line_end":564,"column_start":8,"column_end":21},"name":"to_path_lossy","qualname":"::ext_slice::ByteSlice::to_path_lossy","value":"fn (&self) -> Cow<Path>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Lossily create a path slice from this byte string.","sig":null,"attributes":[{"value":"/ Lossily create a path slice from this byte string.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":69677,"byte_end":69731,"line_start":541,"line_end":541,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":69736,"byte_end":69739,"line_start":542,"line_end":542,"column_start":5,"column_end":8}},{"value":"/ On Unix, this always succeeds and is zero cost. On non-Unix systems,","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":69744,"byte_end":69816,"line_start":543,"line_end":543,"column_start":5,"column_end":77}},{"value":"/ this will perform a UTF-8 check and lossily convert this byte string","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":69821,"byte_end":69893,"line_start":544,"line_end":544,"column_start":5,"column_end":77}},{"value":"/ into valid UTF-8 using the Unicode replacement codepoint.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":69898,"byte_end":69959,"line_start":545,"line_end":545,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":69964,"byte_end":69967,"line_start":546,"line_end":546,"column_start":5,"column_end":8}},{"value":"/ Note that this can prevent the correct roundtripping of file paths on","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":69972,"byte_end":70045,"line_start":547,"line_end":547,"column_start":5,"column_end":78}},{"value":"/ non-Unix systems such as Windows, where file paths are an arbitrary","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":70050,"byte_end":70121,"line_start":548,"line_end":548,"column_start":5,"column_end":76}},{"value":"/ sequence of 16-bit integers.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":70126,"byte_end":70158,"line_start":549,"line_end":549,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":70163,"byte_end":70166,"line_start":550,"line_end":550,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":70171,"byte_end":70185,"line_start":551,"line_end":551,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":70190,"byte_end":70193,"line_start":552,"line_end":552,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":70198,"byte_end":70214,"line_start":553,"line_end":553,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":70219,"byte_end":70222,"line_start":554,"line_end":554,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":70227,"byte_end":70234,"line_start":555,"line_end":555,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":70239,"byte_end":70263,"line_start":556,"line_end":556,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":70268,"byte_end":70271,"line_start":557,"line_end":557,"column_start":5,"column_end":8}},{"value":"/ let bs = b\"foo\\xFFbar\";","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":70276,"byte_end":70303,"line_start":558,"line_end":558,"column_start":5,"column_end":32}},{"value":"/ let path = bs.to_path_lossy();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":70308,"byte_end":70342,"line_start":559,"line_end":559,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(path.to_string_lossy(), \"foo\\u{FFFD}bar\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":70347,"byte_end":70404,"line_start":560,"line_end":560,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":70409,"byte_end":70416,"line_start":561,"line_end":561,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":70421,"byte_end":70444,"line_start":562,"line_end":562,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":70449,"byte_end":70458,"line_start":563,"line_end":563,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":205},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":71193,"byte_end":71200,"line_start":592,"line_end":592,"column_start":8,"column_end":15},"name":"repeatn","qualname":"::ext_slice::ByteSlice::repeatn","value":"fn (&self, n: usize) -> Vec<u8>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Create a new byte string by repeating this byte string `n` times.","sig":null,"attributes":[{"value":"/ Create a new byte string by repeating this byte string `n` times.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":70715,"byte_end":70784,"line_start":573,"line_end":573,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":70789,"byte_end":70792,"line_start":574,"line_end":574,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":70797,"byte_end":70809,"line_start":575,"line_end":575,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":70814,"byte_end":70817,"line_start":576,"line_end":576,"column_start":5,"column_end":8}},{"value":"/ This function panics if the capacity of the new byte string would","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":70822,"byte_end":70891,"line_start":577,"line_end":577,"column_start":5,"column_end":74}},{"value":"/ overflow.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":70896,"byte_end":70909,"line_start":578,"line_end":578,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":70914,"byte_end":70917,"line_start":579,"line_end":579,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":70922,"byte_end":70936,"line_start":580,"line_end":580,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":70941,"byte_end":70944,"line_start":581,"line_end":581,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":70949,"byte_end":70965,"line_start":582,"line_end":582,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":70970,"byte_end":70973,"line_start":583,"line_end":583,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":70978,"byte_end":70985,"line_start":584,"line_end":584,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":70990,"byte_end":71019,"line_start":585,"line_end":585,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":71024,"byte_end":71027,"line_start":586,"line_end":586,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b\"foo\".repeatn(4), B(\"foofoofoofoo\"));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":71032,"byte_end":71085,"line_start":587,"line_end":587,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(b\"foo\".repeatn(0), B(\"\"));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":71090,"byte_end":71131,"line_start":588,"line_end":588,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":71136,"byte_end":71143,"line_start":589,"line_end":589,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":71148,"byte_end":71171,"line_start":590,"line_end":590,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":71176,"byte_end":71185,"line_start":591,"line_end":591,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":71807,"byte_end":71819,"line_start":615,"line_end":615,"column_start":8,"column_end":20},"name":"contains_str","qualname":"::ext_slice::ByteSlice::contains_str","value":"fn <B> (&self, needle: B) -> bool","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns true if and only if this byte string contains the given needle.","sig":null,"attributes":[{"value":"/ Returns true if and only if this byte string contains the given needle.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":71438,"byte_end":71513,"line_start":601,"line_end":601,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":71518,"byte_end":71521,"line_start":602,"line_end":602,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":71526,"byte_end":71540,"line_start":603,"line_end":603,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":71545,"byte_end":71548,"line_start":604,"line_end":604,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":71553,"byte_end":71569,"line_start":605,"line_end":605,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":71574,"byte_end":71577,"line_start":606,"line_end":606,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":71582,"byte_end":71589,"line_start":607,"line_end":607,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":71594,"byte_end":71618,"line_start":608,"line_end":608,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":71623,"byte_end":71626,"line_start":609,"line_end":609,"column_start":5,"column_end":8}},{"value":"/ assert!(b\"foo bar\".contains_str(\"foo\"));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":71631,"byte_end":71675,"line_start":610,"line_end":610,"column_start":5,"column_end":49}},{"value":"/ assert!(b\"foo bar\".contains_str(\"bar\"));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":71680,"byte_end":71724,"line_start":611,"line_end":611,"column_start":5,"column_end":49}},{"value":"/ assert!(!b\"foo\".contains_str(\"foobar\"));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":71729,"byte_end":71773,"line_start":612,"line_end":612,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":71778,"byte_end":71785,"line_start":613,"line_end":613,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":71790,"byte_end":71799,"line_start":614,"line_end":614,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":72285,"byte_end":72300,"line_start":633,"line_end":633,"column_start":8,"column_end":23},"name":"starts_with_str","qualname":"::ext_slice::ByteSlice::starts_with_str","value":"fn <B> (&self, prefix: B) -> bool","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns true if and only if this byte string has the given prefix.","sig":null,"attributes":[{"value":"/ Returns true if and only if this byte string has the given prefix.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":71911,"byte_end":71981,"line_start":619,"line_end":619,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":71986,"byte_end":71989,"line_start":620,"line_end":620,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":71994,"byte_end":72008,"line_start":621,"line_end":621,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":72013,"byte_end":72016,"line_start":622,"line_end":622,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":72021,"byte_end":72037,"line_start":623,"line_end":623,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":72042,"byte_end":72045,"line_start":624,"line_end":624,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":72050,"byte_end":72057,"line_start":625,"line_end":625,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":72062,"byte_end":72086,"line_start":626,"line_end":626,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":72091,"byte_end":72094,"line_start":627,"line_end":627,"column_start":5,"column_end":8}},{"value":"/ assert!(b\"foo bar\".starts_with_str(\"foo\"));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":72099,"byte_end":72146,"line_start":628,"line_end":628,"column_start":5,"column_end":52}},{"value":"/ assert!(!b\"foo bar\".starts_with_str(\"bar\"));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":72151,"byte_end":72199,"line_start":629,"line_end":629,"column_start":5,"column_end":53}},{"value":"/ assert!(!b\"foo\".starts_with_str(\"foobar\"));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":72204,"byte_end":72251,"line_start":630,"line_end":630,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":72256,"byte_end":72263,"line_start":631,"line_end":631,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":72268,"byte_end":72277,"line_start":632,"line_end":632,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":72777,"byte_end":72790,"line_start":651,"line_end":651,"column_start":8,"column_end":21},"name":"ends_with_str","qualname":"::ext_slice::ByteSlice::ends_with_str","value":"fn <B> (&self, suffix: B) -> bool","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns true if and only if this byte string has the given suffix.","sig":null,"attributes":[{"value":"/ Returns true if and only if this byte string has the given suffix.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":72409,"byte_end":72479,"line_start":637,"line_end":637,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":72484,"byte_end":72487,"line_start":638,"line_end":638,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":72492,"byte_end":72506,"line_start":639,"line_end":639,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":72511,"byte_end":72514,"line_start":640,"line_end":640,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":72519,"byte_end":72535,"line_start":641,"line_end":641,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":72540,"byte_end":72543,"line_start":642,"line_end":642,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":72548,"byte_end":72555,"line_start":643,"line_end":643,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":72560,"byte_end":72584,"line_start":644,"line_end":644,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":72589,"byte_end":72592,"line_start":645,"line_end":645,"column_start":5,"column_end":8}},{"value":"/ assert!(b\"foo bar\".ends_with_str(\"bar\"));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":72597,"byte_end":72642,"line_start":646,"line_end":646,"column_start":5,"column_end":50}},{"value":"/ assert!(!b\"foo bar\".ends_with_str(\"foo\"));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":72647,"byte_end":72693,"line_start":647,"line_end":647,"column_start":5,"column_end":51}},{"value":"/ assert!(!b\"bar\".ends_with_str(\"foobar\"));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":72698,"byte_end":72743,"line_start":648,"line_end":648,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":72748,"byte_end":72755,"line_start":649,"line_end":649,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":72760,"byte_end":72769,"line_start":650,"line_end":650,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":212},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":73993,"byte_end":73997,"line_start":686,"line_end":686,"column_start":8,"column_end":12},"name":"find","qualname":"::ext_slice::ByteSlice::find","value":"fn <B> (&self, needle: B) -> Option<usize>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns the index of the first occurrence of the given needle.","sig":null,"attributes":[{"value":"/ Returns the index of the first occurrence of the given needle.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":72897,"byte_end":72963,"line_start":655,"line_end":655,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":72968,"byte_end":72971,"line_start":656,"line_end":656,"column_start":5,"column_end":8}},{"value":"/ The needle may be any type that can be cheaply converted into a","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":72976,"byte_end":73043,"line_start":657,"line_end":657,"column_start":5,"column_end":72}},{"value":"/ `&[u8]`. This includes, but is not limited to, `&str` and `&[u8]`.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":73048,"byte_end":73118,"line_start":658,"line_end":658,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":73123,"byte_end":73126,"line_start":659,"line_end":659,"column_start":5,"column_end":8}},{"value":"/ Note that if you're are searching for the same needle in many","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":73131,"byte_end":73196,"line_start":660,"line_end":660,"column_start":5,"column_end":70}},{"value":"/ different small haystacks, it may be faster to initialize a","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":73201,"byte_end":73264,"line_start":661,"line_end":661,"column_start":5,"column_end":68}},{"value":"/ [`Finder`](struct.Finder.html) once, and reuse it for each search.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":73269,"byte_end":73339,"line_start":662,"line_end":662,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":73344,"byte_end":73347,"line_start":663,"line_end":663,"column_start":5,"column_end":8}},{"value":"/ # Complexity","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":73352,"byte_end":73368,"line_start":664,"line_end":664,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":73373,"byte_end":73376,"line_start":665,"line_end":665,"column_start":5,"column_end":8}},{"value":"/ This routine is guaranteed to have worst case linear time complexity","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":73381,"byte_end":73453,"line_start":666,"line_end":666,"column_start":5,"column_end":77}},{"value":"/ with respect to both the needle and the haystack. That is, this runs","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":73458,"byte_end":73530,"line_start":667,"line_end":667,"column_start":5,"column_end":77}},{"value":"/ in `O(needle.len() + haystack.len())` time.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":73535,"byte_end":73582,"line_start":668,"line_end":668,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":73587,"byte_end":73590,"line_start":669,"line_end":669,"column_start":5,"column_end":8}},{"value":"/ This routine is also guaranteed to have worst case constant space","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":73595,"byte_end":73664,"line_start":670,"line_end":670,"column_start":5,"column_end":74}},{"value":"/ complexity.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":73669,"byte_end":73684,"line_start":671,"line_end":671,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":73689,"byte_end":73692,"line_start":672,"line_end":672,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":73697,"byte_end":73711,"line_start":673,"line_end":673,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":73716,"byte_end":73719,"line_start":674,"line_end":674,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":73724,"byte_end":73740,"line_start":675,"line_end":675,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":73745,"byte_end":73748,"line_start":676,"line_end":676,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":73753,"byte_end":73760,"line_start":677,"line_end":677,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":73765,"byte_end":73789,"line_start":678,"line_end":678,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":73794,"byte_end":73797,"line_start":679,"line_end":679,"column_start":5,"column_end":8}},{"value":"/ let s = b\"foo bar baz\";","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":73802,"byte_end":73829,"line_start":680,"line_end":680,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(Some(0), s.find(\"foo\"));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":73834,"byte_end":73873,"line_start":681,"line_end":681,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(Some(4), s.find(\"bar\"));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":73878,"byte_end":73917,"line_start":682,"line_end":682,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(None, s.find(\"quux\"));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":73922,"byte_end":73959,"line_start":683,"line_end":683,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":73964,"byte_end":73971,"line_start":684,"line_end":684,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":73976,"byte_end":73985,"line_start":685,"line_end":685,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":214},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":75285,"byte_end":75290,"line_start":723,"line_end":723,"column_start":8,"column_end":13},"name":"rfind","qualname":"::ext_slice::ByteSlice::rfind","value":"fn <B> (&self, needle: B) -> Option<usize>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns the index of the last occurrence of the given needle.","sig":null,"attributes":[{"value":"/ Returns the index of the last occurrence of the given needle.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":74121,"byte_end":74186,"line_start":690,"line_end":690,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":74191,"byte_end":74194,"line_start":691,"line_end":691,"column_start":5,"column_end":8}},{"value":"/ The needle may be any type that can be cheaply converted into a","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":74199,"byte_end":74266,"line_start":692,"line_end":692,"column_start":5,"column_end":72}},{"value":"/ `&[u8]`. This includes, but is not limited to, `&str` and `&[u8]`.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":74271,"byte_end":74341,"line_start":693,"line_end":693,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":74346,"byte_end":74349,"line_start":694,"line_end":694,"column_start":5,"column_end":8}},{"value":"/ Note that if you're are searching for the same needle in many","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":74354,"byte_end":74419,"line_start":695,"line_end":695,"column_start":5,"column_end":70}},{"value":"/ different small haystacks, it may be faster to initialize a","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":74424,"byte_end":74487,"line_start":696,"line_end":696,"column_start":5,"column_end":68}},{"value":"/ [`FinderReverse`](struct.FinderReverse.html) once, and reuse it for","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":74492,"byte_end":74563,"line_start":697,"line_end":697,"column_start":5,"column_end":76}},{"value":"/ each search.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":74568,"byte_end":74584,"line_start":698,"line_end":698,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":74589,"byte_end":74592,"line_start":699,"line_end":699,"column_start":5,"column_end":8}},{"value":"/ # Complexity","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":74597,"byte_end":74613,"line_start":700,"line_end":700,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":74618,"byte_end":74621,"line_start":701,"line_end":701,"column_start":5,"column_end":8}},{"value":"/ This routine is guaranteed to have worst case linear time complexity","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":74626,"byte_end":74698,"line_start":702,"line_end":702,"column_start":5,"column_end":77}},{"value":"/ with respect to both the needle and the haystack. That is, this runs","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":74703,"byte_end":74775,"line_start":703,"line_end":703,"column_start":5,"column_end":77}},{"value":"/ in `O(needle.len() + haystack.len())` time.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":74780,"byte_end":74827,"line_start":704,"line_end":704,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":74832,"byte_end":74835,"line_start":705,"line_end":705,"column_start":5,"column_end":8}},{"value":"/ This routine is also guaranteed to have worst case constant space","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":74840,"byte_end":74909,"line_start":706,"line_end":706,"column_start":5,"column_end":74}},{"value":"/ complexity.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":74914,"byte_end":74929,"line_start":707,"line_end":707,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":74934,"byte_end":74937,"line_start":708,"line_end":708,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":74942,"byte_end":74956,"line_start":709,"line_end":709,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":74961,"byte_end":74964,"line_start":710,"line_end":710,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":74969,"byte_end":74985,"line_start":711,"line_end":711,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":74990,"byte_end":74993,"line_start":712,"line_end":712,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":74998,"byte_end":75005,"line_start":713,"line_end":713,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":75010,"byte_end":75034,"line_start":714,"line_end":714,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":75039,"byte_end":75042,"line_start":715,"line_end":715,"column_start":5,"column_end":8}},{"value":"/ let s = b\"foo bar baz\";","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":75047,"byte_end":75074,"line_start":716,"line_end":716,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(Some(0), s.rfind(\"foo\"));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":75079,"byte_end":75119,"line_start":717,"line_end":717,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(Some(4), s.rfind(\"bar\"));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":75124,"byte_end":75164,"line_start":718,"line_end":718,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(Some(8), s.rfind(\"ba\"));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":75169,"byte_end":75208,"line_start":719,"line_end":719,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(None, s.rfind(\"quux\"));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":75213,"byte_end":75251,"line_start":720,"line_end":720,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":75256,"byte_end":75263,"line_start":721,"line_end":721,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":75268,"byte_end":75277,"line_start":722,"line_end":722,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":76663,"byte_end":76672,"line_start":765,"line_end":765,"column_start":8,"column_end":17},"name":"find_iter","qualname":"::ext_slice::ByteSlice::find_iter","value":"fn <'a, B> (&'a self, needle: &'a B) -> Find<'a>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns an iterator of the non-overlapping occurrences of the given\n needle. The iterator yields byte offset positions indicating the start\n of each match.","sig":null,"attributes":[{"value":"/ Returns an iterator of the non-overlapping occurrences of the given","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":75422,"byte_end":75493,"line_start":727,"line_end":727,"column_start":5,"column_end":76}},{"value":"/ needle. The iterator yields byte offset positions indicating the start","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":75498,"byte_end":75572,"line_start":728,"line_end":728,"column_start":5,"column_end":79}},{"value":"/ of each match.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":75577,"byte_end":75595,"line_start":729,"line_end":729,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":75600,"byte_end":75603,"line_start":730,"line_end":730,"column_start":5,"column_end":8}},{"value":"/ # Complexity","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":75608,"byte_end":75624,"line_start":731,"line_end":731,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":75629,"byte_end":75632,"line_start":732,"line_end":732,"column_start":5,"column_end":8}},{"value":"/ This routine is guaranteed to have worst case linear time complexity","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":75637,"byte_end":75709,"line_start":733,"line_end":733,"column_start":5,"column_end":77}},{"value":"/ with respect to both the needle and the haystack. That is, this runs","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":75714,"byte_end":75786,"line_start":734,"line_end":734,"column_start":5,"column_end":77}},{"value":"/ in `O(needle.len() + haystack.len())` time.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":75791,"byte_end":75838,"line_start":735,"line_end":735,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":75843,"byte_end":75846,"line_start":736,"line_end":736,"column_start":5,"column_end":8}},{"value":"/ This routine is also guaranteed to have worst case constant space","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":75851,"byte_end":75920,"line_start":737,"line_end":737,"column_start":5,"column_end":74}},{"value":"/ complexity.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":75925,"byte_end":75940,"line_start":738,"line_end":738,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":75945,"byte_end":75948,"line_start":739,"line_end":739,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":75953,"byte_end":75967,"line_start":740,"line_end":740,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":75972,"byte_end":75975,"line_start":741,"line_end":741,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":75980,"byte_end":75996,"line_start":742,"line_end":742,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":76001,"byte_end":76004,"line_start":743,"line_end":743,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":76009,"byte_end":76016,"line_start":744,"line_end":744,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":76021,"byte_end":76045,"line_start":745,"line_end":745,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":76050,"byte_end":76053,"line_start":746,"line_end":746,"column_start":5,"column_end":8}},{"value":"/ let s = b\"foo bar foo foo quux foo\";","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":76058,"byte_end":76098,"line_start":747,"line_end":747,"column_start":5,"column_end":45}},{"value":"/ let matches: Vec<usize> = s.find_iter(\"foo\").collect();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":76103,"byte_end":76162,"line_start":748,"line_end":748,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(matches, vec![0, 8, 12, 21]);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":76167,"byte_end":76211,"line_start":749,"line_end":749,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":76216,"byte_end":76223,"line_start":750,"line_end":750,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":76228,"byte_end":76231,"line_start":751,"line_end":751,"column_start":5,"column_end":8}},{"value":"/ An empty string matches at every position, including the position","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":76236,"byte_end":76305,"line_start":752,"line_end":752,"column_start":5,"column_end":74}},{"value":"/ immediately following the last byte:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":76310,"byte_end":76350,"line_start":753,"line_end":753,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":76355,"byte_end":76358,"line_start":754,"line_end":754,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":76363,"byte_end":76370,"line_start":755,"line_end":755,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":76375,"byte_end":76399,"line_start":756,"line_end":756,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":76404,"byte_end":76407,"line_start":757,"line_end":757,"column_start":5,"column_end":8}},{"value":"/ let matches: Vec<usize> = b\"foo\".find_iter(\"\").collect();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":76412,"byte_end":76473,"line_start":758,"line_end":758,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(matches, vec![0, 1, 2, 3]);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":76478,"byte_end":76520,"line_start":759,"line_end":759,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":76525,"byte_end":76528,"line_start":760,"line_end":760,"column_start":5,"column_end":8}},{"value":"/ let matches: Vec<usize> = b\"\".find_iter(\"\").collect();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":76533,"byte_end":76591,"line_start":761,"line_end":761,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(matches, vec![0]);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":76596,"byte_end":76629,"line_start":762,"line_end":762,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":76634,"byte_end":76641,"line_start":763,"line_end":763,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":76646,"byte_end":76655,"line_start":764,"line_end":764,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":219},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":78082,"byte_end":78092,"line_start":810,"line_end":810,"column_start":8,"column_end":18},"name":"rfind_iter","qualname":"::ext_slice::ByteSlice::rfind_iter","value":"fn <'a, B> (&'a self, needle: &'a B) -> FindReverse<'a>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns an iterator of the non-overlapping occurrences of the given\n needle in reverse. The iterator yields byte offset positions indicating\n the start of each match.","sig":null,"attributes":[{"value":"/ Returns an iterator of the non-overlapping occurrences of the given","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":76827,"byte_end":76898,"line_start":772,"line_end":772,"column_start":5,"column_end":76}},{"value":"/ needle in reverse. The iterator yields byte offset positions indicating","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":76903,"byte_end":76978,"line_start":773,"line_end":773,"column_start":5,"column_end":80}},{"value":"/ the start of each match.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":76983,"byte_end":77011,"line_start":774,"line_end":774,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":77016,"byte_end":77019,"line_start":775,"line_end":775,"column_start":5,"column_end":8}},{"value":"/ # Complexity","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":77024,"byte_end":77040,"line_start":776,"line_end":776,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":77045,"byte_end":77048,"line_start":777,"line_end":777,"column_start":5,"column_end":8}},{"value":"/ This routine is guaranteed to have worst case linear time complexity","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":77053,"byte_end":77125,"line_start":778,"line_end":778,"column_start":5,"column_end":77}},{"value":"/ with respect to both the needle and the haystack. That is, this runs","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":77130,"byte_end":77202,"line_start":779,"line_end":779,"column_start":5,"column_end":77}},{"value":"/ in `O(needle.len() + haystack.len())` time.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":77207,"byte_end":77254,"line_start":780,"line_end":780,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":77259,"byte_end":77262,"line_start":781,"line_end":781,"column_start":5,"column_end":8}},{"value":"/ This routine is also guaranteed to have worst case constant space","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":77267,"byte_end":77336,"line_start":782,"line_end":782,"column_start":5,"column_end":74}},{"value":"/ complexity.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":77341,"byte_end":77356,"line_start":783,"line_end":783,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":77361,"byte_end":77364,"line_start":784,"line_end":784,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":77369,"byte_end":77383,"line_start":785,"line_end":785,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":77388,"byte_end":77391,"line_start":786,"line_end":786,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":77396,"byte_end":77412,"line_start":787,"line_end":787,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":77417,"byte_end":77420,"line_start":788,"line_end":788,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":77425,"byte_end":77432,"line_start":789,"line_end":789,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":77437,"byte_end":77461,"line_start":790,"line_end":790,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":77466,"byte_end":77469,"line_start":791,"line_end":791,"column_start":5,"column_end":8}},{"value":"/ let s = b\"foo bar foo foo quux foo\";","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":77474,"byte_end":77514,"line_start":792,"line_end":792,"column_start":5,"column_end":45}},{"value":"/ let matches: Vec<usize> = s.rfind_iter(\"foo\").collect();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":77519,"byte_end":77579,"line_start":793,"line_end":793,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(matches, vec![21, 12, 8, 0]);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":77584,"byte_end":77628,"line_start":794,"line_end":794,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":77633,"byte_end":77640,"line_start":795,"line_end":795,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":77645,"byte_end":77648,"line_start":796,"line_end":796,"column_start":5,"column_end":8}},{"value":"/ An empty string matches at every position, including the position","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":77653,"byte_end":77722,"line_start":797,"line_end":797,"column_start":5,"column_end":74}},{"value":"/ immediately following the last byte:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":77727,"byte_end":77767,"line_start":798,"line_end":798,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":77772,"byte_end":77775,"line_start":799,"line_end":799,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":77780,"byte_end":77787,"line_start":800,"line_end":800,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":77792,"byte_end":77816,"line_start":801,"line_end":801,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":77821,"byte_end":77824,"line_start":802,"line_end":802,"column_start":5,"column_end":8}},{"value":"/ let matches: Vec<usize> = b\"foo\".rfind_iter(\"\").collect();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":77829,"byte_end":77891,"line_start":803,"line_end":803,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(matches, vec![3, 2, 1, 0]);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":77896,"byte_end":77938,"line_start":804,"line_end":804,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":77943,"byte_end":77946,"line_start":805,"line_end":805,"column_start":5,"column_end":8}},{"value":"/ let matches: Vec<usize> = b\"\".rfind_iter(\"\").collect();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":77951,"byte_end":78010,"line_start":806,"line_end":806,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(matches, vec![0]);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":78015,"byte_end":78048,"line_start":807,"line_end":807,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":78053,"byte_end":78060,"line_start":808,"line_end":808,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":78065,"byte_end":78074,"line_start":809,"line_end":809,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":222},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":78673,"byte_end":78682,"line_start":831,"line_end":831,"column_start":8,"column_end":17},"name":"find_byte","qualname":"::ext_slice::ByteSlice::find_byte","value":"fn (&self, byte: u8) -> Option<usize>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns the index of the first occurrence of the given byte. If the\n byte does not occur in this byte string, then `None` is returned.","sig":null,"attributes":[{"value":"/ Returns the index of the first occurrence of the given byte. If the","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":78261,"byte_end":78332,"line_start":817,"line_end":817,"column_start":5,"column_end":76}},{"value":"/ byte does not occur in this byte string, then `None` is returned.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":78337,"byte_end":78406,"line_start":818,"line_end":818,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":78411,"byte_end":78414,"line_start":819,"line_end":819,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":78419,"byte_end":78433,"line_start":820,"line_end":820,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":78438,"byte_end":78441,"line_start":821,"line_end":821,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":78446,"byte_end":78462,"line_start":822,"line_end":822,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":78467,"byte_end":78470,"line_start":823,"line_end":823,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":78475,"byte_end":78482,"line_start":824,"line_end":824,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":78487,"byte_end":78511,"line_start":825,"line_end":825,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":78516,"byte_end":78519,"line_start":826,"line_end":826,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Some(10), b\"foo bar baz\".find_byte(b'z'));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":78524,"byte_end":78581,"line_start":827,"line_end":827,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(None, b\"foo bar baz\".find_byte(b'y'));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":78586,"byte_end":78639,"line_start":828,"line_end":828,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":78644,"byte_end":78651,"line_start":829,"line_end":829,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":78656,"byte_end":78665,"line_start":830,"line_end":830,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":223},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":79181,"byte_end":79191,"line_start":849,"line_end":849,"column_start":8,"column_end":18},"name":"rfind_byte","qualname":"::ext_slice::ByteSlice::rfind_byte","value":"fn (&self, byte: u8) -> Option<usize>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns the index of the last occurrence of the given byte. If the\n byte does not occur in this byte string, then `None` is returned.","sig":null,"attributes":[{"value":"/ Returns the index of the last occurrence of the given byte. If the","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":78768,"byte_end":78838,"line_start":835,"line_end":835,"column_start":5,"column_end":75}},{"value":"/ byte does not occur in this byte string, then `None` is returned.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":78843,"byte_end":78912,"line_start":836,"line_end":836,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":78917,"byte_end":78920,"line_start":837,"line_end":837,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":78925,"byte_end":78939,"line_start":838,"line_end":838,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":78944,"byte_end":78947,"line_start":839,"line_end":839,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":78952,"byte_end":78968,"line_start":840,"line_end":840,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":78973,"byte_end":78976,"line_start":841,"line_end":841,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":78981,"byte_end":78988,"line_start":842,"line_end":842,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":78993,"byte_end":79017,"line_start":843,"line_end":843,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":79022,"byte_end":79025,"line_start":844,"line_end":844,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Some(10), b\"foo bar baz\".rfind_byte(b'z'));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":79030,"byte_end":79088,"line_start":845,"line_end":845,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(None, b\"foo bar baz\".rfind_byte(b'y'));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":79093,"byte_end":79147,"line_start":846,"line_end":846,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":79152,"byte_end":79159,"line_start":847,"line_end":847,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":79164,"byte_end":79173,"line_start":848,"line_end":848,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":224},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":79982,"byte_end":79991,"line_start":873,"line_end":873,"column_start":8,"column_end":17},"name":"find_char","qualname":"::ext_slice::ByteSlice::find_char","value":"fn (&self, ch: char) -> Option<usize>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns the index of the first occurrence of the given codepoint.\n If the codepoint does not occur in this byte string, then `None` is\n returned.","sig":null,"attributes":[{"value":"/ Returns the index of the first occurrence of the given codepoint.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":79278,"byte_end":79347,"line_start":853,"line_end":853,"column_start":5,"column_end":74}},{"value":"/ If the codepoint does not occur in this byte string, then `None` is","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":79352,"byte_end":79423,"line_start":854,"line_end":854,"column_start":5,"column_end":76}},{"value":"/ returned.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":79428,"byte_end":79441,"line_start":855,"line_end":855,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":79446,"byte_end":79449,"line_start":856,"line_end":856,"column_start":5,"column_end":8}},{"value":"/ Note that if one searches for the replacement codepoint, `\\u{FFFD}`,","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":79454,"byte_end":79526,"line_start":857,"line_end":857,"column_start":5,"column_end":77}},{"value":"/ then only explicit occurrences of that encoding will be found. Invalid","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":79531,"byte_end":79605,"line_start":858,"line_end":858,"column_start":5,"column_end":79}},{"value":"/ UTF-8 sequences will not be matched.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":79610,"byte_end":79650,"line_start":859,"line_end":859,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":79655,"byte_end":79658,"line_start":860,"line_end":860,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":79663,"byte_end":79677,"line_start":861,"line_end":861,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":79682,"byte_end":79685,"line_start":862,"line_end":862,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":79690,"byte_end":79706,"line_start":863,"line_end":863,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":79711,"byte_end":79714,"line_start":864,"line_end":864,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":79719,"byte_end":79726,"line_start":865,"line_end":865,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":79731,"byte_end":79760,"line_start":866,"line_end":866,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":79765,"byte_end":79768,"line_start":867,"line_end":867,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Some(10), b\"foo bar baz\".find_char('z'));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":79773,"byte_end":79829,"line_start":868,"line_end":868,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(Some(4), B(\"αβγγδ\").find_char('γ'));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":79834,"byte_end":79891,"line_start":869,"line_end":869,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(None, b\"foo bar baz\".find_char('y'));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":79896,"byte_end":79948,"line_start":870,"line_end":870,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":79953,"byte_end":79960,"line_start":871,"line_end":871,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":79965,"byte_end":79974,"line_start":872,"line_end":872,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":226},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":80792,"byte_end":80802,"line_start":897,"line_end":897,"column_start":8,"column_end":18},"name":"rfind_char","qualname":"::ext_slice::ByteSlice::rfind_char","value":"fn (&self, ch: char) -> Option<usize>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns the index of the last occurrence of the given codepoint.\n If the codepoint does not occur in this byte string, then `None` is\n returned.","sig":null,"attributes":[{"value":"/ Returns the index of the last occurrence of the given codepoint.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":80086,"byte_end":80154,"line_start":877,"line_end":877,"column_start":5,"column_end":73}},{"value":"/ If the codepoint does not occur in this byte string, then `None` is","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":80159,"byte_end":80230,"line_start":878,"line_end":878,"column_start":5,"column_end":76}},{"value":"/ returned.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":80235,"byte_end":80248,"line_start":879,"line_end":879,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":80253,"byte_end":80256,"line_start":880,"line_end":880,"column_start":5,"column_end":8}},{"value":"/ Note that if one searches for the replacement codepoint, `\\u{FFFD}`,","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":80261,"byte_end":80333,"line_start":881,"line_end":881,"column_start":5,"column_end":77}},{"value":"/ then only explicit occurrences of that encoding will be found. Invalid","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":80338,"byte_end":80412,"line_start":882,"line_end":882,"column_start":5,"column_end":79}},{"value":"/ UTF-8 sequences will not be matched.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":80417,"byte_end":80457,"line_start":883,"line_end":883,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":80462,"byte_end":80465,"line_start":884,"line_end":884,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":80470,"byte_end":80484,"line_start":885,"line_end":885,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":80489,"byte_end":80492,"line_start":886,"line_end":886,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":80497,"byte_end":80513,"line_start":887,"line_end":887,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":80518,"byte_end":80521,"line_start":888,"line_end":888,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":80526,"byte_end":80533,"line_start":889,"line_end":889,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":80538,"byte_end":80567,"line_start":890,"line_end":890,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":80572,"byte_end":80575,"line_start":891,"line_end":891,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Some(10), b\"foo bar baz\".rfind_char('z'));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":80580,"byte_end":80637,"line_start":892,"line_end":892,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(Some(6), B(\"αβγγδ\").rfind_char('γ'));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":80642,"byte_end":80700,"line_start":893,"line_end":893,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(None, b\"foo bar baz\".rfind_char('y'));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":80705,"byte_end":80758,"line_start":894,"line_end":894,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":80763,"byte_end":80770,"line_start":895,"line_end":895,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":80775,"byte_end":80784,"line_start":896,"line_end":896,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":228},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":82177,"byte_end":82189,"line_start":934,"line_end":934,"column_start":8,"column_end":20},"name":"find_byteset","qualname":"::ext_slice::ByteSlice::find_byteset","value":"fn <B> (&self, byteset: B) -> Option<usize>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns the index of the first occurrence of any of the bytes in the\n provided set.","sig":null,"attributes":[{"value":"/ Returns the index of the first occurrence of any of the bytes in the","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":80898,"byte_end":80970,"line_start":901,"line_end":901,"column_start":5,"column_end":77}},{"value":"/ provided set.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":80975,"byte_end":80992,"line_start":902,"line_end":902,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":80997,"byte_end":81000,"line_start":903,"line_end":903,"column_start":5,"column_end":8}},{"value":"/ The `byteset` may be any type that can be cheaply converted into a","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":81005,"byte_end":81075,"line_start":904,"line_end":904,"column_start":5,"column_end":75}},{"value":"/ `&[u8]`. This includes, but is not limited to, `&str` and `&[u8]`, but","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":81080,"byte_end":81154,"line_start":905,"line_end":905,"column_start":5,"column_end":79}},{"value":"/ note that passing a `&str` which contains multibyte characters may not","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":81159,"byte_end":81233,"line_start":906,"line_end":906,"column_start":5,"column_end":79}},{"value":"/ behave as you expect: each byte in the `&str` is treated as an","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":81238,"byte_end":81304,"line_start":907,"line_end":907,"column_start":5,"column_end":71}},{"value":"/ individual member of the byte set.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":81309,"byte_end":81347,"line_start":908,"line_end":908,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":81352,"byte_end":81355,"line_start":909,"line_end":909,"column_start":5,"column_end":8}},{"value":"/ Note that order is irrelevant for the `byteset` parameter, and","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":81360,"byte_end":81426,"line_start":910,"line_end":910,"column_start":5,"column_end":71}},{"value":"/ duplicate bytes present in its body are ignored.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":81431,"byte_end":81483,"line_start":911,"line_end":911,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":81488,"byte_end":81491,"line_start":912,"line_end":912,"column_start":5,"column_end":8}},{"value":"/ # Complexity","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":81496,"byte_end":81512,"line_start":913,"line_end":913,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":81517,"byte_end":81520,"line_start":914,"line_end":914,"column_start":5,"column_end":8}},{"value":"/ This routine is guaranteed to have worst case linear time complexity","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":81525,"byte_end":81597,"line_start":915,"line_end":915,"column_start":5,"column_end":77}},{"value":"/ with respect to both the set of bytes and the haystack. That is, this","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":81602,"byte_end":81675,"line_start":916,"line_end":916,"column_start":5,"column_end":78}},{"value":"/ runs in `O(byteset.len() + haystack.len())` time.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":81680,"byte_end":81733,"line_start":917,"line_end":917,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":81738,"byte_end":81741,"line_start":918,"line_end":918,"column_start":5,"column_end":8}},{"value":"/ This routine is also guaranteed to have worst case constant space","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":81746,"byte_end":81815,"line_start":919,"line_end":919,"column_start":5,"column_end":74}},{"value":"/ complexity.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":81820,"byte_end":81835,"line_start":920,"line_end":920,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":81840,"byte_end":81843,"line_start":921,"line_end":921,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":81848,"byte_end":81862,"line_start":922,"line_end":922,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":81867,"byte_end":81870,"line_start":923,"line_end":923,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":81875,"byte_end":81891,"line_start":924,"line_end":924,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":81896,"byte_end":81899,"line_start":925,"line_end":925,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":81904,"byte_end":81911,"line_start":926,"line_end":926,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":81916,"byte_end":81940,"line_start":927,"line_end":927,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":81945,"byte_end":81948,"line_start":928,"line_end":928,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b\"foo bar baz\".find_byteset(b\"zr\"), Some(6));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":81953,"byte_end":82013,"line_start":929,"line_end":929,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(b\"foo baz bar\".find_byteset(b\"bzr\"), Some(4));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":82018,"byte_end":82079,"line_start":930,"line_end":930,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(None, b\"foo baz bar\".find_byteset(b\"\\t\\n\"));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":82084,"byte_end":82143,"line_start":931,"line_end":931,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":82148,"byte_end":82155,"line_start":932,"line_end":932,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":82160,"byte_end":82169,"line_start":933,"line_end":933,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":230},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":83624,"byte_end":83640,"line_start":971,"line_end":971,"column_start":8,"column_end":24},"name":"find_not_byteset","qualname":"::ext_slice::ByteSlice::find_not_byteset","value":"fn <B> (&self, byteset: B) -> Option<usize>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns the index of the first occurrence of a byte that is not a member\n of the provided set.","sig":null,"attributes":[{"value":"/ Returns the index of the first occurrence of a byte that is not a member","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":82312,"byte_end":82388,"line_start":938,"line_end":938,"column_start":5,"column_end":81}},{"value":"/ of the provided set.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":82393,"byte_end":82417,"line_start":939,"line_end":939,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":82422,"byte_end":82425,"line_start":940,"line_end":940,"column_start":5,"column_end":8}},{"value":"/ The `byteset` may be any type that can be cheaply converted into a","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":82430,"byte_end":82500,"line_start":941,"line_end":941,"column_start":5,"column_end":75}},{"value":"/ `&[u8]`. This includes, but is not limited to, `&str` and `&[u8]`, but","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":82505,"byte_end":82579,"line_start":942,"line_end":942,"column_start":5,"column_end":79}},{"value":"/ note that passing a `&str` which contains multibyte characters may not","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":82584,"byte_end":82658,"line_start":943,"line_end":943,"column_start":5,"column_end":79}},{"value":"/ behave as you expect: each byte in the `&str` is treated as an","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":82663,"byte_end":82729,"line_start":944,"line_end":944,"column_start":5,"column_end":71}},{"value":"/ individual member of the byte set.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":82734,"byte_end":82772,"line_start":945,"line_end":945,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":82777,"byte_end":82780,"line_start":946,"line_end":946,"column_start":5,"column_end":8}},{"value":"/ Note that order is irrelevant for the `byteset` parameter, and","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":82785,"byte_end":82851,"line_start":947,"line_end":947,"column_start":5,"column_end":71}},{"value":"/ duplicate bytes present in its body are ignored.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":82856,"byte_end":82908,"line_start":948,"line_end":948,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":82913,"byte_end":82916,"line_start":949,"line_end":949,"column_start":5,"column_end":8}},{"value":"/ # Complexity","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":82921,"byte_end":82937,"line_start":950,"line_end":950,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":82942,"byte_end":82945,"line_start":951,"line_end":951,"column_start":5,"column_end":8}},{"value":"/ This routine is guaranteed to have worst case linear time complexity","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":82950,"byte_end":83022,"line_start":952,"line_end":952,"column_start":5,"column_end":77}},{"value":"/ with respect to both the set of bytes and the haystack. That is, this","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":83027,"byte_end":83100,"line_start":953,"line_end":953,"column_start":5,"column_end":78}},{"value":"/ runs in `O(byteset.len() + haystack.len())` time.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":83105,"byte_end":83158,"line_start":954,"line_end":954,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":83163,"byte_end":83166,"line_start":955,"line_end":955,"column_start":5,"column_end":8}},{"value":"/ This routine is also guaranteed to have worst case constant space","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":83171,"byte_end":83240,"line_start":956,"line_end":956,"column_start":5,"column_end":74}},{"value":"/ complexity.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":83245,"byte_end":83260,"line_start":957,"line_end":957,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":83265,"byte_end":83268,"line_start":958,"line_end":958,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":83273,"byte_end":83287,"line_start":959,"line_end":959,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":83292,"byte_end":83295,"line_start":960,"line_end":960,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":83300,"byte_end":83316,"line_start":961,"line_end":961,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":83321,"byte_end":83324,"line_start":962,"line_end":962,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":83329,"byte_end":83336,"line_start":963,"line_end":963,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":83341,"byte_end":83365,"line_start":964,"line_end":964,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":83370,"byte_end":83373,"line_start":965,"line_end":965,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b\"foo bar baz\".find_not_byteset(b\"fo \"), Some(4));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":83378,"byte_end":83443,"line_start":966,"line_end":966,"column_start":5,"column_end":70}},{"value":"/ assert_eq!(b\"\\t\\tbaz bar\".find_not_byteset(b\" \\t\\r\\n\"), Some(2));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":83448,"byte_end":83517,"line_start":967,"line_end":967,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(b\"foo\\nbaz\\tbar\".find_not_byteset(b\"\\t\\n\"), Some(0));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":83522,"byte_end":83590,"line_start":968,"line_end":968,"column_start":5,"column_end":73}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":83595,"byte_end":83602,"line_start":969,"line_end":969,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":83607,"byte_end":83616,"line_start":970,"line_end":970,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":232},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":85053,"byte_end":85066,"line_start":1008,"line_end":1008,"column_start":8,"column_end":21},"name":"rfind_byteset","qualname":"::ext_slice::ByteSlice::rfind_byteset","value":"fn <B> (&self, byteset: B) -> Option<usize>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns the index of the last occurrence of any of the bytes in the\n provided set.","sig":null,"attributes":[{"value":"/ Returns the index of the last occurrence of any of the bytes in the","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":83767,"byte_end":83838,"line_start":975,"line_end":975,"column_start":5,"column_end":76}},{"value":"/ provided set.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":83843,"byte_end":83860,"line_start":976,"line_end":976,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":83865,"byte_end":83868,"line_start":977,"line_end":977,"column_start":5,"column_end":8}},{"value":"/ The `byteset` may be any type that can be cheaply converted into a","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":83873,"byte_end":83943,"line_start":978,"line_end":978,"column_start":5,"column_end":75}},{"value":"/ `&[u8]`. This includes, but is not limited to, `&str` and `&[u8]`, but","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":83948,"byte_end":84022,"line_start":979,"line_end":979,"column_start":5,"column_end":79}},{"value":"/ note that passing a `&str` which contains multibyte characters may not","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":84027,"byte_end":84101,"line_start":980,"line_end":980,"column_start":5,"column_end":79}},{"value":"/ behave as you expect: each byte in the `&str` is treated as an","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":84106,"byte_end":84172,"line_start":981,"line_end":981,"column_start":5,"column_end":71}},{"value":"/ individual member of the byte set.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":84177,"byte_end":84215,"line_start":982,"line_end":982,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":84220,"byte_end":84223,"line_start":983,"line_end":983,"column_start":5,"column_end":8}},{"value":"/ Note that order is irrelevant for the `byteset` parameter, and duplicate","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":84228,"byte_end":84304,"line_start":984,"line_end":984,"column_start":5,"column_end":81}},{"value":"/ bytes present in its body are ignored.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":84309,"byte_end":84351,"line_start":985,"line_end":985,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":84356,"byte_end":84359,"line_start":986,"line_end":986,"column_start":5,"column_end":8}},{"value":"/ # Complexity","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":84364,"byte_end":84380,"line_start":987,"line_end":987,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":84385,"byte_end":84388,"line_start":988,"line_end":988,"column_start":5,"column_end":8}},{"value":"/ This routine is guaranteed to have worst case linear time complexity","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":84393,"byte_end":84465,"line_start":989,"line_end":989,"column_start":5,"column_end":77}},{"value":"/ with respect to both the set of bytes and the haystack. That is, this","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":84470,"byte_end":84543,"line_start":990,"line_end":990,"column_start":5,"column_end":78}},{"value":"/ runs in `O(byteset.len() + haystack.len())` time.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":84548,"byte_end":84601,"line_start":991,"line_end":991,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":84606,"byte_end":84609,"line_start":992,"line_end":992,"column_start":5,"column_end":8}},{"value":"/ This routine is also guaranteed to have worst case constant space","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":84614,"byte_end":84683,"line_start":993,"line_end":993,"column_start":5,"column_end":74}},{"value":"/ complexity.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":84688,"byte_end":84703,"line_start":994,"line_end":994,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":84708,"byte_end":84711,"line_start":995,"line_end":995,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":84716,"byte_end":84730,"line_start":996,"line_end":996,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":84735,"byte_end":84738,"line_start":997,"line_end":997,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":84743,"byte_end":84759,"line_start":998,"line_end":998,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":84764,"byte_end":84767,"line_start":999,"line_end":999,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":84772,"byte_end":84779,"line_start":1000,"line_end":1000,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":84784,"byte_end":84808,"line_start":1001,"line_end":1001,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":84813,"byte_end":84816,"line_start":1002,"line_end":1002,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b\"foo bar baz\".rfind_byteset(b\"agb\"), Some(9));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":84821,"byte_end":84883,"line_start":1003,"line_end":1003,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(b\"foo baz bar\".rfind_byteset(b\"rabz \"), Some(10));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":84888,"byte_end":84953,"line_start":1004,"line_end":1004,"column_start":5,"column_end":70}},{"value":"/ assert_eq!(b\"foo baz bar\".rfind_byteset(b\"\\n123\"), None);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":84958,"byte_end":85019,"line_start":1005,"line_end":1005,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":85024,"byte_end":85031,"line_start":1006,"line_end":1006,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":85036,"byte_end":85045,"line_start":1007,"line_end":1007,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":234},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":86504,"byte_end":86521,"line_start":1045,"line_end":1045,"column_start":8,"column_end":25},"name":"rfind_not_byteset","qualname":"::ext_slice::ByteSlice::rfind_not_byteset","value":"fn <B> (&self, byteset: B) -> Option<usize>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns the index of the last occurrence of a byte that is not a member\n of the provided set.","sig":null,"attributes":[{"value":"/ Returns the index of the last occurrence of a byte that is not a member","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":85190,"byte_end":85265,"line_start":1012,"line_end":1012,"column_start":5,"column_end":80}},{"value":"/ of the provided set.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":85270,"byte_end":85294,"line_start":1013,"line_end":1013,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":85299,"byte_end":85302,"line_start":1014,"line_end":1014,"column_start":5,"column_end":8}},{"value":"/ The `byteset` may be any type that can be cheaply converted into a","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":85307,"byte_end":85377,"line_start":1015,"line_end":1015,"column_start":5,"column_end":75}},{"value":"/ `&[u8]`. This includes, but is not limited to, `&str` and `&[u8]`, but","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":85382,"byte_end":85456,"line_start":1016,"line_end":1016,"column_start":5,"column_end":79}},{"value":"/ note that passing a `&str` which contains multibyte characters may not","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":85461,"byte_end":85535,"line_start":1017,"line_end":1017,"column_start":5,"column_end":79}},{"value":"/ behave as you expect: each byte in the `&str` is treated as an","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":85540,"byte_end":85606,"line_start":1018,"line_end":1018,"column_start":5,"column_end":71}},{"value":"/ individual member of the byte set.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":85611,"byte_end":85649,"line_start":1019,"line_end":1019,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":85654,"byte_end":85657,"line_start":1020,"line_end":1020,"column_start":5,"column_end":8}},{"value":"/ Note that order is irrelevant for the `byteset` parameter, and","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":85662,"byte_end":85728,"line_start":1021,"line_end":1021,"column_start":5,"column_end":71}},{"value":"/ duplicate bytes present in its body are ignored.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":85733,"byte_end":85785,"line_start":1022,"line_end":1022,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":85790,"byte_end":85793,"line_start":1023,"line_end":1023,"column_start":5,"column_end":8}},{"value":"/ # Complexity","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":85798,"byte_end":85814,"line_start":1024,"line_end":1024,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":85819,"byte_end":85822,"line_start":1025,"line_end":1025,"column_start":5,"column_end":8}},{"value":"/ This routine is guaranteed to have worst case linear time complexity","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":85827,"byte_end":85899,"line_start":1026,"line_end":1026,"column_start":5,"column_end":77}},{"value":"/ with respect to both the set of bytes and the haystack. That is, this","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":85904,"byte_end":85977,"line_start":1027,"line_end":1027,"column_start":5,"column_end":78}},{"value":"/ runs in `O(byteset.len() + haystack.len())` time.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":85982,"byte_end":86035,"line_start":1028,"line_end":1028,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":86040,"byte_end":86043,"line_start":1029,"line_end":1029,"column_start":5,"column_end":8}},{"value":"/ This routine is also guaranteed to have worst case constant space","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":86048,"byte_end":86117,"line_start":1030,"line_end":1030,"column_start":5,"column_end":74}},{"value":"/ complexity.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":86122,"byte_end":86137,"line_start":1031,"line_end":1031,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":86142,"byte_end":86145,"line_start":1032,"line_end":1032,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":86150,"byte_end":86164,"line_start":1033,"line_end":1033,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":86169,"byte_end":86172,"line_start":1034,"line_end":1034,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":86177,"byte_end":86193,"line_start":1035,"line_end":1035,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":86198,"byte_end":86201,"line_start":1036,"line_end":1036,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":86206,"byte_end":86213,"line_start":1037,"line_end":1037,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":86218,"byte_end":86242,"line_start":1038,"line_end":1038,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":86247,"byte_end":86250,"line_start":1039,"line_end":1039,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b\"foo bar baz,\\t\".rfind_not_byteset(b\",\\t\"), Some(10));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":86255,"byte_end":86325,"line_start":1040,"line_end":1040,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(b\"foo baz bar\".rfind_not_byteset(b\"rabz \"), Some(2));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":86330,"byte_end":86398,"line_start":1041,"line_end":1041,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(None, b\"foo baz bar\".rfind_not_byteset(b\"barfoz \"));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":86403,"byte_end":86470,"line_start":1042,"line_end":1042,"column_start":5,"column_end":72}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":86475,"byte_end":86482,"line_start":1043,"line_end":1043,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":86487,"byte_end":86496,"line_start":1044,"line_end":1044,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":236},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":87296,"byte_end":87302,"line_start":1072,"line_end":1072,"column_start":8,"column_end":14},"name":"fields","qualname":"::ext_slice::ByteSlice::fields","value":"fn (&self) -> Fields","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns an iterator over the fields in a byte string, separated by\n contiguous whitespace.","sig":null,"attributes":[{"value":"/ Returns an iterator over the fields in a byte string, separated by","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":86649,"byte_end":86719,"line_start":1049,"line_end":1049,"column_start":5,"column_end":75}},{"value":"/ contiguous whitespace.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":86724,"byte_end":86750,"line_start":1050,"line_end":1050,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":86755,"byte_end":86758,"line_start":1051,"line_end":1051,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":86763,"byte_end":86776,"line_start":1052,"line_end":1052,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":86781,"byte_end":86784,"line_start":1053,"line_end":1053,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":86789,"byte_end":86805,"line_start":1054,"line_end":1054,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":86810,"byte_end":86813,"line_start":1055,"line_end":1055,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":86818,"byte_end":86825,"line_start":1056,"line_end":1056,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":86830,"byte_end":86859,"line_start":1057,"line_end":1057,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":86864,"byte_end":86867,"line_start":1058,"line_end":1058,"column_start":5,"column_end":8}},{"value":"/ let s = B(\"  foo\\tbar\\t\\u{2003}\\nquux   \\n\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":86872,"byte_end":86921,"line_start":1059,"line_end":1059,"column_start":5,"column_end":54}},{"value":"/ let fields: Vec<&[u8]> = s.fields().collect();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":86926,"byte_end":86976,"line_start":1060,"line_end":1060,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(fields, vec![B(\"foo\"), B(\"bar\"), B(\"quux\")]);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":86981,"byte_end":87041,"line_start":1061,"line_end":1061,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":87046,"byte_end":87053,"line_start":1062,"line_end":1062,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":87058,"byte_end":87061,"line_start":1063,"line_end":1063,"column_start":5,"column_end":8}},{"value":"/ A byte string consisting of just whitespace yields no elements:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":87066,"byte_end":87133,"line_start":1064,"line_end":1064,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":87138,"byte_end":87141,"line_start":1065,"line_end":1065,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":87146,"byte_end":87153,"line_start":1066,"line_end":1066,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":87158,"byte_end":87187,"line_start":1067,"line_end":1067,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":87192,"byte_end":87195,"line_start":1068,"line_end":1068,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(0, B(\"  \\n\\t\\u{2003}\\n  \\t\").fields().count());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":87200,"byte_end":87262,"line_start":1069,"line_end":1069,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":87267,"byte_end":87274,"line_start":1070,"line_end":1070,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":87279,"byte_end":87288,"line_start":1071,"line_end":1071,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":237},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":88284,"byte_end":88295,"line_start":1104,"line_end":1104,"column_start":8,"column_end":19},"name":"fields_with","qualname":"::ext_slice::ByteSlice::fields_with","value":"fn <F> (&self, f: F) -> FieldsWith<F>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns an iterator over the fields in a byte string, separated by\n contiguous codepoints satisfying the given predicate.","sig":null,"attributes":[{"value":"/ Returns an iterator over the fields in a byte string, separated by","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":87370,"byte_end":87440,"line_start":1076,"line_end":1076,"column_start":5,"column_end":75}},{"value":"/ contiguous codepoints satisfying the given predicate.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":87445,"byte_end":87502,"line_start":1077,"line_end":1077,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":87507,"byte_end":87510,"line_start":1078,"line_end":1078,"column_start":5,"column_end":8}},{"value":"/ If this byte string is not valid UTF-8, then the given closure will","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":87515,"byte_end":87586,"line_start":1079,"line_end":1079,"column_start":5,"column_end":76}},{"value":"/ be called with a Unicode replacement codepoint when invalid UTF-8","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":87591,"byte_end":87660,"line_start":1080,"line_end":1080,"column_start":5,"column_end":74}},{"value":"/ bytes are seen.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":87665,"byte_end":87684,"line_start":1081,"line_end":1081,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":87689,"byte_end":87692,"line_start":1082,"line_end":1082,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":87697,"byte_end":87710,"line_start":1083,"line_end":1083,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":87715,"byte_end":87718,"line_start":1084,"line_end":1084,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":87723,"byte_end":87739,"line_start":1085,"line_end":1085,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":87744,"byte_end":87747,"line_start":1086,"line_end":1086,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":87752,"byte_end":87759,"line_start":1087,"line_end":1087,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":87764,"byte_end":87793,"line_start":1088,"line_end":1088,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":87798,"byte_end":87801,"line_start":1089,"line_end":1089,"column_start":5,"column_end":8}},{"value":"/ let s = b\"123foo999999bar1quux123456\";","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":87806,"byte_end":87848,"line_start":1090,"line_end":1090,"column_start":5,"column_end":47}},{"value":"/ let fields: Vec<&[u8]> = s.fields_with(|c| c.is_numeric()).collect();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":87853,"byte_end":87926,"line_start":1091,"line_end":1091,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(fields, vec![B(\"foo\"), B(\"bar\"), B(\"quux\")]);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":87931,"byte_end":87991,"line_start":1092,"line_end":1092,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":87996,"byte_end":88003,"line_start":1093,"line_end":1093,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":88008,"byte_end":88011,"line_start":1094,"line_end":1094,"column_start":5,"column_end":8}},{"value":"/ A byte string consisting of all codepoints satisfying the predicate","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":88016,"byte_end":88087,"line_start":1095,"line_end":1095,"column_start":5,"column_end":76}},{"value":"/ yields no elements:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":88092,"byte_end":88115,"line_start":1096,"line_end":1096,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":88120,"byte_end":88123,"line_start":1097,"line_end":1097,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":88128,"byte_end":88135,"line_start":1098,"line_end":1098,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":88140,"byte_end":88164,"line_start":1099,"line_end":1099,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":88169,"byte_end":88172,"line_start":1100,"line_end":1100,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(0, b\"1911354563\".fields_with(|c| c.is_numeric()).count());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":88177,"byte_end":88250,"line_start":1101,"line_end":1101,"column_start":5,"column_end":78}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":88255,"byte_end":88262,"line_start":1102,"line_end":1102,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":88267,"byte_end":88276,"line_start":1103,"line_end":1103,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":239},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":91522,"byte_end":91531,"line_start":1197,"line_end":1197,"column_start":8,"column_end":17},"name":"split_str","qualname":"::ext_slice::ByteSlice::split_str","value":"fn <'a, B> (&'a self, splitter: &'a B) -> Split<'a>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns an iterator over substrings of this byte string, separated\n by the given byte string. Each element yielded is guaranteed not to\n include the splitter substring.","sig":null,"attributes":[{"value":"/ Returns an iterator over substrings of this byte string, separated","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":88407,"byte_end":88477,"line_start":1108,"line_end":1108,"column_start":5,"column_end":75}},{"value":"/ by the given byte string. Each element yielded is guaranteed not to","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":88482,"byte_end":88553,"line_start":1109,"line_end":1109,"column_start":5,"column_end":76}},{"value":"/ include the splitter substring.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":88558,"byte_end":88593,"line_start":1110,"line_end":1110,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":88598,"byte_end":88601,"line_start":1111,"line_end":1111,"column_start":5,"column_end":8}},{"value":"/ The splitter may be any type that can be cheaply converted into a","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":88606,"byte_end":88675,"line_start":1112,"line_end":1112,"column_start":5,"column_end":74}},{"value":"/ `&[u8]`. This includes, but is not limited to, `&str` and `&[u8]`.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":88680,"byte_end":88750,"line_start":1113,"line_end":1113,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":88755,"byte_end":88758,"line_start":1114,"line_end":1114,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":88763,"byte_end":88777,"line_start":1115,"line_end":1115,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":88782,"byte_end":88785,"line_start":1116,"line_end":1116,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":88790,"byte_end":88806,"line_start":1117,"line_end":1117,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":88811,"byte_end":88814,"line_start":1118,"line_end":1118,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":88819,"byte_end":88826,"line_start":1119,"line_end":1119,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":88831,"byte_end":88860,"line_start":1120,"line_end":1120,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":88865,"byte_end":88868,"line_start":1121,"line_end":1121,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"Mary had a little lamb\".split_str(\" \").collect();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":88873,"byte_end":88948,"line_start":1122,"line_end":1122,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(x, vec![","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":88953,"byte_end":88976,"line_start":1123,"line_end":1123,"column_start":5,"column_end":28}},{"value":"/     B(\"Mary\"), B(\"had\"), B(\"a\"), B(\"little\"), B(\"lamb\"),","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":88981,"byte_end":89041,"line_start":1124,"line_end":1124,"column_start":5,"column_end":65}},{"value":"/ ]);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":89046,"byte_end":89053,"line_start":1125,"line_end":1125,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":89058,"byte_end":89061,"line_start":1126,"line_end":1126,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"\".split_str(\"X\").collect();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":89066,"byte_end":89119,"line_start":1127,"line_end":1127,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(x, vec![b\"\"]);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":89124,"byte_end":89153,"line_start":1128,"line_end":1128,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":89158,"byte_end":89161,"line_start":1129,"line_end":1129,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"lionXXtigerXleopard\".split_str(\"X\").collect();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":89166,"byte_end":89238,"line_start":1130,"line_end":1130,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(x, vec![B(\"lion\"), B(\"\"), B(\"tiger\"), B(\"leopard\")]);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":89243,"byte_end":89311,"line_start":1131,"line_end":1131,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":89316,"byte_end":89319,"line_start":1132,"line_end":1132,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"lion::tiger::leopard\".split_str(\"::\").collect();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":89324,"byte_end":89398,"line_start":1133,"line_end":1133,"column_start":5,"column_end":79}},{"value":"/ assert_eq!(x, vec![B(\"lion\"), B(\"tiger\"), B(\"leopard\")]);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":89403,"byte_end":89464,"line_start":1134,"line_end":1134,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":89469,"byte_end":89476,"line_start":1135,"line_end":1135,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":89481,"byte_end":89484,"line_start":1136,"line_end":1136,"column_start":5,"column_end":8}},{"value":"/ If a string contains multiple contiguous separators, you will end up","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":89489,"byte_end":89561,"line_start":1137,"line_end":1137,"column_start":5,"column_end":77}},{"value":"/ with empty strings yielded by the iterator:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":89566,"byte_end":89613,"line_start":1138,"line_end":1138,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":89618,"byte_end":89621,"line_start":1139,"line_end":1139,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":89626,"byte_end":89633,"line_start":1140,"line_end":1140,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":89638,"byte_end":89667,"line_start":1141,"line_end":1141,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":89672,"byte_end":89675,"line_start":1142,"line_end":1142,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"||||a||b|c\".split_str(\"|\").collect();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":89680,"byte_end":89743,"line_start":1143,"line_end":1143,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(x, vec![","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":89748,"byte_end":89771,"line_start":1144,"line_end":1144,"column_start":5,"column_end":28}},{"value":"/     B(\"\"), B(\"\"), B(\"\"), B(\"\"), B(\"a\"), B(\"\"), B(\"b\"), B(\"c\"),","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":89776,"byte_end":89842,"line_start":1145,"line_end":1145,"column_start":5,"column_end":71}},{"value":"/ ]);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":89847,"byte_end":89854,"line_start":1146,"line_end":1146,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":89859,"byte_end":89862,"line_start":1147,"line_end":1147,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"(///)\".split_str(\"/\").collect();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":89867,"byte_end":89925,"line_start":1148,"line_end":1148,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(x, vec![B(\"(\"), B(\"\"), B(\"\"), B(\")\")]);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":89930,"byte_end":89984,"line_start":1149,"line_end":1149,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":89989,"byte_end":89996,"line_start":1150,"line_end":1150,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":90001,"byte_end":90004,"line_start":1151,"line_end":1151,"column_start":5,"column_end":8}},{"value":"/ Separators at the start or end of a string are neighbored by empty","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":90009,"byte_end":90079,"line_start":1152,"line_end":1152,"column_start":5,"column_end":75}},{"value":"/ strings.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":90084,"byte_end":90096,"line_start":1153,"line_end":1153,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":90101,"byte_end":90104,"line_start":1154,"line_end":1154,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":90109,"byte_end":90116,"line_start":1155,"line_end":1155,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":90121,"byte_end":90150,"line_start":1156,"line_end":1156,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":90155,"byte_end":90158,"line_start":1157,"line_end":1157,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"010\".split_str(\"0\").collect();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":90163,"byte_end":90219,"line_start":1158,"line_end":1158,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(x, vec![B(\"\"), B(\"1\"), B(\"\")]);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":90224,"byte_end":90270,"line_start":1159,"line_end":1159,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":90275,"byte_end":90282,"line_start":1160,"line_end":1160,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":90287,"byte_end":90290,"line_start":1161,"line_end":1161,"column_start":5,"column_end":8}},{"value":"/ When the empty string is used as a separator, it splits every **byte**","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":90295,"byte_end":90369,"line_start":1162,"line_end":1162,"column_start":5,"column_end":79}},{"value":"/ in the byte string, along with the beginning and end of the byte","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":90374,"byte_end":90442,"line_start":1163,"line_end":1163,"column_start":5,"column_end":73}},{"value":"/ string.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":90447,"byte_end":90458,"line_start":1164,"line_end":1164,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":90463,"byte_end":90466,"line_start":1165,"line_end":1165,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":90471,"byte_end":90478,"line_start":1166,"line_end":1166,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":90483,"byte_end":90512,"line_start":1167,"line_end":1167,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":90517,"byte_end":90520,"line_start":1168,"line_end":1168,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"rust\".split_str(\"\").collect();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":90525,"byte_end":90581,"line_start":1169,"line_end":1169,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(x, vec![","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":90586,"byte_end":90609,"line_start":1170,"line_end":1170,"column_start":5,"column_end":28}},{"value":"/     B(\"\"), B(\"r\"), B(\"u\"), B(\"s\"), B(\"t\"), B(\"\"),","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":90614,"byte_end":90667,"line_start":1171,"line_end":1171,"column_start":5,"column_end":58}},{"value":"/ ]);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":90672,"byte_end":90679,"line_start":1172,"line_end":1172,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":90684,"byte_end":90687,"line_start":1173,"line_end":1173,"column_start":5,"column_end":8}},{"value":"/ // Splitting by an empty string is not UTF-8 aware. Elements yielded","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":90692,"byte_end":90764,"line_start":1174,"line_end":1174,"column_start":5,"column_end":77}},{"value":"/ // may not be valid UTF-8!","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":90769,"byte_end":90799,"line_start":1175,"line_end":1175,"column_start":5,"column_end":35}},{"value":"/ let x: Vec<&[u8]> = B(\"☃\").split_str(\"\").collect();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":90804,"byte_end":90861,"line_start":1176,"line_end":1176,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(x, vec![","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":90866,"byte_end":90889,"line_start":1177,"line_end":1177,"column_start":5,"column_end":28}},{"value":"/     B(\"\"), B(b\"\\xE2\"), B(b\"\\x98\"), B(b\"\\x83\"), B(\"\"),","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":90894,"byte_end":90951,"line_start":1178,"line_end":1178,"column_start":5,"column_end":62}},{"value":"/ ]);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":90956,"byte_end":90963,"line_start":1179,"line_end":1179,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":90968,"byte_end":90975,"line_start":1180,"line_end":1180,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":90980,"byte_end":90983,"line_start":1181,"line_end":1181,"column_start":5,"column_end":8}},{"value":"/ Contiguous separators, especially whitespace, can lead to possibly","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":90988,"byte_end":91058,"line_start":1182,"line_end":1182,"column_start":5,"column_end":75}},{"value":"/ surprising behavior. For example, this code is correct:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":91063,"byte_end":91122,"line_start":1183,"line_end":1183,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":91127,"byte_end":91130,"line_start":1184,"line_end":1184,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":91135,"byte_end":91142,"line_start":1185,"line_end":1185,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":91147,"byte_end":91176,"line_start":1186,"line_end":1186,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":91181,"byte_end":91184,"line_start":1187,"line_end":1187,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"    a  b c\".split_str(\" \").collect();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":91189,"byte_end":91252,"line_start":1188,"line_end":1188,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(x, vec![","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":91257,"byte_end":91280,"line_start":1189,"line_end":1189,"column_start":5,"column_end":28}},{"value":"/     B(\"\"), B(\"\"), B(\"\"), B(\"\"), B(\"a\"), B(\"\"), B(\"b\"), B(\"c\"),","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":91285,"byte_end":91351,"line_start":1190,"line_end":1190,"column_start":5,"column_end":71}},{"value":"/ ]);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":91356,"byte_end":91363,"line_start":1191,"line_end":1191,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":91368,"byte_end":91375,"line_start":1192,"line_end":1192,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":91380,"byte_end":91383,"line_start":1193,"line_end":1193,"column_start":5,"column_end":8}},{"value":"/ It does *not* give you `[\"a\", \"b\", \"c\"]`. For that behavior, use","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":91388,"byte_end":91456,"line_start":1194,"line_end":1194,"column_start":5,"column_end":73}},{"value":"/ [`fields`](#method.fields) instead.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":91461,"byte_end":91500,"line_start":1195,"line_end":1195,"column_start":5,"column_end":44}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":91505,"byte_end":91514,"line_start":1196,"line_end":1196,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":242},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":94751,"byte_end":94761,"line_start":1291,"line_end":1291,"column_start":8,"column_end":18},"name":"rsplit_str","qualname":"::ext_slice::ByteSlice::rsplit_str","value":"fn <'a, B> (&'a self, splitter: &'a B) -> SplitReverse<'a>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns an iterator over substrings of this byte string, separated by\n the given byte string, in reverse. Each element yielded is guaranteed\n not to include the splitter substring.","sig":null,"attributes":[{"value":"/ Returns an iterator over substrings of this byte string, separated by","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":91692,"byte_end":91765,"line_start":1204,"line_end":1204,"column_start":5,"column_end":78}},{"value":"/ the given byte string, in reverse. Each element yielded is guaranteed","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":91770,"byte_end":91843,"line_start":1205,"line_end":1205,"column_start":5,"column_end":78}},{"value":"/ not to include the splitter substring.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":91848,"byte_end":91890,"line_start":1206,"line_end":1206,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":91895,"byte_end":91898,"line_start":1207,"line_end":1207,"column_start":5,"column_end":8}},{"value":"/ The splitter may be any type that can be cheaply converted into a","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":91903,"byte_end":91972,"line_start":1208,"line_end":1208,"column_start":5,"column_end":74}},{"value":"/ `&[u8]`. This includes, but is not limited to, `&str` and `&[u8]`.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":91977,"byte_end":92047,"line_start":1209,"line_end":1209,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":92052,"byte_end":92055,"line_start":1210,"line_end":1210,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":92060,"byte_end":92074,"line_start":1211,"line_end":1211,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":92079,"byte_end":92082,"line_start":1212,"line_end":1212,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":92087,"byte_end":92103,"line_start":1213,"line_end":1213,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":92108,"byte_end":92111,"line_start":1214,"line_end":1214,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":92116,"byte_end":92123,"line_start":1215,"line_end":1215,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":92128,"byte_end":92157,"line_start":1216,"line_end":1216,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":92162,"byte_end":92165,"line_start":1217,"line_end":1217,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> =","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":92170,"byte_end":92193,"line_start":1218,"line_end":1218,"column_start":5,"column_end":28}},{"value":"/     b\"Mary had a little lamb\".rsplit_str(\" \").collect();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":92198,"byte_end":92258,"line_start":1219,"line_end":1219,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(x, vec![","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":92263,"byte_end":92286,"line_start":1220,"line_end":1220,"column_start":5,"column_end":28}},{"value":"/     B(\"lamb\"), B(\"little\"), B(\"a\"), B(\"had\"), B(\"Mary\"),","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":92291,"byte_end":92351,"line_start":1221,"line_end":1221,"column_start":5,"column_end":65}},{"value":"/ ]);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":92356,"byte_end":92363,"line_start":1222,"line_end":1222,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":92368,"byte_end":92371,"line_start":1223,"line_end":1223,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"\".rsplit_str(\"X\").collect();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":92376,"byte_end":92430,"line_start":1224,"line_end":1224,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(x, vec![b\"\"]);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":92435,"byte_end":92464,"line_start":1225,"line_end":1225,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":92469,"byte_end":92472,"line_start":1226,"line_end":1226,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"lionXXtigerXleopard\".rsplit_str(\"X\").collect();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":92477,"byte_end":92550,"line_start":1227,"line_end":1227,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(x, vec![B(\"leopard\"), B(\"tiger\"), B(\"\"), B(\"lion\")]);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":92555,"byte_end":92623,"line_start":1228,"line_end":1228,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":92628,"byte_end":92631,"line_start":1229,"line_end":1229,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"lion::tiger::leopard\".rsplit_str(\"::\").collect();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":92636,"byte_end":92711,"line_start":1230,"line_end":1230,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(x, vec![B(\"leopard\"), B(\"tiger\"), B(\"lion\")]);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":92716,"byte_end":92777,"line_start":1231,"line_end":1231,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":92782,"byte_end":92789,"line_start":1232,"line_end":1232,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":92794,"byte_end":92797,"line_start":1233,"line_end":1233,"column_start":5,"column_end":8}},{"value":"/ If a string contains multiple contiguous separators, you will end up","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":92802,"byte_end":92874,"line_start":1234,"line_end":1234,"column_start":5,"column_end":77}},{"value":"/ with empty strings yielded by the iterator:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":92879,"byte_end":92926,"line_start":1235,"line_end":1235,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":92931,"byte_end":92934,"line_start":1236,"line_end":1236,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":92939,"byte_end":92946,"line_start":1237,"line_end":1237,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":92951,"byte_end":92980,"line_start":1238,"line_end":1238,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":92985,"byte_end":92988,"line_start":1239,"line_end":1239,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"||||a||b|c\".rsplit_str(\"|\").collect();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":92993,"byte_end":93057,"line_start":1240,"line_end":1240,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(x, vec![","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":93062,"byte_end":93085,"line_start":1241,"line_end":1241,"column_start":5,"column_end":28}},{"value":"/     B(\"c\"), B(\"b\"), B(\"\"), B(\"a\"), B(\"\"), B(\"\"), B(\"\"), B(\"\"),","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":93090,"byte_end":93156,"line_start":1242,"line_end":1242,"column_start":5,"column_end":71}},{"value":"/ ]);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":93161,"byte_end":93168,"line_start":1243,"line_end":1243,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":93173,"byte_end":93176,"line_start":1244,"line_end":1244,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"(///)\".rsplit_str(\"/\").collect();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":93181,"byte_end":93240,"line_start":1245,"line_end":1245,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(x, vec![B(\")\"), B(\"\"), B(\"\"), B(\"(\")]);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":93245,"byte_end":93299,"line_start":1246,"line_end":1246,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":93304,"byte_end":93311,"line_start":1247,"line_end":1247,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":93316,"byte_end":93319,"line_start":1248,"line_end":1248,"column_start":5,"column_end":8}},{"value":"/ Separators at the start or end of a string are neighbored by empty","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":93324,"byte_end":93394,"line_start":1249,"line_end":1249,"column_start":5,"column_end":75}},{"value":"/ strings.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":93399,"byte_end":93411,"line_start":1250,"line_end":1250,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":93416,"byte_end":93419,"line_start":1251,"line_end":1251,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":93424,"byte_end":93431,"line_start":1252,"line_end":1252,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":93436,"byte_end":93465,"line_start":1253,"line_end":1253,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":93470,"byte_end":93473,"line_start":1254,"line_end":1254,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"010\".rsplit_str(\"0\").collect();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":93478,"byte_end":93535,"line_start":1255,"line_end":1255,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(x, vec![B(\"\"), B(\"1\"), B(\"\")]);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":93540,"byte_end":93586,"line_start":1256,"line_end":1256,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":93591,"byte_end":93598,"line_start":1257,"line_end":1257,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":93603,"byte_end":93606,"line_start":1258,"line_end":1258,"column_start":5,"column_end":8}},{"value":"/ When the empty string is used as a separator, it splits every **byte**","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":93611,"byte_end":93685,"line_start":1259,"line_end":1259,"column_start":5,"column_end":79}},{"value":"/ in the byte string, along with the beginning and end of the byte","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":93690,"byte_end":93758,"line_start":1260,"line_end":1260,"column_start":5,"column_end":73}},{"value":"/ string.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":93763,"byte_end":93774,"line_start":1261,"line_end":1261,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":93779,"byte_end":93782,"line_start":1262,"line_end":1262,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":93787,"byte_end":93794,"line_start":1263,"line_end":1263,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":93799,"byte_end":93828,"line_start":1264,"line_end":1264,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":93833,"byte_end":93836,"line_start":1265,"line_end":1265,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"rust\".rsplit_str(\"\").collect();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":93841,"byte_end":93898,"line_start":1266,"line_end":1266,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(x, vec![","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":93903,"byte_end":93926,"line_start":1267,"line_end":1267,"column_start":5,"column_end":28}},{"value":"/     B(\"\"), B(\"t\"), B(\"s\"), B(\"u\"), B(\"r\"), B(\"\"),","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":93931,"byte_end":93984,"line_start":1268,"line_end":1268,"column_start":5,"column_end":58}},{"value":"/ ]);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":93989,"byte_end":93996,"line_start":1269,"line_end":1269,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":94001,"byte_end":94004,"line_start":1270,"line_end":1270,"column_start":5,"column_end":8}},{"value":"/ // Splitting by an empty string is not UTF-8 aware. Elements yielded","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":94009,"byte_end":94081,"line_start":1271,"line_end":1271,"column_start":5,"column_end":77}},{"value":"/ // may not be valid UTF-8!","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":94086,"byte_end":94116,"line_start":1272,"line_end":1272,"column_start":5,"column_end":35}},{"value":"/ let x: Vec<&[u8]> = B(\"☃\").rsplit_str(\"\").collect();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":94121,"byte_end":94179,"line_start":1273,"line_end":1273,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(x, vec![B(\"\"), B(b\"\\x83\"), B(b\"\\x98\"), B(b\"\\xE2\"), B(\"\")]);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":94184,"byte_end":94258,"line_start":1274,"line_end":1274,"column_start":5,"column_end":79}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":94263,"byte_end":94270,"line_start":1275,"line_end":1275,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":94275,"byte_end":94278,"line_start":1276,"line_end":1276,"column_start":5,"column_end":8}},{"value":"/ Contiguous separators, especially whitespace, can lead to possibly","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":94283,"byte_end":94353,"line_start":1277,"line_end":1277,"column_start":5,"column_end":75}},{"value":"/ surprising behavior. For example, this code is correct:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":94358,"byte_end":94417,"line_start":1278,"line_end":1278,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":94422,"byte_end":94425,"line_start":1279,"line_end":1279,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":94430,"byte_end":94437,"line_start":1280,"line_end":1280,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":94442,"byte_end":94471,"line_start":1281,"line_end":1281,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":94476,"byte_end":94479,"line_start":1282,"line_end":1282,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"    a  b c\".rsplit_str(\" \").collect();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":94484,"byte_end":94548,"line_start":1283,"line_end":1283,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(x, vec![","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":94553,"byte_end":94576,"line_start":1284,"line_end":1284,"column_start":5,"column_end":28}},{"value":"/     B(\"c\"), B(\"b\"), B(\"\"), B(\"a\"), B(\"\"), B(\"\"), B(\"\"), B(\"\"),","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":94581,"byte_end":94647,"line_start":1285,"line_end":1285,"column_start":5,"column_end":71}},{"value":"/ ]);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":94652,"byte_end":94659,"line_start":1286,"line_end":1286,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":94664,"byte_end":94671,"line_start":1287,"line_end":1287,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":94676,"byte_end":94679,"line_start":1288,"line_end":1288,"column_start":5,"column_end":8}},{"value":"/ It does *not* give you `[\"a\", \"b\", \"c\"]`.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":94684,"byte_end":94729,"line_start":1289,"line_end":1289,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":94734,"byte_end":94743,"line_start":1290,"line_end":1290,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":245},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":96360,"byte_end":96370,"line_start":1334,"line_end":1334,"column_start":8,"column_end":18},"name":"splitn_str","qualname":"::ext_slice::ByteSlice::splitn_str","value":"fn <'a, B> (&'a self, limit: usize, splitter: &'a B) -> SplitN<'a>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns an iterator of at most `limit` substrings of this byte string,\n separated by the given byte string. If `limit` substrings are yielded,\n then the last substring will contain the remainder of this byte string.","sig":null,"attributes":[{"value":"/ Returns an iterator of at most `limit` substrings of this byte string,","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":94936,"byte_end":95010,"line_start":1298,"line_end":1298,"column_start":5,"column_end":79}},{"value":"/ separated by the given byte string. If `limit` substrings are yielded,","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":95015,"byte_end":95089,"line_start":1299,"line_end":1299,"column_start":5,"column_end":79}},{"value":"/ then the last substring will contain the remainder of this byte string.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":95094,"byte_end":95169,"line_start":1300,"line_end":1300,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":95174,"byte_end":95177,"line_start":1301,"line_end":1301,"column_start":5,"column_end":8}},{"value":"/ The needle may be any type that can be cheaply converted into a","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":95182,"byte_end":95249,"line_start":1302,"line_end":1302,"column_start":5,"column_end":72}},{"value":"/ `&[u8]`. This includes, but is not limited to, `&str` and `&[u8]`.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":95254,"byte_end":95324,"line_start":1303,"line_end":1303,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":95329,"byte_end":95332,"line_start":1304,"line_end":1304,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":95337,"byte_end":95351,"line_start":1305,"line_end":1305,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":95356,"byte_end":95359,"line_start":1306,"line_end":1306,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":95364,"byte_end":95380,"line_start":1307,"line_end":1307,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":95385,"byte_end":95388,"line_start":1308,"line_end":1308,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":95393,"byte_end":95400,"line_start":1309,"line_end":1309,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":95405,"byte_end":95434,"line_start":1310,"line_end":1310,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":95439,"byte_end":95442,"line_start":1311,"line_end":1311,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<_> = b\"Mary had a little lamb\".splitn_str(3, \" \").collect();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":95447,"byte_end":95522,"line_start":1312,"line_end":1312,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(x, vec![B(\"Mary\"), B(\"had\"), B(\"a little lamb\")]);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":95527,"byte_end":95592,"line_start":1313,"line_end":1313,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":95597,"byte_end":95600,"line_start":1314,"line_end":1314,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<_> = b\"\".splitn_str(3, \"X\").collect();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":95605,"byte_end":95658,"line_start":1315,"line_end":1315,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(x, vec![b\"\"]);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":95663,"byte_end":95692,"line_start":1316,"line_end":1316,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":95697,"byte_end":95700,"line_start":1317,"line_end":1317,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<_> = b\"lionXXtigerXleopard\".splitn_str(3, \"X\").collect();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":95705,"byte_end":95777,"line_start":1318,"line_end":1318,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(x, vec![B(\"lion\"), B(\"\"), B(\"tigerXleopard\")]);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":95782,"byte_end":95844,"line_start":1319,"line_end":1319,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":95849,"byte_end":95852,"line_start":1320,"line_end":1320,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<_> = b\"lion::tiger::leopard\".splitn_str(2, \"::\").collect();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":95857,"byte_end":95931,"line_start":1321,"line_end":1321,"column_start":5,"column_end":79}},{"value":"/ assert_eq!(x, vec![B(\"lion\"), B(\"tiger::leopard\")]);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":95936,"byte_end":95992,"line_start":1322,"line_end":1322,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":95997,"byte_end":96000,"line_start":1323,"line_end":1323,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<_> = b\"abcXdef\".splitn_str(1, \"X\").collect();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":96005,"byte_end":96065,"line_start":1324,"line_end":1324,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(x, vec![B(\"abcXdef\")]);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":96070,"byte_end":96108,"line_start":1325,"line_end":1325,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":96113,"byte_end":96116,"line_start":1326,"line_end":1326,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<_> = b\"abcdef\".splitn_str(2, \"X\").collect();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":96121,"byte_end":96180,"line_start":1327,"line_end":1327,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(x, vec![B(\"abcdef\")]);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":96185,"byte_end":96222,"line_start":1328,"line_end":1328,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":96227,"byte_end":96230,"line_start":1329,"line_end":1329,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<_> = b\"abcXdef\".splitn_str(0, \"X\").collect();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":96235,"byte_end":96295,"line_start":1330,"line_end":1330,"column_start":5,"column_end":65}},{"value":"/ assert!(x.is_empty());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":96300,"byte_end":96326,"line_start":1331,"line_end":1331,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":96331,"byte_end":96338,"line_start":1332,"line_end":1332,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":96343,"byte_end":96352,"line_start":1333,"line_end":1333,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":98025,"byte_end":98036,"line_start":1380,"line_end":1380,"column_start":8,"column_end":19},"name":"rsplitn_str","qualname":"::ext_slice::ByteSlice::rsplitn_str","value":"fn <'a, B> (&'a self, limit: usize, splitter: &'a B) -> SplitNReverse<'a>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns an iterator of at most `limit` substrings of this byte string,\n separated by the given byte string, in reverse. If `limit` substrings\n are yielded, then the last substring will contain the remainder of this\n byte string.","sig":null,"attributes":[{"value":"/ Returns an iterator of at most `limit` substrings of this byte string,","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":96562,"byte_end":96636,"line_start":1342,"line_end":1342,"column_start":5,"column_end":79}},{"value":"/ separated by the given byte string, in reverse. If `limit` substrings","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":96641,"byte_end":96714,"line_start":1343,"line_end":1343,"column_start":5,"column_end":78}},{"value":"/ are yielded, then the last substring will contain the remainder of this","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":96719,"byte_end":96794,"line_start":1344,"line_end":1344,"column_start":5,"column_end":80}},{"value":"/ byte string.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":96799,"byte_end":96815,"line_start":1345,"line_end":1345,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":96820,"byte_end":96823,"line_start":1346,"line_end":1346,"column_start":5,"column_end":8}},{"value":"/ The needle may be any type that can be cheaply converted into a","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":96828,"byte_end":96895,"line_start":1347,"line_end":1347,"column_start":5,"column_end":72}},{"value":"/ `&[u8]`. This includes, but is not limited to, `&str` and `&[u8]`.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":96900,"byte_end":96970,"line_start":1348,"line_end":1348,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":96975,"byte_end":96978,"line_start":1349,"line_end":1349,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":96983,"byte_end":96997,"line_start":1350,"line_end":1350,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":97002,"byte_end":97005,"line_start":1351,"line_end":1351,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":97010,"byte_end":97026,"line_start":1352,"line_end":1352,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":97031,"byte_end":97034,"line_start":1353,"line_end":1353,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":97039,"byte_end":97046,"line_start":1354,"line_end":1354,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":97051,"byte_end":97080,"line_start":1355,"line_end":1355,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":97085,"byte_end":97088,"line_start":1356,"line_end":1356,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<_> =","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":97093,"byte_end":97112,"line_start":1357,"line_end":1357,"column_start":5,"column_end":24}},{"value":"/     b\"Mary had a little lamb\".rsplitn_str(3, \" \").collect();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":97117,"byte_end":97181,"line_start":1358,"line_end":1358,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(x, vec![B(\"lamb\"), B(\"little\"), B(\"Mary had a\")]);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":97186,"byte_end":97251,"line_start":1359,"line_end":1359,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":97256,"byte_end":97259,"line_start":1360,"line_end":1360,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<_> = b\"\".rsplitn_str(3, \"X\").collect();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":97264,"byte_end":97318,"line_start":1361,"line_end":1361,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(x, vec![b\"\"]);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":97323,"byte_end":97352,"line_start":1362,"line_end":1362,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":97357,"byte_end":97360,"line_start":1363,"line_end":1363,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<_> = b\"lionXXtigerXleopard\".rsplitn_str(3, \"X\").collect();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":97365,"byte_end":97438,"line_start":1364,"line_end":1364,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(x, vec![B(\"leopard\"), B(\"tiger\"), B(\"lionX\")]);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":97443,"byte_end":97505,"line_start":1365,"line_end":1365,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":97510,"byte_end":97513,"line_start":1366,"line_end":1366,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<_> = b\"lion::tiger::leopard\".rsplitn_str(2, \"::\").collect();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":97518,"byte_end":97593,"line_start":1367,"line_end":1367,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(x, vec![B(\"leopard\"), B(\"lion::tiger\")]);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":97598,"byte_end":97654,"line_start":1368,"line_end":1368,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":97659,"byte_end":97662,"line_start":1369,"line_end":1369,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<_> = b\"abcXdef\".rsplitn_str(1, \"X\").collect();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":97667,"byte_end":97728,"line_start":1370,"line_end":1370,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(x, vec![B(\"abcXdef\")]);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":97733,"byte_end":97771,"line_start":1371,"line_end":1371,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":97776,"byte_end":97779,"line_start":1372,"line_end":1372,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<_> = b\"abcdef\".rsplitn_str(2, \"X\").collect();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":97784,"byte_end":97844,"line_start":1373,"line_end":1373,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(x, vec![B(\"abcdef\")]);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":97849,"byte_end":97886,"line_start":1374,"line_end":1374,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":97891,"byte_end":97894,"line_start":1375,"line_end":1375,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<_> = b\"abcXdef\".rsplitn_str(0, \"X\").collect();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":97899,"byte_end":97960,"line_start":1376,"line_end":1376,"column_start":5,"column_end":66}},{"value":"/ assert!(x.is_empty());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":97965,"byte_end":97991,"line_start":1377,"line_end":1377,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":97996,"byte_end":98003,"line_start":1378,"line_end":1378,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":98008,"byte_end":98017,"line_start":1379,"line_end":1379,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":251},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":99225,"byte_end":99232,"line_start":1424,"line_end":1424,"column_start":8,"column_end":15},"name":"replace","qualname":"::ext_slice::ByteSlice::replace","value":"fn <N, R> (&self, needle: N, replacement: R) -> Vec<u8>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Replace all matches of the given needle with the given replacement, and\n the result as a new `Vec<u8>`.","sig":null,"attributes":[{"value":"/ Replace all matches of the given needle with the given replacement, and","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":98242,"byte_end":98317,"line_start":1388,"line_end":1388,"column_start":5,"column_end":80}},{"value":"/ the result as a new `Vec<u8>`.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":98322,"byte_end":98356,"line_start":1389,"line_end":1389,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":98361,"byte_end":98364,"line_start":1390,"line_end":1390,"column_start":5,"column_end":8}},{"value":"/ This routine is useful as a convenience. If you need to reuse an","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":98369,"byte_end":98437,"line_start":1391,"line_end":1391,"column_start":5,"column_end":73}},{"value":"/ allocation, use [`replace_into`](#method.replace_into) instead.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":98442,"byte_end":98509,"line_start":1392,"line_end":1392,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":98514,"byte_end":98517,"line_start":1393,"line_end":1393,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":98522,"byte_end":98536,"line_start":1394,"line_end":1394,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":98541,"byte_end":98544,"line_start":1395,"line_end":1395,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":98549,"byte_end":98565,"line_start":1396,"line_end":1396,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":98570,"byte_end":98573,"line_start":1397,"line_end":1397,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":98578,"byte_end":98585,"line_start":1398,"line_end":1398,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":98590,"byte_end":98614,"line_start":1399,"line_end":1399,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":98619,"byte_end":98622,"line_start":1400,"line_end":1400,"column_start":5,"column_end":8}},{"value":"/ let s = b\"this is old\".replace(\"old\", \"new\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":98627,"byte_end":98676,"line_start":1401,"line_end":1401,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(s, \"this is new\".as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":98681,"byte_end":98725,"line_start":1402,"line_end":1402,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":98730,"byte_end":98737,"line_start":1403,"line_end":1403,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":98742,"byte_end":98745,"line_start":1404,"line_end":1404,"column_start":5,"column_end":8}},{"value":"/ When the pattern doesn't match:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":98750,"byte_end":98785,"line_start":1405,"line_end":1405,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":98790,"byte_end":98793,"line_start":1406,"line_end":1406,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":98798,"byte_end":98805,"line_start":1407,"line_end":1407,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":98810,"byte_end":98834,"line_start":1408,"line_end":1408,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":98839,"byte_end":98842,"line_start":1409,"line_end":1409,"column_start":5,"column_end":8}},{"value":"/ let s = b\"this is old\".replace(\"nada nada\", \"limonada\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":98847,"byte_end":98907,"line_start":1410,"line_end":1410,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(s, \"this is old\".as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":98912,"byte_end":98956,"line_start":1411,"line_end":1411,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":98961,"byte_end":98968,"line_start":1412,"line_end":1412,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":98973,"byte_end":98976,"line_start":1413,"line_end":1413,"column_start":5,"column_end":8}},{"value":"/ When the needle is an empty string:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":98981,"byte_end":99020,"line_start":1414,"line_end":1414,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":99025,"byte_end":99028,"line_start":1415,"line_end":1415,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":99033,"byte_end":99040,"line_start":1416,"line_end":1416,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":99045,"byte_end":99069,"line_start":1417,"line_end":1417,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":99074,"byte_end":99077,"line_start":1418,"line_end":1418,"column_start":5,"column_end":8}},{"value":"/ let s = b\"foo\".replace(\"\", \"Z\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":99082,"byte_end":99118,"line_start":1419,"line_end":1419,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(s, \"ZfZoZoZ\".as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":99123,"byte_end":99163,"line_start":1420,"line_end":1420,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":99168,"byte_end":99175,"line_start":1421,"line_end":1421,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":99180,"byte_end":99203,"line_start":1422,"line_end":1422,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":99208,"byte_end":99217,"line_start":1423,"line_end":1423,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":254},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":100458,"byte_end":100466,"line_start":1470,"line_end":1470,"column_start":8,"column_end":16},"name":"replacen","qualname":"::ext_slice::ByteSlice::replacen","value":"fn <N, R> (&self, needle: N, replacement: R, limit: usize) -> Vec<u8>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Replace up to `limit` matches of the given needle with the given\n replacement, and the result as a new `Vec<u8>`.","sig":null,"attributes":[{"value":"/ Replace up to `limit` matches of the given needle with the given","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":99492,"byte_end":99560,"line_start":1434,"line_end":1434,"column_start":5,"column_end":73}},{"value":"/ replacement, and the result as a new `Vec<u8>`.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":99565,"byte_end":99616,"line_start":1435,"line_end":1435,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":99621,"byte_end":99624,"line_start":1436,"line_end":1436,"column_start":5,"column_end":8}},{"value":"/ This routine is useful as a convenience. If you need to reuse an","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":99629,"byte_end":99697,"line_start":1437,"line_end":1437,"column_start":5,"column_end":73}},{"value":"/ allocation, use [`replacen_into`](#method.replacen_into) instead.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":99702,"byte_end":99771,"line_start":1438,"line_end":1438,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":99776,"byte_end":99779,"line_start":1439,"line_end":1439,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":99784,"byte_end":99798,"line_start":1440,"line_end":1440,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":99803,"byte_end":99806,"line_start":1441,"line_end":1441,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":99811,"byte_end":99827,"line_start":1442,"line_end":1442,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":99832,"byte_end":99835,"line_start":1443,"line_end":1443,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":99840,"byte_end":99847,"line_start":1444,"line_end":1444,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":99852,"byte_end":99876,"line_start":1445,"line_end":1445,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":99881,"byte_end":99884,"line_start":1446,"line_end":1446,"column_start":5,"column_end":8}},{"value":"/ let s = b\"foofoo\".replacen(\"o\", \"z\", 2);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":99889,"byte_end":99933,"line_start":1447,"line_end":1447,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(s, \"fzzfoo\".as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":99938,"byte_end":99977,"line_start":1448,"line_end":1448,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":99982,"byte_end":99989,"line_start":1449,"line_end":1449,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":99994,"byte_end":99997,"line_start":1450,"line_end":1450,"column_start":5,"column_end":8}},{"value":"/ When the pattern doesn't match:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":100002,"byte_end":100037,"line_start":1451,"line_end":1451,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":100042,"byte_end":100045,"line_start":1452,"line_end":1452,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":100050,"byte_end":100057,"line_start":1453,"line_end":1453,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":100062,"byte_end":100086,"line_start":1454,"line_end":1454,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":100091,"byte_end":100094,"line_start":1455,"line_end":1455,"column_start":5,"column_end":8}},{"value":"/ let s = b\"foofoo\".replacen(\"a\", \"z\", 2);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":100099,"byte_end":100143,"line_start":1456,"line_end":1456,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(s, \"foofoo\".as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":100148,"byte_end":100187,"line_start":1457,"line_end":1457,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":100192,"byte_end":100199,"line_start":1458,"line_end":1458,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":100204,"byte_end":100207,"line_start":1459,"line_end":1459,"column_start":5,"column_end":8}},{"value":"/ When the needle is an empty string:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":100212,"byte_end":100251,"line_start":1460,"line_end":1460,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":100256,"byte_end":100259,"line_start":1461,"line_end":1461,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":100264,"byte_end":100271,"line_start":1462,"line_end":1462,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":100276,"byte_end":100300,"line_start":1463,"line_end":1463,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":100305,"byte_end":100308,"line_start":1464,"line_end":1464,"column_start":5,"column_end":8}},{"value":"/ let s = b\"foo\".replacen(\"\", \"Z\", 2);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":100313,"byte_end":100353,"line_start":1465,"line_end":1465,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(s, \"ZfZoo\".as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":100358,"byte_end":100396,"line_start":1466,"line_end":1466,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":100401,"byte_end":100408,"line_start":1467,"line_end":1467,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":100413,"byte_end":100436,"line_start":1468,"line_end":1468,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":100441,"byte_end":100450,"line_start":1469,"line_end":1469,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":257},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":102017,"byte_end":102029,"line_start":1528,"line_end":1528,"column_start":8,"column_end":20},"name":"replace_into","qualname":"::ext_slice::ByteSlice::replace_into","value":"fn <N, R> (&self, needle: N, replacement: R, dest: &mut Vec<u8>) -> ()","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Replace all matches of the given needle with the given replacement,\n and write the result into the provided `Vec<u8>`.","sig":null,"attributes":[{"value":"/ Replace all matches of the given needle with the given replacement,","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":100756,"byte_end":100827,"line_start":1481,"line_end":1481,"column_start":5,"column_end":76}},{"value":"/ and write the result into the provided `Vec<u8>`.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":100832,"byte_end":100885,"line_start":1482,"line_end":1482,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":100890,"byte_end":100893,"line_start":1483,"line_end":1483,"column_start":5,"column_end":8}},{"value":"/ This does **not** clear `dest` before writing to it.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":100898,"byte_end":100954,"line_start":1484,"line_end":1484,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":100959,"byte_end":100962,"line_start":1485,"line_end":1485,"column_start":5,"column_end":8}},{"value":"/ This routine is useful for reusing allocation. For a more convenient","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":100967,"byte_end":101039,"line_start":1486,"line_end":1486,"column_start":5,"column_end":77}},{"value":"/ API, use [`replace`](#method.replace) instead.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":101044,"byte_end":101094,"line_start":1487,"line_end":1487,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":101099,"byte_end":101102,"line_start":1488,"line_end":1488,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":101107,"byte_end":101121,"line_start":1489,"line_end":1489,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":101126,"byte_end":101129,"line_start":1490,"line_end":1490,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":101134,"byte_end":101150,"line_start":1491,"line_end":1491,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":101155,"byte_end":101158,"line_start":1492,"line_end":1492,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":101163,"byte_end":101170,"line_start":1493,"line_end":1493,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":101175,"byte_end":101199,"line_start":1494,"line_end":1494,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":101204,"byte_end":101207,"line_start":1495,"line_end":1495,"column_start":5,"column_end":8}},{"value":"/ let s = b\"this is old\";","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":101212,"byte_end":101239,"line_start":1496,"line_end":1496,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":101244,"byte_end":101247,"line_start":1497,"line_end":1497,"column_start":5,"column_end":8}},{"value":"/ let mut dest = vec![];","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":101252,"byte_end":101278,"line_start":1498,"line_end":1498,"column_start":5,"column_end":31}},{"value":"/ s.replace_into(\"old\", \"new\", &mut dest);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":101283,"byte_end":101327,"line_start":1499,"line_end":1499,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(dest, \"this is new\".as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":101332,"byte_end":101379,"line_start":1500,"line_end":1500,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":101384,"byte_end":101391,"line_start":1501,"line_end":1501,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":101396,"byte_end":101399,"line_start":1502,"line_end":1502,"column_start":5,"column_end":8}},{"value":"/ When the pattern doesn't match:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":101404,"byte_end":101439,"line_start":1503,"line_end":1503,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":101444,"byte_end":101447,"line_start":1504,"line_end":1504,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":101452,"byte_end":101459,"line_start":1505,"line_end":1505,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":101464,"byte_end":101488,"line_start":1506,"line_end":1506,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":101493,"byte_end":101496,"line_start":1507,"line_end":1507,"column_start":5,"column_end":8}},{"value":"/ let s = b\"this is old\";","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":101501,"byte_end":101528,"line_start":1508,"line_end":1508,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":101533,"byte_end":101536,"line_start":1509,"line_end":1509,"column_start":5,"column_end":8}},{"value":"/ let mut dest = vec![];","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":101541,"byte_end":101567,"line_start":1510,"line_end":1510,"column_start":5,"column_end":31}},{"value":"/ s.replace_into(\"nada nada\", \"limonada\", &mut dest);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":101572,"byte_end":101627,"line_start":1511,"line_end":1511,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(dest, \"this is old\".as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":101632,"byte_end":101679,"line_start":1512,"line_end":1512,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":101684,"byte_end":101691,"line_start":1513,"line_end":1513,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":101696,"byte_end":101699,"line_start":1514,"line_end":1514,"column_start":5,"column_end":8}},{"value":"/ When the needle is an empty string:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":101704,"byte_end":101743,"line_start":1515,"line_end":1515,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":101748,"byte_end":101751,"line_start":1516,"line_end":1516,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":101756,"byte_end":101763,"line_start":1517,"line_end":1517,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":101768,"byte_end":101792,"line_start":1518,"line_end":1518,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":101797,"byte_end":101800,"line_start":1519,"line_end":1519,"column_start":5,"column_end":8}},{"value":"/ let s = b\"foo\";","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":101805,"byte_end":101824,"line_start":1520,"line_end":1520,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":101829,"byte_end":101832,"line_start":1521,"line_end":1521,"column_start":5,"column_end":8}},{"value":"/ let mut dest = vec![];","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":101837,"byte_end":101863,"line_start":1522,"line_end":1522,"column_start":5,"column_end":31}},{"value":"/ s.replace_into(\"\", \"Z\", &mut dest);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":101868,"byte_end":101907,"line_start":1523,"line_end":1523,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(dest, \"ZfZoZoZ\".as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":101912,"byte_end":101955,"line_start":1524,"line_end":1524,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":101960,"byte_end":101967,"line_start":1525,"line_end":1525,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":101972,"byte_end":101995,"line_start":1526,"line_end":1526,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":102000,"byte_end":102009,"line_start":1527,"line_end":1527,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":103760,"byte_end":103773,"line_start":1592,"line_end":1592,"column_start":8,"column_end":21},"name":"replacen_into","qualname":"::ext_slice::ByteSlice::replacen_into","value":"fn <N, R> (&self, needle: N, replacement: R, limit: usize, dest: &mut Vec<u8>) -> ()","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Replace up to `limit` matches of the given needle with the given\n replacement, and write the result into the provided `Vec<u8>`.","sig":null,"attributes":[{"value":"/ Replace up to `limit` matches of the given needle with the given","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":102516,"byte_end":102584,"line_start":1545,"line_end":1545,"column_start":5,"column_end":73}},{"value":"/ replacement, and write the result into the provided `Vec<u8>`.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":102589,"byte_end":102655,"line_start":1546,"line_end":1546,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":102660,"byte_end":102663,"line_start":1547,"line_end":1547,"column_start":5,"column_end":8}},{"value":"/ This does **not** clear `dest` before writing to it.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":102668,"byte_end":102724,"line_start":1548,"line_end":1548,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":102729,"byte_end":102732,"line_start":1549,"line_end":1549,"column_start":5,"column_end":8}},{"value":"/ This routine is useful for reusing allocation. For a more convenient","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":102737,"byte_end":102809,"line_start":1550,"line_end":1550,"column_start":5,"column_end":77}},{"value":"/ API, use [`replacen`](#method.replacen) instead.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":102814,"byte_end":102866,"line_start":1551,"line_end":1551,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":102871,"byte_end":102874,"line_start":1552,"line_end":1552,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":102879,"byte_end":102893,"line_start":1553,"line_end":1553,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":102898,"byte_end":102901,"line_start":1554,"line_end":1554,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":102906,"byte_end":102922,"line_start":1555,"line_end":1555,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":102927,"byte_end":102930,"line_start":1556,"line_end":1556,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":102935,"byte_end":102942,"line_start":1557,"line_end":1557,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":102947,"byte_end":102971,"line_start":1558,"line_end":1558,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":102976,"byte_end":102979,"line_start":1559,"line_end":1559,"column_start":5,"column_end":8}},{"value":"/ let s = b\"foofoo\";","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":102984,"byte_end":103006,"line_start":1560,"line_end":1560,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":103011,"byte_end":103014,"line_start":1561,"line_end":1561,"column_start":5,"column_end":8}},{"value":"/ let mut dest = vec![];","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":103019,"byte_end":103045,"line_start":1562,"line_end":1562,"column_start":5,"column_end":31}},{"value":"/ s.replacen_into(\"o\", \"z\", 2, &mut dest);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":103050,"byte_end":103094,"line_start":1563,"line_end":1563,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(dest, \"fzzfoo\".as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":103099,"byte_end":103141,"line_start":1564,"line_end":1564,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":103146,"byte_end":103153,"line_start":1565,"line_end":1565,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":103158,"byte_end":103161,"line_start":1566,"line_end":1566,"column_start":5,"column_end":8}},{"value":"/ When the pattern doesn't match:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":103166,"byte_end":103201,"line_start":1567,"line_end":1567,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":103206,"byte_end":103209,"line_start":1568,"line_end":1568,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":103214,"byte_end":103221,"line_start":1569,"line_end":1569,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":103226,"byte_end":103250,"line_start":1570,"line_end":1570,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":103255,"byte_end":103258,"line_start":1571,"line_end":1571,"column_start":5,"column_end":8}},{"value":"/ let s = b\"foofoo\";","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":103263,"byte_end":103285,"line_start":1572,"line_end":1572,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":103290,"byte_end":103293,"line_start":1573,"line_end":1573,"column_start":5,"column_end":8}},{"value":"/ let mut dest = vec![];","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":103298,"byte_end":103324,"line_start":1574,"line_end":1574,"column_start":5,"column_end":31}},{"value":"/ s.replacen_into(\"a\", \"z\", 2, &mut dest);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":103329,"byte_end":103373,"line_start":1575,"line_end":1575,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(dest, \"foofoo\".as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":103378,"byte_end":103420,"line_start":1576,"line_end":1576,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":103425,"byte_end":103432,"line_start":1577,"line_end":1577,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":103437,"byte_end":103440,"line_start":1578,"line_end":1578,"column_start":5,"column_end":8}},{"value":"/ When the needle is an empty string:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":103445,"byte_end":103484,"line_start":1579,"line_end":1579,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":103489,"byte_end":103492,"line_start":1580,"line_end":1580,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":103497,"byte_end":103504,"line_start":1581,"line_end":1581,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":103509,"byte_end":103533,"line_start":1582,"line_end":1582,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":103538,"byte_end":103541,"line_start":1583,"line_end":1583,"column_start":5,"column_end":8}},{"value":"/ let s = b\"foo\";","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":103546,"byte_end":103565,"line_start":1584,"line_end":1584,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":103570,"byte_end":103573,"line_start":1585,"line_end":1585,"column_start":5,"column_end":8}},{"value":"/ let mut dest = vec![];","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":103578,"byte_end":103604,"line_start":1586,"line_end":1586,"column_start":5,"column_end":31}},{"value":"/ s.replacen_into(\"\", \"Z\", 2, &mut dest);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":103609,"byte_end":103652,"line_start":1587,"line_end":1587,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dest, \"ZfZoo\".as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":103657,"byte_end":103698,"line_start":1588,"line_end":1588,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":103703,"byte_end":103710,"line_start":1589,"line_end":1589,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":103715,"byte_end":103738,"line_start":1590,"line_end":1590,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":103743,"byte_end":103752,"line_start":1591,"line_end":1591,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":263},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":104610,"byte_end":104615,"line_start":1624,"line_end":1624,"column_start":8,"column_end":13},"name":"bytes","qualname":"::ext_slice::ByteSlice::bytes","value":"fn (&self) -> Bytes","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns an iterator over the bytes in this byte string.","sig":null,"attributes":[{"value":"/ Returns an iterator over the bytes in this byte string.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":104294,"byte_end":104353,"line_start":1610,"line_end":1610,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":104358,"byte_end":104361,"line_start":1611,"line_end":1611,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":104366,"byte_end":104380,"line_start":1612,"line_end":1612,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":104385,"byte_end":104388,"line_start":1613,"line_end":1613,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":104393,"byte_end":104409,"line_start":1614,"line_end":1614,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":104414,"byte_end":104417,"line_start":1615,"line_end":1615,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":104422,"byte_end":104429,"line_start":1616,"line_end":1616,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":104434,"byte_end":104458,"line_start":1617,"line_end":1617,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":104463,"byte_end":104466,"line_start":1618,"line_end":1618,"column_start":5,"column_end":8}},{"value":"/ let bs = b\"foobar\";","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":104471,"byte_end":104494,"line_start":1619,"line_end":1619,"column_start":5,"column_end":28}},{"value":"/ let bytes: Vec<u8> = bs.bytes().collect();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":104499,"byte_end":104545,"line_start":1620,"line_end":1620,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(bytes, bs);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":104550,"byte_end":104576,"line_start":1621,"line_end":1621,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":104581,"byte_end":104588,"line_start":1622,"line_end":1622,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":104593,"byte_end":104602,"line_start":1623,"line_end":1623,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":264},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":105552,"byte_end":105557,"line_start":1654,"line_end":1654,"column_start":8,"column_end":13},"name":"chars","qualname":"::ext_slice::ByteSlice::chars","value":"fn (&self) -> Chars","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns an iterator over the Unicode scalar values in this byte string.\n If invalid UTF-8 is encountered, then the Unicode replacement codepoint\n is yielded instead.","sig":null,"attributes":[{"value":"/ Returns an iterator over the Unicode scalar values in this byte string.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":104690,"byte_end":104765,"line_start":1628,"line_end":1628,"column_start":5,"column_end":80}},{"value":"/ If invalid UTF-8 is encountered, then the Unicode replacement codepoint","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":104770,"byte_end":104845,"line_start":1629,"line_end":1629,"column_start":5,"column_end":80}},{"value":"/ is yielded instead.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":104850,"byte_end":104873,"line_start":1630,"line_end":1630,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":104878,"byte_end":104881,"line_start":1631,"line_end":1631,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":104886,"byte_end":104900,"line_start":1632,"line_end":1632,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":104905,"byte_end":104908,"line_start":1633,"line_end":1633,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":104913,"byte_end":104929,"line_start":1634,"line_end":1634,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":104934,"byte_end":104937,"line_start":1635,"line_end":1635,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":104942,"byte_end":104949,"line_start":1636,"line_end":1636,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":104954,"byte_end":104978,"line_start":1637,"line_end":1637,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":104983,"byte_end":104986,"line_start":1638,"line_end":1638,"column_start":5,"column_end":8}},{"value":"/ let bs = b\"\\xE2\\x98\\x83\\xFF\\xF0\\x9D\\x9E\\x83\\xE2\\x98\\x61\";","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":104991,"byte_end":105052,"line_start":1639,"line_end":1639,"column_start":5,"column_end":66}},{"value":"/ let chars: Vec<char> = bs.chars().collect();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":105057,"byte_end":105105,"line_start":1640,"line_end":1640,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(vec!['☃', '\\u{FFFD}', '𝞃', '\\u{FFFD}', 'a'], chars);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":105110,"byte_end":105182,"line_start":1641,"line_end":1641,"column_start":5,"column_end":72}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":105187,"byte_end":105194,"line_start":1642,"line_end":1642,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":105199,"byte_end":105202,"line_start":1643,"line_end":1643,"column_start":5,"column_end":8}},{"value":"/ Codepoints can also be iterated over in reverse:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":105207,"byte_end":105259,"line_start":1644,"line_end":1644,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":105264,"byte_end":105267,"line_start":1645,"line_end":1645,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":105272,"byte_end":105279,"line_start":1646,"line_end":1646,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":105284,"byte_end":105308,"line_start":1647,"line_end":1647,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":105313,"byte_end":105316,"line_start":1648,"line_end":1648,"column_start":5,"column_end":8}},{"value":"/ let bs = b\"\\xE2\\x98\\x83\\xFF\\xF0\\x9D\\x9E\\x83\\xE2\\x98\\x61\";","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":105321,"byte_end":105382,"line_start":1649,"line_end":1649,"column_start":5,"column_end":66}},{"value":"/ let chars: Vec<char> = bs.chars().rev().collect();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":105387,"byte_end":105441,"line_start":1650,"line_end":1650,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(vec!['a', '\\u{FFFD}', '𝞃', '\\u{FFFD}', '☃'], chars);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":105446,"byte_end":105518,"line_start":1651,"line_end":1651,"column_start":5,"column_end":72}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":105523,"byte_end":105530,"line_start":1652,"line_end":1652,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":105535,"byte_end":105544,"line_start":1653,"line_end":1653,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":265},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":107435,"byte_end":107447,"line_start":1709,"line_end":1709,"column_start":8,"column_end":20},"name":"char_indices","qualname":"::ext_slice::ByteSlice::char_indices","value":"fn (&self) -> CharIndices","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns an iterator over the Unicode scalar values in this byte string\n along with their starting and ending byte index positions. If invalid\n UTF-8 is encountered, then the Unicode replacement codepoint is yielded\n instead.","sig":null,"attributes":[{"value":"/ Returns an iterator over the Unicode scalar values in this byte string","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":105623,"byte_end":105697,"line_start":1658,"line_end":1658,"column_start":5,"column_end":79}},{"value":"/ along with their starting and ending byte index positions. If invalid","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":105702,"byte_end":105775,"line_start":1659,"line_end":1659,"column_start":5,"column_end":78}},{"value":"/ UTF-8 is encountered, then the Unicode replacement codepoint is yielded","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":105780,"byte_end":105855,"line_start":1660,"line_end":1660,"column_start":5,"column_end":80}},{"value":"/ instead.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":105860,"byte_end":105872,"line_start":1661,"line_end":1661,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":105877,"byte_end":105880,"line_start":1662,"line_end":1662,"column_start":5,"column_end":8}},{"value":"/ Note that this is slightly different from the `CharIndices` iterator","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":105885,"byte_end":105957,"line_start":1663,"line_end":1663,"column_start":5,"column_end":77}},{"value":"/ provided by the standard library. Aside from working on possibly","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":105962,"byte_end":106030,"line_start":1664,"line_end":1664,"column_start":5,"column_end":73}},{"value":"/ invalid UTF-8, this iterator provides both the corresponding starting","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":106035,"byte_end":106108,"line_start":1665,"line_end":1665,"column_start":5,"column_end":78}},{"value":"/ and ending byte indices of each codepoint yielded. The ending position","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":106113,"byte_end":106187,"line_start":1666,"line_end":1666,"column_start":5,"column_end":79}},{"value":"/ is necessary to slice the original byte string when invalid UTF-8 bytes","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":106192,"byte_end":106267,"line_start":1667,"line_end":1667,"column_start":5,"column_end":80}},{"value":"/ are converted into a Unicode replacement codepoint, since a single","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":106272,"byte_end":106342,"line_start":1668,"line_end":1668,"column_start":5,"column_end":75}},{"value":"/ replacement codepoint can substitute anywhere from 1 to 3 invalid bytes","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":106347,"byte_end":106422,"line_start":1669,"line_end":1669,"column_start":5,"column_end":80}},{"value":"/ (inclusive).","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":106427,"byte_end":106443,"line_start":1670,"line_end":1670,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":106448,"byte_end":106451,"line_start":1671,"line_end":1671,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":106456,"byte_end":106470,"line_start":1672,"line_end":1672,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":106475,"byte_end":106478,"line_start":1673,"line_end":1673,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":106483,"byte_end":106499,"line_start":1674,"line_end":1674,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":106504,"byte_end":106507,"line_start":1675,"line_end":1675,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":106512,"byte_end":106519,"line_start":1676,"line_end":1676,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":106524,"byte_end":106548,"line_start":1677,"line_end":1677,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":106553,"byte_end":106556,"line_start":1678,"line_end":1678,"column_start":5,"column_end":8}},{"value":"/ let bs = b\"\\xE2\\x98\\x83\\xFF\\xF0\\x9D\\x9E\\x83\\xE2\\x98\\x61\";","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":106561,"byte_end":106622,"line_start":1679,"line_end":1679,"column_start":5,"column_end":66}},{"value":"/ let chars: Vec<(usize, usize, char)> = bs.char_indices().collect();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":106627,"byte_end":106698,"line_start":1680,"line_end":1680,"column_start":5,"column_end":76}},{"value":"/ assert_eq!(chars, vec![","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":106703,"byte_end":106730,"line_start":1681,"line_end":1681,"column_start":5,"column_end":32}},{"value":"/     (0, 3, '☃'),","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":106735,"byte_end":106757,"line_start":1682,"line_end":1682,"column_start":5,"column_end":25}},{"value":"/     (3, 4, '\\u{FFFD}'),","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":106762,"byte_end":106789,"line_start":1683,"line_end":1683,"column_start":5,"column_end":32}},{"value":"/     (4, 8, '𝞃'),","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":106794,"byte_end":106817,"line_start":1684,"line_end":1684,"column_start":5,"column_end":25}},{"value":"/     (8, 10, '\\u{FFFD}'),","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":106822,"byte_end":106850,"line_start":1685,"line_end":1685,"column_start":5,"column_end":33}},{"value":"/     (10, 11, 'a'),","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":106855,"byte_end":106877,"line_start":1686,"line_end":1686,"column_start":5,"column_end":27}},{"value":"/ ]);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":106882,"byte_end":106889,"line_start":1687,"line_end":1687,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":106894,"byte_end":106901,"line_start":1688,"line_end":1688,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":106906,"byte_end":106909,"line_start":1689,"line_end":1689,"column_start":5,"column_end":8}},{"value":"/ Codepoints can also be iterated over in reverse:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":106914,"byte_end":106966,"line_start":1690,"line_end":1690,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":106971,"byte_end":106974,"line_start":1691,"line_end":1691,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":106979,"byte_end":106986,"line_start":1692,"line_end":1692,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":106991,"byte_end":107015,"line_start":1693,"line_end":1693,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":107020,"byte_end":107023,"line_start":1694,"line_end":1694,"column_start":5,"column_end":8}},{"value":"/ let bs = b\"\\xE2\\x98\\x83\\xFF\\xF0\\x9D\\x9E\\x83\\xE2\\x98\\x61\";","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":107028,"byte_end":107089,"line_start":1695,"line_end":1695,"column_start":5,"column_end":66}},{"value":"/ let chars: Vec<(usize, usize, char)> = bs","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":107094,"byte_end":107139,"line_start":1696,"line_end":1696,"column_start":5,"column_end":50}},{"value":"/     .char_indices()","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":107144,"byte_end":107167,"line_start":1697,"line_end":1697,"column_start":5,"column_end":28}},{"value":"/     .rev()","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":107172,"byte_end":107186,"line_start":1698,"line_end":1698,"column_start":5,"column_end":19}},{"value":"/     .collect();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":107191,"byte_end":107210,"line_start":1699,"line_end":1699,"column_start":5,"column_end":24}},{"value":"/ assert_eq!(chars, vec![","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":107215,"byte_end":107242,"line_start":1700,"line_end":1700,"column_start":5,"column_end":32}},{"value":"/     (10, 11, 'a'),","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":107247,"byte_end":107269,"line_start":1701,"line_end":1701,"column_start":5,"column_end":27}},{"value":"/     (8, 10, '\\u{FFFD}'),","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":107274,"byte_end":107302,"line_start":1702,"line_end":1702,"column_start":5,"column_end":33}},{"value":"/     (4, 8, '𝞃'),","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":107307,"byte_end":107330,"line_start":1703,"line_end":1703,"column_start":5,"column_end":25}},{"value":"/     (3, 4, '\\u{FFFD}'),","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":107335,"byte_end":107362,"line_start":1704,"line_end":1704,"column_start":5,"column_end":32}},{"value":"/     (0, 3, '☃'),","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":107367,"byte_end":107389,"line_start":1705,"line_end":1705,"column_start":5,"column_end":25}},{"value":"/ ]);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":107394,"byte_end":107401,"line_start":1706,"line_end":1706,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":107406,"byte_end":107413,"line_start":1707,"line_end":1707,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":107418,"byte_end":107427,"line_start":1708,"line_end":1708,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":266},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":108718,"byte_end":108729,"line_start":1746,"line_end":1746,"column_start":8,"column_end":19},"name":"utf8_chunks","qualname":"::ext_slice::ByteSlice::utf8_chunks","value":"fn (&self) -> Utf8Chunks","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Iterate over chunks of valid UTF-8.","sig":null,"attributes":[{"value":"/ Iterate over chunks of valid UTF-8.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":107525,"byte_end":107564,"line_start":1713,"line_end":1713,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":107569,"byte_end":107572,"line_start":1714,"line_end":1714,"column_start":5,"column_end":8}},{"value":"/ The iterator returned yields chunks of valid UTF-8 separated by invalid","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":107577,"byte_end":107652,"line_start":1715,"line_end":1715,"column_start":5,"column_end":80}},{"value":"/ UTF-8 bytes, if they exist. Invalid UTF-8 bytes are always 1-3 bytes,","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":107657,"byte_end":107730,"line_start":1716,"line_end":1716,"column_start":5,"column_end":78}},{"value":"/ which are determined via the \"substitution of maximal subparts\"","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":107735,"byte_end":107802,"line_start":1717,"line_end":1717,"column_start":5,"column_end":72}},{"value":"/ strategy described in the docs for the","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":107807,"byte_end":107849,"line_start":1718,"line_end":1718,"column_start":5,"column_end":47}},{"value":"/ [`ByteSlice::to_str_lossy`](trait.ByteSlice.html#method.to_str_lossy)","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":107854,"byte_end":107927,"line_start":1719,"line_end":1719,"column_start":5,"column_end":78}},{"value":"/ method.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":107932,"byte_end":107943,"line_start":1720,"line_end":1720,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":107948,"byte_end":107951,"line_start":1721,"line_end":1721,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":107956,"byte_end":107970,"line_start":1722,"line_end":1722,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":107975,"byte_end":107978,"line_start":1723,"line_end":1723,"column_start":5,"column_end":8}},{"value":"/ This example shows how the `std::fmt::Display` implementation is","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":107983,"byte_end":108051,"line_start":1724,"line_end":1724,"column_start":5,"column_end":73}},{"value":"/ written for the `BStr` type:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":108056,"byte_end":108088,"line_start":1725,"line_end":1725,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":108093,"byte_end":108096,"line_start":1726,"line_end":1726,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":108101,"byte_end":108108,"line_start":1727,"line_end":1727,"column_start":5,"column_end":12}},{"value":"/ use bstr::{ByteSlice, Utf8Chunk};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":108113,"byte_end":108150,"line_start":1728,"line_end":1728,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":108155,"byte_end":108158,"line_start":1729,"line_end":1729,"column_start":5,"column_end":8}},{"value":"/ let bytes = b\"foo\\xFD\\xFEbar\\xFF\";","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":108163,"byte_end":108201,"line_start":1730,"line_end":1730,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":108206,"byte_end":108209,"line_start":1731,"line_end":1731,"column_start":5,"column_end":8}},{"value":"/ let (mut valid_chunks, mut invalid_chunks) = (vec![], vec![]);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":108214,"byte_end":108280,"line_start":1732,"line_end":1732,"column_start":5,"column_end":71}},{"value":"/ for chunk in bytes.utf8_chunks() {","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":108285,"byte_end":108323,"line_start":1733,"line_end":1733,"column_start":5,"column_end":43}},{"value":"/     if !chunk.valid().is_empty() {","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":108328,"byte_end":108366,"line_start":1734,"line_end":1734,"column_start":5,"column_end":43}},{"value":"/         valid_chunks.push(chunk.valid());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":108371,"byte_end":108416,"line_start":1735,"line_end":1735,"column_start":5,"column_end":50}},{"value":"/     }","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":108421,"byte_end":108430,"line_start":1736,"line_end":1736,"column_start":5,"column_end":14}},{"value":"/     if !chunk.invalid().is_empty() {","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":108435,"byte_end":108475,"line_start":1737,"line_end":1737,"column_start":5,"column_end":45}},{"value":"/         invalid_chunks.push(chunk.invalid());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":108480,"byte_end":108529,"line_start":1738,"line_end":1738,"column_start":5,"column_end":54}},{"value":"/     }","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":108534,"byte_end":108543,"line_start":1739,"line_end":1739,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":108548,"byte_end":108553,"line_start":1740,"line_end":1740,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":108558,"byte_end":108561,"line_start":1741,"line_end":1741,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(valid_chunks, vec![\"foo\", \"bar\"]);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":108566,"byte_end":108615,"line_start":1742,"line_end":1742,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(invalid_chunks, vec![b\"\\xFD\", b\"\\xFE\", b\"\\xFF\"]);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":108620,"byte_end":108684,"line_start":1743,"line_end":1743,"column_start":5,"column_end":69}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":108689,"byte_end":108696,"line_start":1744,"line_end":1744,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":108701,"byte_end":108710,"line_start":1745,"line_end":1745,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":267},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":109775,"byte_end":109784,"line_start":1778,"line_end":1778,"column_start":8,"column_end":17},"name":"graphemes","qualname":"::ext_slice::ByteSlice::graphemes","value":"fn (&self) -> Graphemes","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns an iterator over the grapheme clusters in this byte string.\n If invalid UTF-8 is encountered, then the Unicode replacement codepoint\n is yielded instead.","sig":null,"attributes":[{"value":"/ Returns an iterator over the grapheme clusters in this byte string.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":108810,"byte_end":108881,"line_start":1750,"line_end":1750,"column_start":5,"column_end":76}},{"value":"/ If invalid UTF-8 is encountered, then the Unicode replacement codepoint","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":108886,"byte_end":108961,"line_start":1751,"line_end":1751,"column_start":5,"column_end":80}},{"value":"/ is yielded instead.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":108966,"byte_end":108989,"line_start":1752,"line_end":1752,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":108994,"byte_end":108997,"line_start":1753,"line_end":1753,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":109002,"byte_end":109016,"line_start":1754,"line_end":1754,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":109021,"byte_end":109024,"line_start":1755,"line_end":1755,"column_start":5,"column_end":8}},{"value":"/ This example shows how multiple codepoints can combine to form a","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":109029,"byte_end":109097,"line_start":1756,"line_end":1756,"column_start":5,"column_end":73}},{"value":"/ single grapheme cluster:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":109102,"byte_end":109130,"line_start":1757,"line_end":1757,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":109135,"byte_end":109138,"line_start":1758,"line_end":1758,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":109143,"byte_end":109150,"line_start":1759,"line_end":1759,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":109155,"byte_end":109179,"line_start":1760,"line_end":1760,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":109184,"byte_end":109187,"line_start":1761,"line_end":1761,"column_start":5,"column_end":8}},{"value":"/ let bs = \"a\\u{0300}\\u{0316}\\u{1F1FA}\\u{1F1F8}\".as_bytes();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":109192,"byte_end":109254,"line_start":1762,"line_end":1762,"column_start":5,"column_end":67}},{"value":"/ let graphemes: Vec<&str> = bs.graphemes().collect();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":109259,"byte_end":109315,"line_start":1763,"line_end":1763,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(vec![\"à̖\", \"🇺🇸\"], graphemes);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":109320,"byte_end":109373,"line_start":1764,"line_end":1764,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":109378,"byte_end":109385,"line_start":1765,"line_end":1765,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":109390,"byte_end":109393,"line_start":1766,"line_end":1766,"column_start":5,"column_end":8}},{"value":"/ This shows that graphemes can be iterated over in reverse:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":109398,"byte_end":109460,"line_start":1767,"line_end":1767,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":109465,"byte_end":109468,"line_start":1768,"line_end":1768,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":109473,"byte_end":109480,"line_start":1769,"line_end":1769,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":109485,"byte_end":109509,"line_start":1770,"line_end":1770,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":109514,"byte_end":109517,"line_start":1771,"line_end":1771,"column_start":5,"column_end":8}},{"value":"/ let bs = \"a\\u{0300}\\u{0316}\\u{1F1FA}\\u{1F1F8}\".as_bytes();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":109522,"byte_end":109584,"line_start":1772,"line_end":1772,"column_start":5,"column_end":67}},{"value":"/ let graphemes: Vec<&str> = bs.graphemes().rev().collect();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":109589,"byte_end":109651,"line_start":1773,"line_end":1773,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(vec![\"🇺🇸\", \"à̖\"], graphemes);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":109656,"byte_end":109709,"line_start":1774,"line_end":1774,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":109714,"byte_end":109721,"line_start":1775,"line_end":1775,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"unicode\")","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":109726,"byte_end":109753,"line_start":1776,"line_end":1776,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":109758,"byte_end":109767,"line_start":1777,"line_end":1777,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":268},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":111303,"byte_end":111319,"line_start":1822,"line_end":1822,"column_start":8,"column_end":24},"name":"grapheme_indices","qualname":"::ext_slice::ByteSlice::grapheme_indices","value":"fn (&self) -> GraphemeIndices","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns an iterator over the grapheme clusters in this byte string\n along with their starting and ending byte index positions. If invalid\n UTF-8 is encountered, then the Unicode replacement codepoint is yielded\n instead.","sig":null,"attributes":[{"value":"/ Returns an iterator over the grapheme clusters in this byte string","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":109858,"byte_end":109928,"line_start":1782,"line_end":1782,"column_start":5,"column_end":75}},{"value":"/ along with their starting and ending byte index positions. If invalid","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":109933,"byte_end":110006,"line_start":1783,"line_end":1783,"column_start":5,"column_end":78}},{"value":"/ UTF-8 is encountered, then the Unicode replacement codepoint is yielded","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":110011,"byte_end":110086,"line_start":1784,"line_end":1784,"column_start":5,"column_end":80}},{"value":"/ instead.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":110091,"byte_end":110103,"line_start":1785,"line_end":1785,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":110108,"byte_end":110111,"line_start":1786,"line_end":1786,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":110116,"byte_end":110130,"line_start":1787,"line_end":1787,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":110135,"byte_end":110138,"line_start":1788,"line_end":1788,"column_start":5,"column_end":8}},{"value":"/ This example shows how to get the byte offsets of each individual","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":110143,"byte_end":110212,"line_start":1789,"line_end":1789,"column_start":5,"column_end":74}},{"value":"/ grapheme cluster:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":110217,"byte_end":110238,"line_start":1790,"line_end":1790,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":110243,"byte_end":110246,"line_start":1791,"line_end":1791,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":110251,"byte_end":110258,"line_start":1792,"line_end":1792,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":110263,"byte_end":110287,"line_start":1793,"line_end":1793,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":110292,"byte_end":110295,"line_start":1794,"line_end":1794,"column_start":5,"column_end":8}},{"value":"/ let bs = \"a\\u{0300}\\u{0316}\\u{1F1FA}\\u{1F1F8}\".as_bytes();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":110300,"byte_end":110362,"line_start":1795,"line_end":1795,"column_start":5,"column_end":67}},{"value":"/ let graphemes: Vec<(usize, usize, &str)> =","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":110367,"byte_end":110413,"line_start":1796,"line_end":1796,"column_start":5,"column_end":51}},{"value":"/     bs.grapheme_indices().collect();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":110418,"byte_end":110458,"line_start":1797,"line_end":1797,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(vec![(0, 5, \"à̖\"), (5, 13, \"🇺🇸\")], graphemes);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":110463,"byte_end":110533,"line_start":1798,"line_end":1798,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":110538,"byte_end":110545,"line_start":1799,"line_end":1799,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":110550,"byte_end":110553,"line_start":1800,"line_end":1800,"column_start":5,"column_end":8}},{"value":"/ This example shows what happens when invalid UTF-8 is enountered. Note","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":110558,"byte_end":110632,"line_start":1801,"line_end":1801,"column_start":5,"column_end":79}},{"value":"/ that the offsets are valid indices into the original string, and do","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":110637,"byte_end":110708,"line_start":1802,"line_end":1802,"column_start":5,"column_end":76}},{"value":"/ not necessarily correspond to the length of the `&str` returned!","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":110713,"byte_end":110781,"line_start":1803,"line_end":1803,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":110786,"byte_end":110789,"line_start":1804,"line_end":1804,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":110794,"byte_end":110801,"line_start":1805,"line_end":1805,"column_start":5,"column_end":12}},{"value":"/ use bstr::{ByteSlice, ByteVec};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":110806,"byte_end":110841,"line_start":1806,"line_end":1806,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":110846,"byte_end":110849,"line_start":1807,"line_end":1807,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = vec![];","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":110854,"byte_end":110881,"line_start":1808,"line_end":1808,"column_start":5,"column_end":32}},{"value":"/ bytes.push_str(\"a\\u{0300}\\u{0316}\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":110886,"byte_end":110926,"line_start":1809,"line_end":1809,"column_start":5,"column_end":45}},{"value":"/ bytes.push(b'\\xFF');","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":110931,"byte_end":110955,"line_start":1810,"line_end":1810,"column_start":5,"column_end":29}},{"value":"/ bytes.push_str(\"\\u{1F1FA}\\u{1F1F8}\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":110960,"byte_end":111001,"line_start":1811,"line_end":1811,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":111006,"byte_end":111009,"line_start":1812,"line_end":1812,"column_start":5,"column_end":8}},{"value":"/ let graphemes: Vec<(usize, usize, &str)> =","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":111014,"byte_end":111060,"line_start":1813,"line_end":1813,"column_start":5,"column_end":51}},{"value":"/     bytes.grapheme_indices().collect();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":111065,"byte_end":111108,"line_start":1814,"line_end":1814,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":111113,"byte_end":111128,"line_start":1815,"line_end":1815,"column_start":5,"column_end":20}},{"value":"/     graphemes,","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":111133,"byte_end":111151,"line_start":1816,"line_end":1816,"column_start":5,"column_end":23}},{"value":"/     vec![(0, 5, \"à̖\"), (5, 6, \"\\u{FFFD}\"), (6, 14, \"🇺🇸\")]","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":111156,"byte_end":111226,"line_start":1817,"line_end":1817,"column_start":5,"column_end":67}},{"value":"/ );","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":111231,"byte_end":111237,"line_start":1818,"line_end":1818,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":111242,"byte_end":111249,"line_start":1819,"line_end":1819,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"unicode\")","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":111254,"byte_end":111281,"line_start":1820,"line_end":1820,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":111286,"byte_end":111295,"line_start":1821,"line_end":1821,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":269},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":112687,"byte_end":112692,"line_start":1858,"line_end":1858,"column_start":8,"column_end":13},"name":"words","qualname":"::ext_slice::ByteSlice::words","value":"fn (&self) -> Words","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns an iterator over the words in this byte string. If invalid\n UTF-8 is encountered, then the Unicode replacement codepoint is yielded\n instead.","sig":null,"attributes":[{"value":"/ Returns an iterator over the words in this byte string. If invalid","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":111405,"byte_end":111475,"line_start":1826,"line_end":1826,"column_start":5,"column_end":75}},{"value":"/ UTF-8 is encountered, then the Unicode replacement codepoint is yielded","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":111480,"byte_end":111555,"line_start":1827,"line_end":1827,"column_start":5,"column_end":80}},{"value":"/ instead.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":111560,"byte_end":111572,"line_start":1828,"line_end":1828,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":111577,"byte_end":111580,"line_start":1829,"line_end":1829,"column_start":5,"column_end":8}},{"value":"/ This is similar to","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":111585,"byte_end":111607,"line_start":1830,"line_end":1830,"column_start":5,"column_end":27}},{"value":"/ [`words_with_breaks`](trait.ByteSlice.html#method.words_with_breaks),","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":111612,"byte_end":111685,"line_start":1831,"line_end":1831,"column_start":5,"column_end":78}},{"value":"/ except it only returns elements that contain a \"word\" character. A word","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":111690,"byte_end":111765,"line_start":1832,"line_end":1832,"column_start":5,"column_end":80}},{"value":"/ character is defined by UTS #18 (Annex C) to be the combination of the","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":111770,"byte_end":111844,"line_start":1833,"line_end":1833,"column_start":5,"column_end":79}},{"value":"/ `Alphabetic` and `Join_Control` properties, along with the","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":111849,"byte_end":111911,"line_start":1834,"line_end":1834,"column_start":5,"column_end":67}},{"value":"/ `Decimal_Number`, `Mark` and `Connector_Punctuation` general","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":111916,"byte_end":111980,"line_start":1835,"line_end":1835,"column_start":5,"column_end":69}},{"value":"/ categories.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":111985,"byte_end":112000,"line_start":1836,"line_end":1836,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":112005,"byte_end":112008,"line_start":1837,"line_end":1837,"column_start":5,"column_end":8}},{"value":"/ Since words are made up of one or more codepoints, this iterator","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":112013,"byte_end":112081,"line_start":1838,"line_end":1838,"column_start":5,"column_end":73}},{"value":"/ yields `&str` elements. When invalid UTF-8 is encountered, replacement","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":112086,"byte_end":112160,"line_start":1839,"line_end":1839,"column_start":5,"column_end":79}},{"value":"/ codepoints are [substituted](index.html#handling-of-invalid-utf-8).","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":112165,"byte_end":112236,"line_start":1840,"line_end":1840,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":112241,"byte_end":112244,"line_start":1841,"line_end":1841,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":112249,"byte_end":112263,"line_start":1842,"line_end":1842,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":112268,"byte_end":112271,"line_start":1843,"line_end":1843,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":112276,"byte_end":112292,"line_start":1844,"line_end":1844,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":112297,"byte_end":112300,"line_start":1845,"line_end":1845,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":112305,"byte_end":112312,"line_start":1846,"line_end":1846,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":112317,"byte_end":112341,"line_start":1847,"line_end":1847,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":112346,"byte_end":112349,"line_start":1848,"line_end":1848,"column_start":5,"column_end":8}},{"value":"/ let bs = br#\"The quick (\"brown\") fox can't jump 32.3 feet, right?\"#;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":112354,"byte_end":112426,"line_start":1849,"line_end":1849,"column_start":5,"column_end":77}},{"value":"/ let words: Vec<&str> = bs.words().collect();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":112431,"byte_end":112479,"line_start":1850,"line_end":1850,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(words, vec![","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":112484,"byte_end":112511,"line_start":1851,"line_end":1851,"column_start":5,"column_end":32}},{"value":"/     \"The\", \"quick\", \"brown\", \"fox\", \"can't\",","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":112516,"byte_end":112564,"line_start":1852,"line_end":1852,"column_start":5,"column_end":53}},{"value":"/     \"jump\", \"32.3\", \"feet\", \"right\",","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":112569,"byte_end":112609,"line_start":1853,"line_end":1853,"column_start":5,"column_end":45}},{"value":"/ ]);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":112614,"byte_end":112621,"line_start":1854,"line_end":1854,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":112626,"byte_end":112633,"line_start":1855,"line_end":1855,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"unicode\")","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":112638,"byte_end":112665,"line_start":1856,"line_end":1856,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":112670,"byte_end":112679,"line_start":1857,"line_end":1857,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":270},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":114087,"byte_end":114099,"line_start":1896,"line_end":1896,"column_start":8,"column_end":20},"name":"word_indices","qualname":"::ext_slice::ByteSlice::word_indices","value":"fn (&self) -> WordIndices","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns an iterator over the words in this byte string along with\n their starting and ending byte index positions.","sig":null,"attributes":[{"value":"/ Returns an iterator over the words in this byte string along with","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":112758,"byte_end":112827,"line_start":1862,"line_end":1862,"column_start":5,"column_end":74}},{"value":"/ their starting and ending byte index positions.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":112832,"byte_end":112883,"line_start":1863,"line_end":1863,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":112888,"byte_end":112891,"line_start":1864,"line_end":1864,"column_start":5,"column_end":8}},{"value":"/ This is similar to","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":112896,"byte_end":112918,"line_start":1865,"line_end":1865,"column_start":5,"column_end":27}},{"value":"/ [`words_with_break_indices`](trait.ByteSlice.html#method.words_with_break_indices),","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":112923,"byte_end":113010,"line_start":1866,"line_end":1866,"column_start":5,"column_end":92}},{"value":"/ except it only returns elements that contain a \"word\" character. A word","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":113015,"byte_end":113090,"line_start":1867,"line_end":1867,"column_start":5,"column_end":80}},{"value":"/ character is defined by UTS #18 (Annex C) to be the combination of the","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":113095,"byte_end":113169,"line_start":1868,"line_end":1868,"column_start":5,"column_end":79}},{"value":"/ `Alphabetic` and `Join_Control` properties, along with the","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":113174,"byte_end":113236,"line_start":1869,"line_end":1869,"column_start":5,"column_end":67}},{"value":"/ `Decimal_Number`, `Mark` and `Connector_Punctuation` general","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":113241,"byte_end":113305,"line_start":1870,"line_end":1870,"column_start":5,"column_end":69}},{"value":"/ categories.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":113310,"byte_end":113325,"line_start":1871,"line_end":1871,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":113330,"byte_end":113333,"line_start":1872,"line_end":1872,"column_start":5,"column_end":8}},{"value":"/ Since words are made up of one or more codepoints, this iterator","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":113338,"byte_end":113406,"line_start":1873,"line_end":1873,"column_start":5,"column_end":73}},{"value":"/ yields `&str` elements. When invalid UTF-8 is encountered, replacement","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":113411,"byte_end":113485,"line_start":1874,"line_end":1874,"column_start":5,"column_end":79}},{"value":"/ codepoints are [substituted](index.html#handling-of-invalid-utf-8).","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":113490,"byte_end":113561,"line_start":1875,"line_end":1875,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":113566,"byte_end":113569,"line_start":1876,"line_end":1876,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":113574,"byte_end":113588,"line_start":1877,"line_end":1877,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":113593,"byte_end":113596,"line_start":1878,"line_end":1878,"column_start":5,"column_end":8}},{"value":"/ This example shows how to get the byte offsets of each individual","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":113601,"byte_end":113670,"line_start":1879,"line_end":1879,"column_start":5,"column_end":74}},{"value":"/ word:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":113675,"byte_end":113684,"line_start":1880,"line_end":1880,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":113689,"byte_end":113692,"line_start":1881,"line_end":1881,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":113697,"byte_end":113704,"line_start":1882,"line_end":1882,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":113709,"byte_end":113733,"line_start":1883,"line_end":1883,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":113738,"byte_end":113741,"line_start":1884,"line_end":1884,"column_start":5,"column_end":8}},{"value":"/ let bs = b\"can't jump 32.3 feet\";","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":113746,"byte_end":113783,"line_start":1885,"line_end":1885,"column_start":5,"column_end":42}},{"value":"/ let words: Vec<(usize, usize, &str)> = bs.word_indices().collect();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":113788,"byte_end":113859,"line_start":1886,"line_end":1886,"column_start":5,"column_end":76}},{"value":"/ assert_eq!(words, vec![","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":113864,"byte_end":113891,"line_start":1887,"line_end":1887,"column_start":5,"column_end":32}},{"value":"/     (0, 5, \"can't\"),","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":113896,"byte_end":113920,"line_start":1888,"line_end":1888,"column_start":5,"column_end":29}},{"value":"/     (6, 10, \"jump\"),","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":113925,"byte_end":113949,"line_start":1889,"line_end":1889,"column_start":5,"column_end":29}},{"value":"/     (11, 15, \"32.3\"),","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":113954,"byte_end":113979,"line_start":1890,"line_end":1890,"column_start":5,"column_end":30}},{"value":"/     (16, 20, \"feet\"),","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":113984,"byte_end":114009,"line_start":1891,"line_end":1891,"column_start":5,"column_end":30}},{"value":"/ ]);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":114014,"byte_end":114021,"line_start":1892,"line_end":1892,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":114026,"byte_end":114033,"line_start":1893,"line_end":1893,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"unicode\")","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":114038,"byte_end":114065,"line_start":1894,"line_end":1894,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":114070,"byte_end":114079,"line_start":1895,"line_end":1895,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":271},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":115252,"byte_end":115269,"line_start":1926,"line_end":1926,"column_start":8,"column_end":25},"name":"words_with_breaks","qualname":"::ext_slice::ByteSlice::words_with_breaks","value":"fn (&self) -> WordsWithBreaks","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns an iterator over the words in this byte string, along with\n all breaks between the words. Concatenating all elements yielded by\n the iterator results in the original string (modulo Unicode replacement\n codepoint substitutions if invalid UTF-8 is encountered).","sig":null,"attributes":[{"value":"/ Returns an iterator over the words in this byte string, along with","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":114177,"byte_end":114247,"line_start":1900,"line_end":1900,"column_start":5,"column_end":75}},{"value":"/ all breaks between the words. Concatenating all elements yielded by","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":114252,"byte_end":114323,"line_start":1901,"line_end":1901,"column_start":5,"column_end":76}},{"value":"/ the iterator results in the original string (modulo Unicode replacement","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":114328,"byte_end":114403,"line_start":1902,"line_end":1902,"column_start":5,"column_end":80}},{"value":"/ codepoint substitutions if invalid UTF-8 is encountered).","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":114408,"byte_end":114469,"line_start":1903,"line_end":1903,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":114474,"byte_end":114477,"line_start":1904,"line_end":1904,"column_start":5,"column_end":8}},{"value":"/ Since words are made up of one or more codepoints, this iterator","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":114482,"byte_end":114550,"line_start":1905,"line_end":1905,"column_start":5,"column_end":73}},{"value":"/ yields `&str` elements. When invalid UTF-8 is encountered, replacement","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":114555,"byte_end":114629,"line_start":1906,"line_end":1906,"column_start":5,"column_end":79}},{"value":"/ codepoints are [substituted](index.html#handling-of-invalid-utf-8).","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":114634,"byte_end":114705,"line_start":1907,"line_end":1907,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":114710,"byte_end":114713,"line_start":1908,"line_end":1908,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":114718,"byte_end":114732,"line_start":1909,"line_end":1909,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":114737,"byte_end":114740,"line_start":1910,"line_end":1910,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":114745,"byte_end":114761,"line_start":1911,"line_end":1911,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":114766,"byte_end":114769,"line_start":1912,"line_end":1912,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":114774,"byte_end":114781,"line_start":1913,"line_end":1913,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":114786,"byte_end":114810,"line_start":1914,"line_end":1914,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":114815,"byte_end":114818,"line_start":1915,"line_end":1915,"column_start":5,"column_end":8}},{"value":"/ let bs = br#\"The quick (\"brown\") fox can't jump 32.3 feet, right?\"#;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":114823,"byte_end":114895,"line_start":1916,"line_end":1916,"column_start":5,"column_end":77}},{"value":"/ let words: Vec<&str> = bs.words_with_breaks().collect();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":114900,"byte_end":114960,"line_start":1917,"line_end":1917,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(words, vec![","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":114965,"byte_end":114992,"line_start":1918,"line_end":1918,"column_start":5,"column_end":32}},{"value":"/     \"The\", \" \", \"quick\", \" \", \"(\", \"\\\"\", \"brown\", \"\\\"\", \")\",","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":114997,"byte_end":115061,"line_start":1919,"line_end":1919,"column_start":5,"column_end":69}},{"value":"/     \" \", \"fox\", \" \", \"can't\", \" \", \"jump\", \" \", \"32.3\", \" \", \"feet\",","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":115066,"byte_end":115138,"line_start":1920,"line_end":1920,"column_start":5,"column_end":77}},{"value":"/     \",\", \" \", \"right\", \"?\",","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":115143,"byte_end":115174,"line_start":1921,"line_end":1921,"column_start":5,"column_end":36}},{"value":"/ ]);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":115179,"byte_end":115186,"line_start":1922,"line_end":1922,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":115191,"byte_end":115198,"line_start":1923,"line_end":1923,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"unicode\")","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":115203,"byte_end":115230,"line_start":1924,"line_end":1924,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":115235,"byte_end":115244,"line_start":1925,"line_end":1925,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":272},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":116543,"byte_end":116567,"line_start":1963,"line_end":1963,"column_start":8,"column_end":32},"name":"words_with_break_indices","qualname":"::ext_slice::ByteSlice::words_with_break_indices","value":"fn (&self) -> WordsWithBreakIndices","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns an iterator over the words and their byte offsets in this\n byte string, along with all breaks between the words. Concatenating\n all elements yielded by the iterator results in the original string\n (modulo Unicode replacement codepoint substitutions if invalid UTF-8 is\n encountered).","sig":null,"attributes":[{"value":"/ Returns an iterator over the words and their byte offsets in this","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":115355,"byte_end":115424,"line_start":1930,"line_end":1930,"column_start":5,"column_end":74}},{"value":"/ byte string, along with all breaks between the words. Concatenating","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":115429,"byte_end":115500,"line_start":1931,"line_end":1931,"column_start":5,"column_end":76}},{"value":"/ all elements yielded by the iterator results in the original string","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":115505,"byte_end":115576,"line_start":1932,"line_end":1932,"column_start":5,"column_end":76}},{"value":"/ (modulo Unicode replacement codepoint substitutions if invalid UTF-8 is","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":115581,"byte_end":115656,"line_start":1933,"line_end":1933,"column_start":5,"column_end":80}},{"value":"/ encountered).","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":115661,"byte_end":115678,"line_start":1934,"line_end":1934,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":115683,"byte_end":115686,"line_start":1935,"line_end":1935,"column_start":5,"column_end":8}},{"value":"/ Since words are made up of one or more codepoints, this iterator","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":115691,"byte_end":115759,"line_start":1936,"line_end":1936,"column_start":5,"column_end":73}},{"value":"/ yields `&str` elements. When invalid UTF-8 is encountered, replacement","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":115764,"byte_end":115838,"line_start":1937,"line_end":1937,"column_start":5,"column_end":79}},{"value":"/ codepoints are [substituted](index.html#handling-of-invalid-utf-8).","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":115843,"byte_end":115914,"line_start":1938,"line_end":1938,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":115919,"byte_end":115922,"line_start":1939,"line_end":1939,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":115927,"byte_end":115941,"line_start":1940,"line_end":1940,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":115946,"byte_end":115949,"line_start":1941,"line_end":1941,"column_start":5,"column_end":8}},{"value":"/ This example shows how to get the byte offsets of each individual","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":115954,"byte_end":116023,"line_start":1942,"line_end":1942,"column_start":5,"column_end":74}},{"value":"/ word:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":116028,"byte_end":116037,"line_start":1943,"line_end":1943,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":116042,"byte_end":116045,"line_start":1944,"line_end":1944,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":116050,"byte_end":116057,"line_start":1945,"line_end":1945,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":116062,"byte_end":116086,"line_start":1946,"line_end":1946,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":116091,"byte_end":116094,"line_start":1947,"line_end":1947,"column_start":5,"column_end":8}},{"value":"/ let bs = b\"can't jump 32.3 feet\";","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":116099,"byte_end":116136,"line_start":1948,"line_end":1948,"column_start":5,"column_end":42}},{"value":"/ let words: Vec<(usize, usize, &str)> =","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":116141,"byte_end":116183,"line_start":1949,"line_end":1949,"column_start":5,"column_end":47}},{"value":"/     bs.words_with_break_indices().collect();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":116188,"byte_end":116236,"line_start":1950,"line_end":1950,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(words, vec![","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":116241,"byte_end":116268,"line_start":1951,"line_end":1951,"column_start":5,"column_end":32}},{"value":"/     (0, 5, \"can't\"),","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":116273,"byte_end":116297,"line_start":1952,"line_end":1952,"column_start":5,"column_end":29}},{"value":"/     (5, 6, \" \"),","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":116302,"byte_end":116322,"line_start":1953,"line_end":1953,"column_start":5,"column_end":25}},{"value":"/     (6, 10, \"jump\"),","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":116327,"byte_end":116351,"line_start":1954,"line_end":1954,"column_start":5,"column_end":29}},{"value":"/     (10, 11, \" \"),","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":116356,"byte_end":116378,"line_start":1955,"line_end":1955,"column_start":5,"column_end":27}},{"value":"/     (11, 15, \"32.3\"),","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":116383,"byte_end":116408,"line_start":1956,"line_end":1956,"column_start":5,"column_end":30}},{"value":"/     (15, 16, \" \"),","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":116413,"byte_end":116435,"line_start":1957,"line_end":1957,"column_start":5,"column_end":27}},{"value":"/     (16, 20, \"feet\"),","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":116440,"byte_end":116465,"line_start":1958,"line_end":1958,"column_start":5,"column_end":30}},{"value":"/ ]);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":116470,"byte_end":116477,"line_start":1959,"line_end":1959,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":116482,"byte_end":116489,"line_start":1960,"line_end":1960,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"unicode\")","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":116494,"byte_end":116521,"line_start":1961,"line_end":1961,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":116526,"byte_end":116535,"line_start":1962,"line_end":1962,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":273},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":117676,"byte_end":117685,"line_start":1995,"line_end":1995,"column_start":8,"column_end":17},"name":"sentences","qualname":"::ext_slice::ByteSlice::sentences","value":"fn (&self) -> Sentences","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns an iterator over the sentences in this byte string.","sig":null,"attributes":[{"value":"/ Returns an iterator over the sentences in this byte string.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":116665,"byte_end":116728,"line_start":1967,"line_end":1967,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":116733,"byte_end":116736,"line_start":1968,"line_end":1968,"column_start":5,"column_end":8}},{"value":"/ Typically, a sentence will include its trailing punctuation and","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":116741,"byte_end":116808,"line_start":1969,"line_end":1969,"column_start":5,"column_end":72}},{"value":"/ whitespace. Concatenating all elements yielded by the iterator","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":116813,"byte_end":116879,"line_start":1970,"line_end":1970,"column_start":5,"column_end":71}},{"value":"/ results in the original string (modulo Unicode replacement codepoint","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":116884,"byte_end":116956,"line_start":1971,"line_end":1971,"column_start":5,"column_end":77}},{"value":"/ substitutions if invalid UTF-8 is encountered).","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":116961,"byte_end":117012,"line_start":1972,"line_end":1972,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":117017,"byte_end":117020,"line_start":1973,"line_end":1973,"column_start":5,"column_end":8}},{"value":"/ Since sentences are made up of one or more codepoints, this iterator","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":117025,"byte_end":117097,"line_start":1974,"line_end":1974,"column_start":5,"column_end":77}},{"value":"/ yields `&str` elements. When invalid UTF-8 is encountered, replacement","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":117102,"byte_end":117176,"line_start":1975,"line_end":1975,"column_start":5,"column_end":79}},{"value":"/ codepoints are [substituted](index.html#handling-of-invalid-utf-8).","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":117181,"byte_end":117252,"line_start":1976,"line_end":1976,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":117257,"byte_end":117260,"line_start":1977,"line_end":1977,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":117265,"byte_end":117279,"line_start":1978,"line_end":1978,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":117284,"byte_end":117287,"line_start":1979,"line_end":1979,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":117292,"byte_end":117308,"line_start":1980,"line_end":1980,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":117313,"byte_end":117316,"line_start":1981,"line_end":1981,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":117321,"byte_end":117328,"line_start":1982,"line_end":1982,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":117333,"byte_end":117357,"line_start":1983,"line_end":1983,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":117362,"byte_end":117365,"line_start":1984,"line_end":1984,"column_start":5,"column_end":8}},{"value":"/ let bs = b\"I want this. Not that. Right now.\";","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":117370,"byte_end":117420,"line_start":1985,"line_end":1985,"column_start":5,"column_end":55}},{"value":"/ let sentences: Vec<&str> = bs.sentences().collect();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":117425,"byte_end":117481,"line_start":1986,"line_end":1986,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(sentences, vec![","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":117486,"byte_end":117517,"line_start":1987,"line_end":1987,"column_start":5,"column_end":36}},{"value":"/     \"I want this. \",","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":117522,"byte_end":117546,"line_start":1988,"line_end":1988,"column_start":5,"column_end":29}},{"value":"/     \"Not that. \",","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":117551,"byte_end":117572,"line_start":1989,"line_end":1989,"column_start":5,"column_end":26}},{"value":"/     \"Right now.\",","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":117577,"byte_end":117598,"line_start":1990,"line_end":1990,"column_start":5,"column_end":26}},{"value":"/ ]);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":117603,"byte_end":117610,"line_start":1991,"line_end":1991,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":117615,"byte_end":117622,"line_start":1992,"line_end":1992,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"unicode\")","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":117627,"byte_end":117654,"line_start":1993,"line_end":1993,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":117659,"byte_end":117668,"line_start":1994,"line_end":1994,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":274},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":118900,"byte_end":118916,"line_start":2029,"line_end":2029,"column_start":8,"column_end":24},"name":"sentence_indices","qualname":"::ext_slice::ByteSlice::sentence_indices","value":"fn (&self) -> SentenceIndices","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns an iterator over the sentences in this byte string along with\n their starting and ending byte index positions.","sig":null,"attributes":[{"value":"/ Returns an iterator over the sentences in this byte string along with","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":117759,"byte_end":117832,"line_start":1999,"line_end":1999,"column_start":5,"column_end":78}},{"value":"/ their starting and ending byte index positions.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":117837,"byte_end":117888,"line_start":2000,"line_end":2000,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":117893,"byte_end":117896,"line_start":2001,"line_end":2001,"column_start":5,"column_end":8}},{"value":"/ Typically, a sentence will include its trailing punctuation and","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":117901,"byte_end":117968,"line_start":2002,"line_end":2002,"column_start":5,"column_end":72}},{"value":"/ whitespace. Concatenating all elements yielded by the iterator","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":117973,"byte_end":118039,"line_start":2003,"line_end":2003,"column_start":5,"column_end":71}},{"value":"/ results in the original string (modulo Unicode replacement codepoint","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":118044,"byte_end":118116,"line_start":2004,"line_end":2004,"column_start":5,"column_end":77}},{"value":"/ substitutions if invalid UTF-8 is encountered).","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":118121,"byte_end":118172,"line_start":2005,"line_end":2005,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":118177,"byte_end":118180,"line_start":2006,"line_end":2006,"column_start":5,"column_end":8}},{"value":"/ Since sentences are made up of one or more codepoints, this iterator","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":118185,"byte_end":118257,"line_start":2007,"line_end":2007,"column_start":5,"column_end":77}},{"value":"/ yields `&str` elements. When invalid UTF-8 is encountered, replacement","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":118262,"byte_end":118336,"line_start":2008,"line_end":2008,"column_start":5,"column_end":79}},{"value":"/ codepoints are [substituted](index.html#handling-of-invalid-utf-8).","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":118341,"byte_end":118412,"line_start":2009,"line_end":2009,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":118417,"byte_end":118420,"line_start":2010,"line_end":2010,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":118425,"byte_end":118439,"line_start":2011,"line_end":2011,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":118444,"byte_end":118447,"line_start":2012,"line_end":2012,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":118452,"byte_end":118468,"line_start":2013,"line_end":2013,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":118473,"byte_end":118476,"line_start":2014,"line_end":2014,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":118481,"byte_end":118488,"line_start":2015,"line_end":2015,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":118493,"byte_end":118517,"line_start":2016,"line_end":2016,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":118522,"byte_end":118525,"line_start":2017,"line_end":2017,"column_start":5,"column_end":8}},{"value":"/ let bs = b\"I want this. Not that. Right now.\";","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":118530,"byte_end":118580,"line_start":2018,"line_end":2018,"column_start":5,"column_end":55}},{"value":"/ let sentences: Vec<(usize, usize, &str)> =","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":118585,"byte_end":118631,"line_start":2019,"line_end":2019,"column_start":5,"column_end":51}},{"value":"/     bs.sentence_indices().collect();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":118636,"byte_end":118676,"line_start":2020,"line_end":2020,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(sentences, vec![","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":118681,"byte_end":118712,"line_start":2021,"line_end":2021,"column_start":5,"column_end":36}},{"value":"/     (0, 13, \"I want this. \"),","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":118717,"byte_end":118750,"line_start":2022,"line_end":2022,"column_start":5,"column_end":38}},{"value":"/     (13, 23, \"Not that. \"),","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":118755,"byte_end":118786,"line_start":2023,"line_end":2023,"column_start":5,"column_end":36}},{"value":"/     (23, 33, \"Right now.\"),","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":118791,"byte_end":118822,"line_start":2024,"line_end":2024,"column_start":5,"column_end":36}},{"value":"/ ]);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":118827,"byte_end":118834,"line_start":2025,"line_end":2025,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":118839,"byte_end":118846,"line_start":2026,"line_end":2026,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"unicode\")","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":118851,"byte_end":118878,"line_start":2027,"line_end":2027,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":118883,"byte_end":118892,"line_start":2028,"line_end":2028,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":275},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":119606,"byte_end":119611,"line_start":2060,"line_end":2060,"column_start":8,"column_end":13},"name":"lines","qualname":"::ext_slice::ByteSlice::lines","value":"fn (&self) -> Lines","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" An iterator over all lines in a byte string, without their\n terminators.","sig":null,"attributes":[{"value":"/ An iterator over all lines in a byte string, without their","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":119002,"byte_end":119064,"line_start":2033,"line_end":2033,"column_start":5,"column_end":67}},{"value":"/ terminators.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":119069,"byte_end":119085,"line_start":2034,"line_end":2034,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":119090,"byte_end":119093,"line_start":2035,"line_end":2035,"column_start":5,"column_end":8}},{"value":"/ For this iterator, the only line terminators recognized are `\\r\\n` and","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":119098,"byte_end":119172,"line_start":2036,"line_end":2036,"column_start":5,"column_end":79}},{"value":"/ `\\n`.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":119177,"byte_end":119186,"line_start":2037,"line_end":2037,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":119191,"byte_end":119194,"line_start":2038,"line_end":2038,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":119199,"byte_end":119213,"line_start":2039,"line_end":2039,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":119218,"byte_end":119221,"line_start":2040,"line_end":2040,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":119226,"byte_end":119242,"line_start":2041,"line_end":2041,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":119247,"byte_end":119250,"line_start":2042,"line_end":2042,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":119255,"byte_end":119262,"line_start":2043,"line_end":2043,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":119267,"byte_end":119296,"line_start":2044,"line_end":2044,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":119301,"byte_end":119304,"line_start":2045,"line_end":2045,"column_start":5,"column_end":8}},{"value":"/ let s = b\"\\","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":119309,"byte_end":119324,"line_start":2046,"line_end":2046,"column_start":5,"column_end":20}},{"value":"/ foo","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":119329,"byte_end":119336,"line_start":2047,"line_end":2047,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":119341,"byte_end":119344,"line_start":2048,"line_end":2048,"column_start":5,"column_end":8}},{"value":"/ bar\\r","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":119349,"byte_end":119358,"line_start":2049,"line_end":2049,"column_start":5,"column_end":14}},{"value":"/ baz","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":119363,"byte_end":119370,"line_start":2050,"line_end":2050,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":119375,"byte_end":119378,"line_start":2051,"line_end":2051,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":119383,"byte_end":119386,"line_start":2052,"line_end":2052,"column_start":5,"column_end":8}},{"value":"/ quux\";","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":119391,"byte_end":119401,"line_start":2053,"line_end":2053,"column_start":5,"column_end":15}},{"value":"/ let lines: Vec<&[u8]> = s.lines().collect();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":119406,"byte_end":119454,"line_start":2054,"line_end":2054,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(lines, vec![","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":119459,"byte_end":119486,"line_start":2055,"line_end":2055,"column_start":5,"column_end":32}},{"value":"/     B(\"foo\"), B(\"\"), B(\"bar\"), B(\"baz\"), B(\"\"), B(\"\"), B(\"quux\"),","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":119491,"byte_end":119560,"line_start":2056,"line_end":2056,"column_start":5,"column_end":74}},{"value":"/ ]);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":119565,"byte_end":119572,"line_start":2057,"line_end":2057,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":119577,"byte_end":119584,"line_start":2058,"line_end":2058,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":119589,"byte_end":119598,"line_start":2059,"line_end":2059,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":276},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":120771,"byte_end":120792,"line_start":2104,"line_end":2104,"column_start":8,"column_end":29},"name":"lines_with_terminator","qualname":"::ext_slice::ByteSlice::lines_with_terminator","value":"fn (&self) -> LinesWithTerminator","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" An iterator over all lines in a byte string, including their\n terminators.","sig":null,"attributes":[{"value":"/ An iterator over all lines in a byte string, including their","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":119677,"byte_end":119741,"line_start":2064,"line_end":2064,"column_start":5,"column_end":69}},{"value":"/ terminators.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":119746,"byte_end":119762,"line_start":2065,"line_end":2065,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":119767,"byte_end":119770,"line_start":2066,"line_end":2066,"column_start":5,"column_end":8}},{"value":"/ For this iterator, the only line terminator recognized is `\\n`. (Since","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":119775,"byte_end":119849,"line_start":2067,"line_end":2067,"column_start":5,"column_end":79}},{"value":"/ line terminators are included, this also handles `\\r\\n` line endings.)","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":119854,"byte_end":119928,"line_start":2068,"line_end":2068,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":119933,"byte_end":119936,"line_start":2069,"line_end":2069,"column_start":5,"column_end":8}},{"value":"/ Line terminators are only included if they are present in the original","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":119941,"byte_end":120015,"line_start":2070,"line_end":2070,"column_start":5,"column_end":79}},{"value":"/ byte string. For example, the last line in a byte string may not end","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":120020,"byte_end":120092,"line_start":2071,"line_end":2071,"column_start":5,"column_end":77}},{"value":"/ with a line terminator.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":120097,"byte_end":120124,"line_start":2072,"line_end":2072,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":120129,"byte_end":120132,"line_start":2073,"line_end":2073,"column_start":5,"column_end":8}},{"value":"/ Concatenating all elements yielded by this iterator is guaranteed to","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":120137,"byte_end":120209,"line_start":2074,"line_end":2074,"column_start":5,"column_end":77}},{"value":"/ yield the original byte string.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":120214,"byte_end":120249,"line_start":2075,"line_end":2075,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":120254,"byte_end":120257,"line_start":2076,"line_end":2076,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":120262,"byte_end":120276,"line_start":2077,"line_end":2077,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":120281,"byte_end":120284,"line_start":2078,"line_end":2078,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":120289,"byte_end":120305,"line_start":2079,"line_end":2079,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":120310,"byte_end":120313,"line_start":2080,"line_end":2080,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":120318,"byte_end":120325,"line_start":2081,"line_end":2081,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":120330,"byte_end":120359,"line_start":2082,"line_end":2082,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":120364,"byte_end":120367,"line_start":2083,"line_end":2083,"column_start":5,"column_end":8}},{"value":"/ let s = b\"\\","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":120372,"byte_end":120387,"line_start":2084,"line_end":2084,"column_start":5,"column_end":20}},{"value":"/ foo","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":120392,"byte_end":120399,"line_start":2085,"line_end":2085,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":120404,"byte_end":120407,"line_start":2086,"line_end":2086,"column_start":5,"column_end":8}},{"value":"/ bar\\r","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":120412,"byte_end":120421,"line_start":2087,"line_end":2087,"column_start":5,"column_end":14}},{"value":"/ baz","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":120426,"byte_end":120433,"line_start":2088,"line_end":2088,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":120438,"byte_end":120441,"line_start":2089,"line_end":2089,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":120446,"byte_end":120449,"line_start":2090,"line_end":2090,"column_start":5,"column_end":8}},{"value":"/ quux\";","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":120454,"byte_end":120464,"line_start":2091,"line_end":2091,"column_start":5,"column_end":15}},{"value":"/ let lines: Vec<&[u8]> = s.lines_with_terminator().collect();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":120469,"byte_end":120533,"line_start":2092,"line_end":2092,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(lines, vec![","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":120538,"byte_end":120565,"line_start":2093,"line_end":2093,"column_start":5,"column_end":32}},{"value":"/     B(\"foo\\n\"),","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":120570,"byte_end":120589,"line_start":2094,"line_end":2094,"column_start":5,"column_end":24}},{"value":"/     B(\"\\n\"),","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":120594,"byte_end":120610,"line_start":2095,"line_end":2095,"column_start":5,"column_end":21}},{"value":"/     B(\"bar\\r\\n\"),","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":120615,"byte_end":120636,"line_start":2096,"line_end":2096,"column_start":5,"column_end":26}},{"value":"/     B(\"baz\\n\"),","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":120641,"byte_end":120660,"line_start":2097,"line_end":2097,"column_start":5,"column_end":24}},{"value":"/     B(\"\\n\"),","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":120665,"byte_end":120681,"line_start":2098,"line_end":2098,"column_start":5,"column_end":21}},{"value":"/     B(\"\\n\"),","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":120686,"byte_end":120702,"line_start":2099,"line_end":2099,"column_start":5,"column_end":21}},{"value":"/     B(\"quux\"),","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":120707,"byte_end":120725,"line_start":2100,"line_end":2100,"column_start":5,"column_end":23}},{"value":"/ ]);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":120730,"byte_end":120737,"line_start":2101,"line_end":2101,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":120742,"byte_end":120749,"line_start":2102,"line_end":2102,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":120754,"byte_end":120763,"line_start":2103,"line_end":2103,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":277},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":121351,"byte_end":121355,"line_start":2126,"line_end":2126,"column_start":8,"column_end":12},"name":"trim","qualname":"::ext_slice::ByteSlice::trim","value":"fn (&self) -> &[u8]","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Return a byte string slice with leading and trailing whitespace\n removed.","sig":null,"attributes":[{"value":"/ Return a byte string slice with leading and trailing whitespace","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":120886,"byte_end":120953,"line_start":2108,"line_end":2108,"column_start":5,"column_end":72}},{"value":"/ removed.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":120958,"byte_end":120970,"line_start":2109,"line_end":2109,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":120975,"byte_end":120978,"line_start":2110,"line_end":2110,"column_start":5,"column_end":8}},{"value":"/ Whitespace is defined according to the terms of the `White_Space`","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":120983,"byte_end":121052,"line_start":2111,"line_end":2111,"column_start":5,"column_end":74}},{"value":"/ Unicode property.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":121057,"byte_end":121078,"line_start":2112,"line_end":2112,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":121083,"byte_end":121086,"line_start":2113,"line_end":2113,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":121091,"byte_end":121105,"line_start":2114,"line_end":2114,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":121110,"byte_end":121113,"line_start":2115,"line_end":2115,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":121118,"byte_end":121134,"line_start":2116,"line_end":2116,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":121139,"byte_end":121142,"line_start":2117,"line_end":2117,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":121147,"byte_end":121154,"line_start":2118,"line_end":2118,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":121159,"byte_end":121188,"line_start":2119,"line_end":2119,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":121193,"byte_end":121196,"line_start":2120,"line_end":2120,"column_start":5,"column_end":8}},{"value":"/ let s = B(\" foo\\tbar\\t\\u{2003}\\n\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":121201,"byte_end":121240,"line_start":2121,"line_end":2121,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(s.trim(), B(\"foo\\tbar\"));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":121245,"byte_end":121285,"line_start":2122,"line_end":2122,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":121290,"byte_end":121297,"line_start":2123,"line_end":2123,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"unicode\")","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":121302,"byte_end":121329,"line_start":2124,"line_end":2124,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":121334,"byte_end":121343,"line_start":2125,"line_end":2125,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":278},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":121884,"byte_end":121894,"line_start":2147,"line_end":2147,"column_start":8,"column_end":18},"name":"trim_start","qualname":"::ext_slice::ByteSlice::trim_start","value":"fn (&self) -> &[u8]","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Return a byte string slice with leading whitespace removed.","sig":null,"attributes":[{"value":"/ Return a byte string slice with leading whitespace removed.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":121422,"byte_end":121485,"line_start":2130,"line_end":2130,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":121490,"byte_end":121493,"line_start":2131,"line_end":2131,"column_start":5,"column_end":8}},{"value":"/ Whitespace is defined according to the terms of the `White_Space`","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":121498,"byte_end":121567,"line_start":2132,"line_end":2132,"column_start":5,"column_end":74}},{"value":"/ Unicode property.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":121572,"byte_end":121593,"line_start":2133,"line_end":2133,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":121598,"byte_end":121601,"line_start":2134,"line_end":2134,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":121606,"byte_end":121620,"line_start":2135,"line_end":2135,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":121625,"byte_end":121628,"line_start":2136,"line_end":2136,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":121633,"byte_end":121649,"line_start":2137,"line_end":2137,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":121654,"byte_end":121657,"line_start":2138,"line_end":2138,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":121662,"byte_end":121669,"line_start":2139,"line_end":2139,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":121674,"byte_end":121703,"line_start":2140,"line_end":2140,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":121708,"byte_end":121711,"line_start":2141,"line_end":2141,"column_start":5,"column_end":8}},{"value":"/ let s = B(\" foo\\tbar\\t\\u{2003}\\n\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":121716,"byte_end":121755,"line_start":2142,"line_end":2142,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(s.trim_start(), B(\"foo\\tbar\\t\\u{2003}\\n\"));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":121760,"byte_end":121818,"line_start":2143,"line_end":2143,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":121823,"byte_end":121830,"line_start":2144,"line_end":2144,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"unicode\")","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":121835,"byte_end":121862,"line_start":2145,"line_end":2145,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":121867,"byte_end":121876,"line_start":2146,"line_end":2146,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":279},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":122465,"byte_end":122473,"line_start":2169,"line_end":2169,"column_start":8,"column_end":16},"name":"trim_end","qualname":"::ext_slice::ByteSlice::trim_end","value":"fn (&self) -> &[u8]","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Return a byte string slice with trailing whitespace removed.","sig":null,"attributes":[{"value":"/ Return a byte string slice with trailing whitespace removed.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":122015,"byte_end":122079,"line_start":2152,"line_end":2152,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":122084,"byte_end":122087,"line_start":2153,"line_end":2153,"column_start":5,"column_end":8}},{"value":"/ Whitespace is defined according to the terms of the `White_Space`","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":122092,"byte_end":122161,"line_start":2154,"line_end":2154,"column_start":5,"column_end":74}},{"value":"/ Unicode property.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":122166,"byte_end":122187,"line_start":2155,"line_end":2155,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":122192,"byte_end":122195,"line_start":2156,"line_end":2156,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":122200,"byte_end":122214,"line_start":2157,"line_end":2157,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":122219,"byte_end":122222,"line_start":2158,"line_end":2158,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":122227,"byte_end":122243,"line_start":2159,"line_end":2159,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":122248,"byte_end":122251,"line_start":2160,"line_end":2160,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":122256,"byte_end":122263,"line_start":2161,"line_end":2161,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":122268,"byte_end":122297,"line_start":2162,"line_end":2162,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":122302,"byte_end":122305,"line_start":2163,"line_end":2163,"column_start":5,"column_end":8}},{"value":"/ let s = B(\" foo\\tbar\\t\\u{2003}\\n\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":122310,"byte_end":122349,"line_start":2164,"line_end":2164,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(s.trim_end(), B(\" foo\\tbar\"));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":122354,"byte_end":122399,"line_start":2165,"line_end":2165,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":122404,"byte_end":122411,"line_start":2166,"line_end":2166,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"unicode\")","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":122416,"byte_end":122443,"line_start":2167,"line_end":2167,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":122448,"byte_end":122457,"line_start":2168,"line_end":2168,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":280},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":122958,"byte_end":122967,"line_start":2188,"line_end":2188,"column_start":8,"column_end":17},"name":"trim_with","qualname":"::ext_slice::ByteSlice::trim_with","value":"fn <F> (&self, mut trim: F) -> &[u8]","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Return a byte string slice with leading and trailing characters\n satisfying the given predicate removed.","sig":null,"attributes":[{"value":"/ Return a byte string slice with leading and trailing characters","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":122590,"byte_end":122657,"line_start":2174,"line_end":2174,"column_start":5,"column_end":72}},{"value":"/ satisfying the given predicate removed.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":122662,"byte_end":122705,"line_start":2175,"line_end":2175,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":122710,"byte_end":122713,"line_start":2176,"line_end":2176,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":122718,"byte_end":122732,"line_start":2177,"line_end":2177,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":122737,"byte_end":122740,"line_start":2178,"line_end":2178,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":122745,"byte_end":122761,"line_start":2179,"line_end":2179,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":122766,"byte_end":122769,"line_start":2180,"line_end":2180,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":122774,"byte_end":122781,"line_start":2181,"line_end":2181,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":122786,"byte_end":122815,"line_start":2182,"line_end":2182,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":122820,"byte_end":122823,"line_start":2183,"line_end":2183,"column_start":5,"column_end":8}},{"value":"/ let s = b\"123foo5bar789\";","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":122828,"byte_end":122857,"line_start":2184,"line_end":2184,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(s.trim_with(|c| c.is_numeric()), B(\"foo5bar\"));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":122862,"byte_end":122924,"line_start":2185,"line_end":2185,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":122929,"byte_end":122936,"line_start":2186,"line_end":2186,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":122941,"byte_end":122950,"line_start":2187,"line_end":2187,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":282},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":123463,"byte_end":123478,"line_start":2206,"line_end":2206,"column_start":8,"column_end":23},"name":"trim_start_with","qualname":"::ext_slice::ByteSlice::trim_start_with","value":"fn <F> (&self, mut trim: F) -> &[u8]","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Return a byte string slice with leading characters satisfying the given\n predicate removed.","sig":null,"attributes":[{"value":"/ Return a byte string slice with leading characters satisfying the given","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":123099,"byte_end":123174,"line_start":2192,"line_end":2192,"column_start":5,"column_end":80}},{"value":"/ predicate removed.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":123179,"byte_end":123201,"line_start":2193,"line_end":2193,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":123206,"byte_end":123209,"line_start":2194,"line_end":2194,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":123214,"byte_end":123228,"line_start":2195,"line_end":2195,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":123233,"byte_end":123236,"line_start":2196,"line_end":2196,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":123241,"byte_end":123257,"line_start":2197,"line_end":2197,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":123262,"byte_end":123265,"line_start":2198,"line_end":2198,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":123270,"byte_end":123277,"line_start":2199,"line_end":2199,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":123282,"byte_end":123311,"line_start":2200,"line_end":2200,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":123316,"byte_end":123319,"line_start":2201,"line_end":2201,"column_start":5,"column_end":8}},{"value":"/ let s = b\"123foo5bar789\";","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":123324,"byte_end":123353,"line_start":2202,"line_end":2202,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(s.trim_start_with(|c| c.is_numeric()), B(\"foo5bar789\"));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":123358,"byte_end":123429,"line_start":2203,"line_end":2203,"column_start":5,"column_end":76}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":123434,"byte_end":123441,"line_start":2204,"line_end":2204,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":123446,"byte_end":123455,"line_start":2205,"line_end":2205,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":284},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":124062,"byte_end":124075,"line_start":2229,"line_end":2229,"column_start":8,"column_end":21},"name":"trim_end_with","qualname":"::ext_slice::ByteSlice::trim_end_with","value":"fn <F> (&self, mut trim: F) -> &[u8]","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Return a byte string slice with trailing characters satisfying the\n given predicate removed.","sig":null,"attributes":[{"value":"/ Return a byte string slice with trailing characters satisfying the","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":123702,"byte_end":123772,"line_start":2215,"line_end":2215,"column_start":5,"column_end":75}},{"value":"/ given predicate removed.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":123777,"byte_end":123805,"line_start":2216,"line_end":2216,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":123810,"byte_end":123813,"line_start":2217,"line_end":2217,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":123818,"byte_end":123832,"line_start":2218,"line_end":2218,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":123837,"byte_end":123840,"line_start":2219,"line_end":2219,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":123845,"byte_end":123861,"line_start":2220,"line_end":2220,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":123866,"byte_end":123869,"line_start":2221,"line_end":2221,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":123874,"byte_end":123881,"line_start":2222,"line_end":2222,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":123886,"byte_end":123915,"line_start":2223,"line_end":2223,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":123920,"byte_end":123923,"line_start":2224,"line_end":2224,"column_start":5,"column_end":8}},{"value":"/ let s = b\"123foo5bar\";","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":123928,"byte_end":123954,"line_start":2225,"line_end":2225,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(s.trim_end_with(|c| c.is_numeric()), B(\"123foo5bar\"));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":123959,"byte_end":124028,"line_start":2226,"line_end":2226,"column_start":5,"column_end":74}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":124033,"byte_end":124040,"line_start":2227,"line_end":2227,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":124045,"byte_end":124054,"line_start":2228,"line_end":2228,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":286},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":125858,"byte_end":125870,"line_start":2285,"line_end":2285,"column_start":8,"column_end":20},"name":"to_lowercase","qualname":"::ext_slice::ByteSlice::to_lowercase","value":"fn (&self) -> Vec<u8>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns a new `Vec<u8>` containing the lowercase equivalent of this\n byte string.","sig":null,"attributes":[{"value":"/ Returns a new `Vec<u8>` containing the lowercase equivalent of this","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":124305,"byte_end":124376,"line_start":2238,"line_end":2238,"column_start":5,"column_end":76}},{"value":"/ byte string.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":124381,"byte_end":124397,"line_start":2239,"line_end":2239,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":124402,"byte_end":124405,"line_start":2240,"line_end":2240,"column_start":5,"column_end":8}},{"value":"/ In this case, lowercase is defined according to the `Lowercase` Unicode","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":124410,"byte_end":124485,"line_start":2241,"line_end":2241,"column_start":5,"column_end":80}},{"value":"/ property.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":124490,"byte_end":124503,"line_start":2242,"line_end":2242,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":124508,"byte_end":124511,"line_start":2243,"line_end":2243,"column_start":5,"column_end":8}},{"value":"/ If invalid UTF-8 is seen, or if a character has no lowercase variant,","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":124516,"byte_end":124589,"line_start":2244,"line_end":2244,"column_start":5,"column_end":78}},{"value":"/ then it is written to the given buffer unchanged.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":124594,"byte_end":124647,"line_start":2245,"line_end":2245,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":124652,"byte_end":124655,"line_start":2246,"line_end":2246,"column_start":5,"column_end":8}},{"value":"/ Note that some characters in this byte string may expand into multiple","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":124660,"byte_end":124734,"line_start":2247,"line_end":2247,"column_start":5,"column_end":79}},{"value":"/ characters when changing the case, so the number of bytes written to","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":124739,"byte_end":124811,"line_start":2248,"line_end":2248,"column_start":5,"column_end":77}},{"value":"/ the given byte string may not be equivalent to the number of bytes in","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":124816,"byte_end":124889,"line_start":2249,"line_end":2249,"column_start":5,"column_end":78}},{"value":"/ this byte string.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":124894,"byte_end":124915,"line_start":2250,"line_end":2250,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":124920,"byte_end":124923,"line_start":2251,"line_end":2251,"column_start":5,"column_end":8}},{"value":"/ If you'd like to reuse an allocation for performance reasons, then use","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":124928,"byte_end":125002,"line_start":2252,"line_end":2252,"column_start":5,"column_end":79}},{"value":"/ [`to_lowercase_into`](#method.to_lowercase_into) instead.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":125007,"byte_end":125068,"line_start":2253,"line_end":2253,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":125073,"byte_end":125076,"line_start":2254,"line_end":2254,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":125081,"byte_end":125095,"line_start":2255,"line_end":2255,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":125100,"byte_end":125103,"line_start":2256,"line_end":2256,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":125108,"byte_end":125124,"line_start":2257,"line_end":2257,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":125129,"byte_end":125132,"line_start":2258,"line_end":2258,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":125137,"byte_end":125144,"line_start":2259,"line_end":2259,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":125149,"byte_end":125178,"line_start":2260,"line_end":2260,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":125183,"byte_end":125186,"line_start":2261,"line_end":2261,"column_start":5,"column_end":8}},{"value":"/ let s = B(\"HELLO Β\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":125191,"byte_end":125217,"line_start":2262,"line_end":2262,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(\"hello β\".as_bytes(), s.to_lowercase().as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":125222,"byte_end":125289,"line_start":2263,"line_end":2263,"column_start":5,"column_end":71}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":125294,"byte_end":125301,"line_start":2264,"line_end":2264,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":125306,"byte_end":125309,"line_start":2265,"line_end":2265,"column_start":5,"column_end":8}},{"value":"/ Scripts without case are not changed:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":125314,"byte_end":125355,"line_start":2266,"line_end":2266,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":125360,"byte_end":125363,"line_start":2267,"line_end":2267,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":125368,"byte_end":125375,"line_start":2268,"line_end":2268,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":125380,"byte_end":125409,"line_start":2269,"line_end":2269,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":125414,"byte_end":125417,"line_start":2270,"line_end":2270,"column_start":5,"column_end":8}},{"value":"/ let s = B(\"农历新年\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":125422,"byte_end":125452,"line_start":2271,"line_end":2271,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(\"农历新年\".as_bytes(), s.to_lowercase().as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":125457,"byte_end":125528,"line_start":2272,"line_end":2272,"column_start":5,"column_end":68}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":125533,"byte_end":125540,"line_start":2273,"line_end":2273,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":125545,"byte_end":125548,"line_start":2274,"line_end":2274,"column_start":5,"column_end":8}},{"value":"/ Invalid UTF-8 remains as is:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":125553,"byte_end":125585,"line_start":2275,"line_end":2275,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":125590,"byte_end":125593,"line_start":2276,"line_end":2276,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":125598,"byte_end":125605,"line_start":2277,"line_end":2277,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":125610,"byte_end":125639,"line_start":2278,"line_end":2278,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":125644,"byte_end":125647,"line_start":2279,"line_end":2279,"column_start":5,"column_end":8}},{"value":"/ let s = B(b\"FOO\\xFFBAR\\xE2\\x98BAZ\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":125652,"byte_end":125692,"line_start":2280,"line_end":2280,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(B(b\"foo\\xFFbar\\xE2\\x98baz\"), s.to_lowercase().as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":125697,"byte_end":125770,"line_start":2281,"line_end":2281,"column_start":5,"column_end":78}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":125775,"byte_end":125782,"line_start":2282,"line_end":2282,"column_start":5,"column_end":12}},{"value":"cfg(all (feature = \"std\", feature = \"unicode\"))","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":125787,"byte_end":125836,"line_start":2283,"line_end":2283,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":125841,"byte_end":125850,"line_start":2284,"line_end":2284,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":287},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":127771,"byte_end":127788,"line_start":2347,"line_end":2347,"column_start":8,"column_end":25},"name":"to_lowercase_into","qualname":"::ext_slice::ByteSlice::to_lowercase_into","value":"fn (&self, buf: &mut Vec<u8>) -> ()","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Writes the lowercase equivalent of this byte string into the given\n buffer. The buffer is not cleared before written to.","sig":null,"attributes":[{"value":"/ Writes the lowercase equivalent of this byte string into the given","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":125986,"byte_end":126056,"line_start":2291,"line_end":2291,"column_start":5,"column_end":75}},{"value":"/ buffer. The buffer is not cleared before written to.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":126061,"byte_end":126117,"line_start":2292,"line_end":2292,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":126122,"byte_end":126125,"line_start":2293,"line_end":2293,"column_start":5,"column_end":8}},{"value":"/ In this case, lowercase is defined according to the `Lowercase`","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":126130,"byte_end":126197,"line_start":2294,"line_end":2294,"column_start":5,"column_end":72}},{"value":"/ Unicode property.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":126202,"byte_end":126223,"line_start":2295,"line_end":2295,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":126228,"byte_end":126231,"line_start":2296,"line_end":2296,"column_start":5,"column_end":8}},{"value":"/ If invalid UTF-8 is seen, or if a character has no lowercase variant,","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":126236,"byte_end":126309,"line_start":2297,"line_end":2297,"column_start":5,"column_end":78}},{"value":"/ then it is written to the given buffer unchanged.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":126314,"byte_end":126367,"line_start":2298,"line_end":2298,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":126372,"byte_end":126375,"line_start":2299,"line_end":2299,"column_start":5,"column_end":8}},{"value":"/ Note that some characters in this byte string may expand into multiple","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":126380,"byte_end":126454,"line_start":2300,"line_end":2300,"column_start":5,"column_end":79}},{"value":"/ characters when changing the case, so the number of bytes written to","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":126459,"byte_end":126531,"line_start":2301,"line_end":2301,"column_start":5,"column_end":77}},{"value":"/ the given byte string may not be equivalent to the number of bytes in","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":126536,"byte_end":126609,"line_start":2302,"line_end":2302,"column_start":5,"column_end":78}},{"value":"/ this byte string.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":126614,"byte_end":126635,"line_start":2303,"line_end":2303,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":126640,"byte_end":126643,"line_start":2304,"line_end":2304,"column_start":5,"column_end":8}},{"value":"/ If you don't need to amortize allocation and instead prefer","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":126648,"byte_end":126711,"line_start":2305,"line_end":2305,"column_start":5,"column_end":68}},{"value":"/ convenience, then use [`to_lowercase`](#method.to_lowercase) instead.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":126716,"byte_end":126789,"line_start":2306,"line_end":2306,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":126794,"byte_end":126797,"line_start":2307,"line_end":2307,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":126802,"byte_end":126816,"line_start":2308,"line_end":2308,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":126821,"byte_end":126824,"line_start":2309,"line_end":2309,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":126829,"byte_end":126845,"line_start":2310,"line_end":2310,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":126850,"byte_end":126853,"line_start":2311,"line_end":2311,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":126858,"byte_end":126865,"line_start":2312,"line_end":2312,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":126870,"byte_end":126899,"line_start":2313,"line_end":2313,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":126904,"byte_end":126907,"line_start":2314,"line_end":2314,"column_start":5,"column_end":8}},{"value":"/ let s = B(\"HELLO Β\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":126912,"byte_end":126938,"line_start":2315,"line_end":2315,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":126943,"byte_end":126946,"line_start":2316,"line_end":2316,"column_start":5,"column_end":8}},{"value":"/ let mut buf = vec![];","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":126951,"byte_end":126976,"line_start":2317,"line_end":2317,"column_start":5,"column_end":30}},{"value":"/ s.to_lowercase_into(&mut buf);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":126981,"byte_end":127015,"line_start":2318,"line_end":2318,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(\"hello β\".as_bytes(), buf.as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":127020,"byte_end":127074,"line_start":2319,"line_end":2319,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":127079,"byte_end":127086,"line_start":2320,"line_end":2320,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":127091,"byte_end":127094,"line_start":2321,"line_end":2321,"column_start":5,"column_end":8}},{"value":"/ Scripts without case are not changed:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":127099,"byte_end":127140,"line_start":2322,"line_end":2322,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":127145,"byte_end":127148,"line_start":2323,"line_end":2323,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":127153,"byte_end":127160,"line_start":2324,"line_end":2324,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":127165,"byte_end":127194,"line_start":2325,"line_end":2325,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":127199,"byte_end":127202,"line_start":2326,"line_end":2326,"column_start":5,"column_end":8}},{"value":"/ let s = B(\"农历新年\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":127207,"byte_end":127237,"line_start":2327,"line_end":2327,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":127242,"byte_end":127245,"line_start":2328,"line_end":2328,"column_start":5,"column_end":8}},{"value":"/ let mut buf = vec![];","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":127250,"byte_end":127275,"line_start":2329,"line_end":2329,"column_start":5,"column_end":30}},{"value":"/ s.to_lowercase_into(&mut buf);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":127280,"byte_end":127314,"line_start":2330,"line_end":2330,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(\"农历新年\".as_bytes(), buf.as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":127319,"byte_end":127377,"line_start":2331,"line_end":2331,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":127382,"byte_end":127389,"line_start":2332,"line_end":2332,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":127394,"byte_end":127397,"line_start":2333,"line_end":2333,"column_start":5,"column_end":8}},{"value":"/ Invalid UTF-8 remains as is:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":127402,"byte_end":127434,"line_start":2334,"line_end":2334,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":127439,"byte_end":127442,"line_start":2335,"line_end":2335,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":127447,"byte_end":127454,"line_start":2336,"line_end":2336,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":127459,"byte_end":127488,"line_start":2337,"line_end":2337,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":127493,"byte_end":127496,"line_start":2338,"line_end":2338,"column_start":5,"column_end":8}},{"value":"/ let s = B(b\"FOO\\xFFBAR\\xE2\\x98BAZ\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":127501,"byte_end":127541,"line_start":2339,"line_end":2339,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":127546,"byte_end":127549,"line_start":2340,"line_end":2340,"column_start":5,"column_end":8}},{"value":"/ let mut buf = vec![];","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":127554,"byte_end":127579,"line_start":2341,"line_end":2341,"column_start":5,"column_end":30}},{"value":"/ s.to_lowercase_into(&mut buf);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":127584,"byte_end":127618,"line_start":2342,"line_end":2342,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(B(b\"foo\\xFFbar\\xE2\\x98baz\"), buf.as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":127623,"byte_end":127683,"line_start":2343,"line_end":2343,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":127688,"byte_end":127695,"line_start":2344,"line_end":2344,"column_start":5,"column_end":12}},{"value":"cfg(all (feature = \"std\", feature = \"unicode\"))","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":127700,"byte_end":127749,"line_start":2345,"line_end":2345,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":127754,"byte_end":127763,"line_start":2346,"line_end":2346,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":288},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":129736,"byte_end":129754,"line_start":2402,"line_end":2402,"column_start":8,"column_end":26},"name":"to_ascii_lowercase","qualname":"::ext_slice::ByteSlice::to_ascii_lowercase","value":"fn (&self) -> Vec<u8>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns a new `Vec<u8>` containing the ASCII lowercase equivalent of\n this byte string.","sig":null,"attributes":[{"value":"/ Returns a new `Vec<u8>` containing the ASCII lowercase equivalent of","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":128626,"byte_end":128698,"line_start":2369,"line_end":2369,"column_start":5,"column_end":77}},{"value":"/ this byte string.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":128703,"byte_end":128724,"line_start":2370,"line_end":2370,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":128729,"byte_end":128732,"line_start":2371,"line_end":2371,"column_start":5,"column_end":8}},{"value":"/ In this case, lowercase is only defined in ASCII letters. Namely, the","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":128737,"byte_end":128810,"line_start":2372,"line_end":2372,"column_start":5,"column_end":78}},{"value":"/ letters `A-Z` are converted to `a-z`. All other bytes remain unchanged.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":128815,"byte_end":128890,"line_start":2373,"line_end":2373,"column_start":5,"column_end":80}},{"value":"/ In particular, the length of the byte string returned is always","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":128895,"byte_end":128962,"line_start":2374,"line_end":2374,"column_start":5,"column_end":72}},{"value":"/ equivalent to the length of this byte string.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":128967,"byte_end":129016,"line_start":2375,"line_end":2375,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":129021,"byte_end":129024,"line_start":2376,"line_end":2376,"column_start":5,"column_end":8}},{"value":"/ If you'd like to reuse an allocation for performance reasons, then use","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":129029,"byte_end":129103,"line_start":2377,"line_end":2377,"column_start":5,"column_end":79}},{"value":"/ [`make_ascii_lowercase`](#method.make_ascii_lowercase) to perform","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":129108,"byte_end":129177,"line_start":2378,"line_end":2378,"column_start":5,"column_end":74}},{"value":"/ the conversion in place.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":129182,"byte_end":129210,"line_start":2379,"line_end":2379,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":129215,"byte_end":129218,"line_start":2380,"line_end":2380,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":129223,"byte_end":129237,"line_start":2381,"line_end":2381,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":129242,"byte_end":129245,"line_start":2382,"line_end":2382,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":129250,"byte_end":129266,"line_start":2383,"line_end":2383,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":129271,"byte_end":129274,"line_start":2384,"line_end":2384,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":129279,"byte_end":129286,"line_start":2385,"line_end":2385,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":129291,"byte_end":129320,"line_start":2386,"line_end":2386,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":129325,"byte_end":129328,"line_start":2387,"line_end":2387,"column_start":5,"column_end":8}},{"value":"/ let s = B(\"HELLO Β\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":129333,"byte_end":129359,"line_start":2388,"line_end":2388,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(\"hello Β\".as_bytes(), s.to_ascii_lowercase().as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":129364,"byte_end":129437,"line_start":2389,"line_end":2389,"column_start":5,"column_end":77}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":129442,"byte_end":129449,"line_start":2390,"line_end":2390,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":129454,"byte_end":129457,"line_start":2391,"line_end":2391,"column_start":5,"column_end":8}},{"value":"/ Invalid UTF-8 remains as is:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":129462,"byte_end":129494,"line_start":2392,"line_end":2392,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":129499,"byte_end":129502,"line_start":2393,"line_end":2393,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":129507,"byte_end":129514,"line_start":2394,"line_end":2394,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":129519,"byte_end":129548,"line_start":2395,"line_end":2395,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":129553,"byte_end":129556,"line_start":2396,"line_end":2396,"column_start":5,"column_end":8}},{"value":"/ let s = B(b\"FOO\\xFFBAR\\xE2\\x98BAZ\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":129561,"byte_end":129601,"line_start":2397,"line_end":2397,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(s.to_ascii_lowercase(), B(b\"foo\\xFFbar\\xE2\\x98baz\"));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":129606,"byte_end":129674,"line_start":2398,"line_end":2398,"column_start":5,"column_end":73}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":129679,"byte_end":129686,"line_start":2399,"line_end":2399,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":129691,"byte_end":129714,"line_start":2400,"line_end":2400,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":129719,"byte_end":129728,"line_start":2401,"line_end":2401,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":289},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":130809,"byte_end":130829,"line_start":2437,"line_end":2437,"column_start":8,"column_end":28},"name":"make_ascii_lowercase","qualname":"::ext_slice::ByteSlice::make_ascii_lowercase","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Convert this byte string to its lowercase ASCII equivalent in place.","sig":null,"attributes":[{"value":"/ Convert this byte string to its lowercase ASCII equivalent in place.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":129831,"byte_end":129903,"line_start":2406,"line_end":2406,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":129908,"byte_end":129911,"line_start":2407,"line_end":2407,"column_start":5,"column_end":8}},{"value":"/ In this case, lowercase is only defined in ASCII letters. Namely, the","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":129916,"byte_end":129989,"line_start":2408,"line_end":2408,"column_start":5,"column_end":78}},{"value":"/ letters `A-Z` are converted to `a-z`. All other bytes remain unchanged.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":129994,"byte_end":130069,"line_start":2409,"line_end":2409,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":130074,"byte_end":130077,"line_start":2410,"line_end":2410,"column_start":5,"column_end":8}},{"value":"/ If you don't need to do the conversion in","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":130082,"byte_end":130127,"line_start":2411,"line_end":2411,"column_start":5,"column_end":50}},{"value":"/ place and instead prefer convenience, then use","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":130132,"byte_end":130182,"line_start":2412,"line_end":2412,"column_start":5,"column_end":55}},{"value":"/ [`to_ascii_lowercase`](#method.to_ascii_lowercase) instead.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":130187,"byte_end":130250,"line_start":2413,"line_end":2413,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":130255,"byte_end":130258,"line_start":2414,"line_end":2414,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":130263,"byte_end":130277,"line_start":2415,"line_end":2415,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":130282,"byte_end":130285,"line_start":2416,"line_end":2416,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":130290,"byte_end":130306,"line_start":2417,"line_end":2417,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":130311,"byte_end":130314,"line_start":2418,"line_end":2418,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":130319,"byte_end":130326,"line_start":2419,"line_end":2419,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":130331,"byte_end":130355,"line_start":2420,"line_end":2420,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":130360,"byte_end":130363,"line_start":2421,"line_end":2421,"column_start":5,"column_end":8}},{"value":"/ let mut s = <Vec<u8>>::from(\"HELLO Β\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":130368,"byte_end":130412,"line_start":2422,"line_end":2422,"column_start":5,"column_end":48}},{"value":"/ s.make_ascii_lowercase();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":130417,"byte_end":130446,"line_start":2423,"line_end":2423,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(s, \"hello Β\".as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":130451,"byte_end":130492,"line_start":2424,"line_end":2424,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":130497,"byte_end":130504,"line_start":2425,"line_end":2425,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":130509,"byte_end":130512,"line_start":2426,"line_end":2426,"column_start":5,"column_end":8}},{"value":"/ Invalid UTF-8 remains as is:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":130517,"byte_end":130549,"line_start":2427,"line_end":2427,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":130554,"byte_end":130557,"line_start":2428,"line_end":2428,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":130562,"byte_end":130569,"line_start":2429,"line_end":2429,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice, ByteVec};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":130574,"byte_end":130612,"line_start":2430,"line_end":2430,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":130617,"byte_end":130620,"line_start":2431,"line_end":2431,"column_start":5,"column_end":8}},{"value":"/ let mut s = <Vec<u8>>::from_slice(b\"FOO\\xFFBAR\\xE2\\x98BAZ\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":130625,"byte_end":130689,"line_start":2432,"line_end":2432,"column_start":5,"column_end":69}},{"value":"/ s.make_ascii_lowercase();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":130694,"byte_end":130723,"line_start":2433,"line_end":2433,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(s, B(b\"foo\\xFFbar\\xE2\\x98baz\"));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":130728,"byte_end":130775,"line_start":2434,"line_end":2434,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":130780,"byte_end":130787,"line_start":2435,"line_end":2435,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":130792,"byte_end":130801,"line_start":2436,"line_end":2436,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":290},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":132410,"byte_end":132422,"line_start":2488,"line_end":2488,"column_start":8,"column_end":20},"name":"to_uppercase","qualname":"::ext_slice::ByteSlice::to_uppercase","value":"fn (&self) -> Vec<u8>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns a new `Vec<u8>` containing the uppercase equivalent of this\n byte string.","sig":null,"attributes":[{"value":"/ Returns a new `Vec<u8>` containing the uppercase equivalent of this","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":130906,"byte_end":130977,"line_start":2441,"line_end":2441,"column_start":5,"column_end":76}},{"value":"/ byte string.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":130982,"byte_end":130998,"line_start":2442,"line_end":2442,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":131003,"byte_end":131006,"line_start":2443,"line_end":2443,"column_start":5,"column_end":8}},{"value":"/ In this case, uppercase is defined according to the `Uppercase`","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":131011,"byte_end":131078,"line_start":2444,"line_end":2444,"column_start":5,"column_end":72}},{"value":"/ Unicode property.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":131083,"byte_end":131104,"line_start":2445,"line_end":2445,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":131109,"byte_end":131112,"line_start":2446,"line_end":2446,"column_start":5,"column_end":8}},{"value":"/ If invalid UTF-8 is seen, or if a character has no uppercase variant,","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":131117,"byte_end":131190,"line_start":2447,"line_end":2447,"column_start":5,"column_end":78}},{"value":"/ then it is written to the given buffer unchanged.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":131195,"byte_end":131248,"line_start":2448,"line_end":2448,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":131253,"byte_end":131256,"line_start":2449,"line_end":2449,"column_start":5,"column_end":8}},{"value":"/ Note that some characters in this byte string may expand into multiple","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":131261,"byte_end":131335,"line_start":2450,"line_end":2450,"column_start":5,"column_end":79}},{"value":"/ characters when changing the case, so the number of bytes written to","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":131340,"byte_end":131412,"line_start":2451,"line_end":2451,"column_start":5,"column_end":77}},{"value":"/ the given byte string may not be equivalent to the number of bytes in","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":131417,"byte_end":131490,"line_start":2452,"line_end":2452,"column_start":5,"column_end":78}},{"value":"/ this byte string.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":131495,"byte_end":131516,"line_start":2453,"line_end":2453,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":131521,"byte_end":131524,"line_start":2454,"line_end":2454,"column_start":5,"column_end":8}},{"value":"/ If you'd like to reuse an allocation for performance reasons, then use","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":131529,"byte_end":131603,"line_start":2455,"line_end":2455,"column_start":5,"column_end":79}},{"value":"/ [`to_uppercase_into`](#method.to_uppercase_into) instead.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":131608,"byte_end":131669,"line_start":2456,"line_end":2456,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":131674,"byte_end":131677,"line_start":2457,"line_end":2457,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":131682,"byte_end":131696,"line_start":2458,"line_end":2458,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":131701,"byte_end":131704,"line_start":2459,"line_end":2459,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":131709,"byte_end":131725,"line_start":2460,"line_end":2460,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":131730,"byte_end":131733,"line_start":2461,"line_end":2461,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":131738,"byte_end":131745,"line_start":2462,"line_end":2462,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":131750,"byte_end":131779,"line_start":2463,"line_end":2463,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":131784,"byte_end":131787,"line_start":2464,"line_end":2464,"column_start":5,"column_end":8}},{"value":"/ let s = B(\"hello β\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":131792,"byte_end":131818,"line_start":2465,"line_end":2465,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(s.to_uppercase(), B(\"HELLO Β\"));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":131823,"byte_end":131871,"line_start":2466,"line_end":2466,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":131876,"byte_end":131883,"line_start":2467,"line_end":2467,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":131888,"byte_end":131891,"line_start":2468,"line_end":2468,"column_start":5,"column_end":8}},{"value":"/ Scripts without case are not changed:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":131896,"byte_end":131937,"line_start":2469,"line_end":2469,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":131942,"byte_end":131945,"line_start":2470,"line_end":2470,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":131950,"byte_end":131957,"line_start":2471,"line_end":2471,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":131962,"byte_end":131991,"line_start":2472,"line_end":2472,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":131996,"byte_end":131999,"line_start":2473,"line_end":2473,"column_start":5,"column_end":8}},{"value":"/ let s = B(\"农历新年\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":132004,"byte_end":132034,"line_start":2474,"line_end":2474,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(s.to_uppercase(), B(\"农历新年\"));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":132039,"byte_end":132091,"line_start":2475,"line_end":2475,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":132096,"byte_end":132103,"line_start":2476,"line_end":2476,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":132108,"byte_end":132111,"line_start":2477,"line_end":2477,"column_start":5,"column_end":8}},{"value":"/ Invalid UTF-8 remains as is:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":132116,"byte_end":132148,"line_start":2478,"line_end":2478,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":132153,"byte_end":132156,"line_start":2479,"line_end":2479,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":132161,"byte_end":132168,"line_start":2480,"line_end":2480,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":132173,"byte_end":132202,"line_start":2481,"line_end":2481,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":132207,"byte_end":132210,"line_start":2482,"line_end":2482,"column_start":5,"column_end":8}},{"value":"/ let s = B(b\"foo\\xFFbar\\xE2\\x98baz\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":132215,"byte_end":132255,"line_start":2483,"line_end":2483,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(s.to_uppercase(), B(b\"FOO\\xFFBAR\\xE2\\x98BAZ\"));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":132260,"byte_end":132322,"line_start":2484,"line_end":2484,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":132327,"byte_end":132334,"line_start":2485,"line_end":2485,"column_start":5,"column_end":12}},{"value":"cfg(all (feature = \"std\", feature = \"unicode\"))","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":132339,"byte_end":132388,"line_start":2486,"line_end":2486,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":132393,"byte_end":132402,"line_start":2487,"line_end":2487,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":291},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":134274,"byte_end":134291,"line_start":2550,"line_end":2550,"column_start":8,"column_end":25},"name":"to_uppercase_into","qualname":"::ext_slice::ByteSlice::to_uppercase_into","value":"fn (&self, buf: &mut Vec<u8>) -> ()","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Writes the uppercase equivalent of this byte string into the given\n buffer. The buffer is not cleared before written to.","sig":null,"attributes":[{"value":"/ Writes the uppercase equivalent of this byte string into the given","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":132538,"byte_end":132608,"line_start":2494,"line_end":2494,"column_start":5,"column_end":75}},{"value":"/ buffer. The buffer is not cleared before written to.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":132613,"byte_end":132669,"line_start":2495,"line_end":2495,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":132674,"byte_end":132677,"line_start":2496,"line_end":2496,"column_start":5,"column_end":8}},{"value":"/ In this case, uppercase is defined according to the `Uppercase`","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":132682,"byte_end":132749,"line_start":2497,"line_end":2497,"column_start":5,"column_end":72}},{"value":"/ Unicode property.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":132754,"byte_end":132775,"line_start":2498,"line_end":2498,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":132780,"byte_end":132783,"line_start":2499,"line_end":2499,"column_start":5,"column_end":8}},{"value":"/ If invalid UTF-8 is seen, or if a character has no uppercase variant,","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":132788,"byte_end":132861,"line_start":2500,"line_end":2500,"column_start":5,"column_end":78}},{"value":"/ then it is written to the given buffer unchanged.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":132866,"byte_end":132919,"line_start":2501,"line_end":2501,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":132924,"byte_end":132927,"line_start":2502,"line_end":2502,"column_start":5,"column_end":8}},{"value":"/ Note that some characters in this byte string may expand into multiple","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":132932,"byte_end":133006,"line_start":2503,"line_end":2503,"column_start":5,"column_end":79}},{"value":"/ characters when changing the case, so the number of bytes written to","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":133011,"byte_end":133083,"line_start":2504,"line_end":2504,"column_start":5,"column_end":77}},{"value":"/ the given byte string may not be equivalent to the number of bytes in","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":133088,"byte_end":133161,"line_start":2505,"line_end":2505,"column_start":5,"column_end":78}},{"value":"/ this byte string.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":133166,"byte_end":133187,"line_start":2506,"line_end":2506,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":133192,"byte_end":133195,"line_start":2507,"line_end":2507,"column_start":5,"column_end":8}},{"value":"/ If you don't need to amortize allocation and instead prefer","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":133200,"byte_end":133263,"line_start":2508,"line_end":2508,"column_start":5,"column_end":68}},{"value":"/ convenience, then use [`to_uppercase`](#method.to_uppercase) instead.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":133268,"byte_end":133341,"line_start":2509,"line_end":2509,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":133346,"byte_end":133349,"line_start":2510,"line_end":2510,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":133354,"byte_end":133368,"line_start":2511,"line_end":2511,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":133373,"byte_end":133376,"line_start":2512,"line_end":2512,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":133381,"byte_end":133397,"line_start":2513,"line_end":2513,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":133402,"byte_end":133405,"line_start":2514,"line_end":2514,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":133410,"byte_end":133417,"line_start":2515,"line_end":2515,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":133422,"byte_end":133451,"line_start":2516,"line_end":2516,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":133456,"byte_end":133459,"line_start":2517,"line_end":2517,"column_start":5,"column_end":8}},{"value":"/ let s = B(\"hello β\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":133464,"byte_end":133490,"line_start":2518,"line_end":2518,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":133495,"byte_end":133498,"line_start":2519,"line_end":2519,"column_start":5,"column_end":8}},{"value":"/ let mut buf = vec![];","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":133503,"byte_end":133528,"line_start":2520,"line_end":2520,"column_start":5,"column_end":30}},{"value":"/ s.to_uppercase_into(&mut buf);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":133533,"byte_end":133567,"line_start":2521,"line_end":2521,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(buf, B(\"HELLO Β\"));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":133572,"byte_end":133607,"line_start":2522,"line_end":2522,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":133612,"byte_end":133619,"line_start":2523,"line_end":2523,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":133624,"byte_end":133627,"line_start":2524,"line_end":2524,"column_start":5,"column_end":8}},{"value":"/ Scripts without case are not changed:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":133632,"byte_end":133673,"line_start":2525,"line_end":2525,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":133678,"byte_end":133681,"line_start":2526,"line_end":2526,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":133686,"byte_end":133693,"line_start":2527,"line_end":2527,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":133698,"byte_end":133727,"line_start":2528,"line_end":2528,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":133732,"byte_end":133735,"line_start":2529,"line_end":2529,"column_start":5,"column_end":8}},{"value":"/ let s = B(\"农历新年\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":133740,"byte_end":133770,"line_start":2530,"line_end":2530,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":133775,"byte_end":133778,"line_start":2531,"line_end":2531,"column_start":5,"column_end":8}},{"value":"/ let mut buf = vec![];","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":133783,"byte_end":133808,"line_start":2532,"line_end":2532,"column_start":5,"column_end":30}},{"value":"/ s.to_uppercase_into(&mut buf);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":133813,"byte_end":133847,"line_start":2533,"line_end":2533,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(buf, B(\"农历新年\"));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":133852,"byte_end":133891,"line_start":2534,"line_end":2534,"column_start":5,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":133896,"byte_end":133903,"line_start":2535,"line_end":2535,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":133908,"byte_end":133911,"line_start":2536,"line_end":2536,"column_start":5,"column_end":8}},{"value":"/ Invalid UTF-8 remains as is:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":133916,"byte_end":133948,"line_start":2537,"line_end":2537,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":133953,"byte_end":133956,"line_start":2538,"line_end":2538,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":133961,"byte_end":133968,"line_start":2539,"line_end":2539,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":133973,"byte_end":134002,"line_start":2540,"line_end":2540,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":134007,"byte_end":134010,"line_start":2541,"line_end":2541,"column_start":5,"column_end":8}},{"value":"/ let s = B(b\"foo\\xFFbar\\xE2\\x98baz\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":134015,"byte_end":134055,"line_start":2542,"line_end":2542,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":134060,"byte_end":134063,"line_start":2543,"line_end":2543,"column_start":5,"column_end":8}},{"value":"/ let mut buf = vec![];","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":134068,"byte_end":134093,"line_start":2544,"line_end":2544,"column_start":5,"column_end":30}},{"value":"/ s.to_uppercase_into(&mut buf);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":134098,"byte_end":134132,"line_start":2545,"line_end":2545,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(buf, B(b\"FOO\\xFFBAR\\xE2\\x98BAZ\"));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":134137,"byte_end":134186,"line_start":2546,"line_end":2546,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":134191,"byte_end":134198,"line_start":2547,"line_end":2547,"column_start":5,"column_end":12}},{"value":"cfg(all (feature = \"std\", feature = \"unicode\"))","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":134203,"byte_end":134252,"line_start":2548,"line_end":2548,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":134257,"byte_end":134266,"line_start":2549,"line_end":2549,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":292},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":136150,"byte_end":136168,"line_start":2602,"line_end":2602,"column_start":8,"column_end":26},"name":"to_ascii_uppercase","qualname":"::ext_slice::ByteSlice::to_ascii_uppercase","value":"fn (&self) -> Vec<u8>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns a new `Vec<u8>` containing the ASCII uppercase equivalent of\n this byte string.","sig":null,"attributes":[{"value":"/ Returns a new `Vec<u8>` containing the ASCII uppercase equivalent of","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":135059,"byte_end":135131,"line_start":2569,"line_end":2569,"column_start":5,"column_end":77}},{"value":"/ this byte string.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":135136,"byte_end":135157,"line_start":2570,"line_end":2570,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":135162,"byte_end":135165,"line_start":2571,"line_end":2571,"column_start":5,"column_end":8}},{"value":"/ In this case, uppercase is only defined in ASCII letters. Namely, the","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":135170,"byte_end":135243,"line_start":2572,"line_end":2572,"column_start":5,"column_end":78}},{"value":"/ letters `a-z` are converted to `A-Z`. All other bytes remain unchanged.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":135248,"byte_end":135323,"line_start":2573,"line_end":2573,"column_start":5,"column_end":80}},{"value":"/ In particular, the length of the byte string returned is always","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":135328,"byte_end":135395,"line_start":2574,"line_end":2574,"column_start":5,"column_end":72}},{"value":"/ equivalent to the length of this byte string.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":135400,"byte_end":135449,"line_start":2575,"line_end":2575,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":135454,"byte_end":135457,"line_start":2576,"line_end":2576,"column_start":5,"column_end":8}},{"value":"/ If you'd like to reuse an allocation for performance reasons, then use","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":135462,"byte_end":135536,"line_start":2577,"line_end":2577,"column_start":5,"column_end":79}},{"value":"/ [`make_ascii_uppercase`](#method.make_ascii_uppercase) to perform","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":135541,"byte_end":135610,"line_start":2578,"line_end":2578,"column_start":5,"column_end":74}},{"value":"/ the conversion in place.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":135615,"byte_end":135643,"line_start":2579,"line_end":2579,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":135648,"byte_end":135651,"line_start":2580,"line_end":2580,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":135656,"byte_end":135670,"line_start":2581,"line_end":2581,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":135675,"byte_end":135678,"line_start":2582,"line_end":2582,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":135683,"byte_end":135699,"line_start":2583,"line_end":2583,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":135704,"byte_end":135707,"line_start":2584,"line_end":2584,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":135712,"byte_end":135719,"line_start":2585,"line_end":2585,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":135724,"byte_end":135753,"line_start":2586,"line_end":2586,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":135758,"byte_end":135761,"line_start":2587,"line_end":2587,"column_start":5,"column_end":8}},{"value":"/ let s = B(\"hello β\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":135766,"byte_end":135792,"line_start":2588,"line_end":2588,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(s.to_ascii_uppercase(), B(\"HELLO β\"));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":135797,"byte_end":135851,"line_start":2589,"line_end":2589,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":135856,"byte_end":135863,"line_start":2590,"line_end":2590,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":135868,"byte_end":135871,"line_start":2591,"line_end":2591,"column_start":5,"column_end":8}},{"value":"/ Invalid UTF-8 remains as is:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":135876,"byte_end":135908,"line_start":2592,"line_end":2592,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":135913,"byte_end":135916,"line_start":2593,"line_end":2593,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":135921,"byte_end":135928,"line_start":2594,"line_end":2594,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":135933,"byte_end":135962,"line_start":2595,"line_end":2595,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":135967,"byte_end":135970,"line_start":2596,"line_end":2596,"column_start":5,"column_end":8}},{"value":"/ let s = B(b\"foo\\xFFbar\\xE2\\x98baz\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":135975,"byte_end":136015,"line_start":2597,"line_end":2597,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(s.to_ascii_uppercase(), B(b\"FOO\\xFFBAR\\xE2\\x98BAZ\"));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":136020,"byte_end":136088,"line_start":2598,"line_end":2598,"column_start":5,"column_end":73}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":136093,"byte_end":136100,"line_start":2599,"line_end":2599,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":136105,"byte_end":136128,"line_start":2600,"line_end":2600,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":136133,"byte_end":136142,"line_start":2601,"line_end":2601,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":293},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":137220,"byte_end":137240,"line_start":2637,"line_end":2637,"column_start":8,"column_end":28},"name":"make_ascii_uppercase","qualname":"::ext_slice::ByteSlice::make_ascii_uppercase","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Convert this byte string to its uppercase ASCII equivalent in place.","sig":null,"attributes":[{"value":"/ Convert this byte string to its uppercase ASCII equivalent in place.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":136245,"byte_end":136317,"line_start":2606,"line_end":2606,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":136322,"byte_end":136325,"line_start":2607,"line_end":2607,"column_start":5,"column_end":8}},{"value":"/ In this case, uppercase is only defined in ASCII letters. Namely, the","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":136330,"byte_end":136403,"line_start":2608,"line_end":2608,"column_start":5,"column_end":78}},{"value":"/ letters `a-z` are converted to `A-Z`. All other bytes remain unchanged.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":136408,"byte_end":136483,"line_start":2609,"line_end":2609,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":136488,"byte_end":136491,"line_start":2610,"line_end":2610,"column_start":5,"column_end":8}},{"value":"/ If you don't need to do the conversion in","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":136496,"byte_end":136541,"line_start":2611,"line_end":2611,"column_start":5,"column_end":50}},{"value":"/ place and instead prefer convenience, then use","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":136546,"byte_end":136596,"line_start":2612,"line_end":2612,"column_start":5,"column_end":55}},{"value":"/ [`to_ascii_uppercase`](#method.to_ascii_uppercase) instead.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":136601,"byte_end":136664,"line_start":2613,"line_end":2613,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":136669,"byte_end":136672,"line_start":2614,"line_end":2614,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":136677,"byte_end":136691,"line_start":2615,"line_end":2615,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":136696,"byte_end":136699,"line_start":2616,"line_end":2616,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":136704,"byte_end":136720,"line_start":2617,"line_end":2617,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":136725,"byte_end":136728,"line_start":2618,"line_end":2618,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":136733,"byte_end":136740,"line_start":2619,"line_end":2619,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":136745,"byte_end":136774,"line_start":2620,"line_end":2620,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":136779,"byte_end":136782,"line_start":2621,"line_end":2621,"column_start":5,"column_end":8}},{"value":"/ let mut s = <Vec<u8>>::from(\"hello β\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":136787,"byte_end":136831,"line_start":2622,"line_end":2622,"column_start":5,"column_end":48}},{"value":"/ s.make_ascii_uppercase();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":136836,"byte_end":136865,"line_start":2623,"line_end":2623,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(s, B(\"HELLO β\"));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":136870,"byte_end":136903,"line_start":2624,"line_end":2624,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":136908,"byte_end":136915,"line_start":2625,"line_end":2625,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":136920,"byte_end":136923,"line_start":2626,"line_end":2626,"column_start":5,"column_end":8}},{"value":"/ Invalid UTF-8 remains as is:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":136928,"byte_end":136960,"line_start":2627,"line_end":2627,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":136965,"byte_end":136968,"line_start":2628,"line_end":2628,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":136973,"byte_end":136980,"line_start":2629,"line_end":2629,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice, ByteVec};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":136985,"byte_end":137023,"line_start":2630,"line_end":2630,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":137028,"byte_end":137031,"line_start":2631,"line_end":2631,"column_start":5,"column_end":8}},{"value":"/ let mut s = <Vec<u8>>::from_slice(b\"foo\\xFFbar\\xE2\\x98baz\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":137036,"byte_end":137100,"line_start":2632,"line_end":2632,"column_start":5,"column_end":69}},{"value":"/ s.make_ascii_uppercase();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":137105,"byte_end":137134,"line_start":2633,"line_end":2633,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(s, B(b\"FOO\\xFFBAR\\xE2\\x98BAZ\"));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":137139,"byte_end":137186,"line_start":2634,"line_end":2634,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":137191,"byte_end":137198,"line_start":2635,"line_end":2635,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":137203,"byte_end":137212,"line_start":2636,"line_end":2636,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":294},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":138107,"byte_end":138120,"line_start":2664,"line_end":2664,"column_start":8,"column_end":21},"name":"reverse_bytes","qualname":"::ext_slice::ByteSlice::reverse_bytes","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Reverse the bytes in this string, in place.","sig":null,"attributes":[{"value":"/ Reverse the bytes in this string, in place.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":137317,"byte_end":137364,"line_start":2641,"line_end":2641,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":137369,"byte_end":137372,"line_start":2642,"line_end":2642,"column_start":5,"column_end":8}},{"value":"/ This is not necessarily a well formed operation! For example, if this","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":137377,"byte_end":137450,"line_start":2643,"line_end":2643,"column_start":5,"column_end":78}},{"value":"/ byte string contains valid UTF-8 that isn't ASCII, then reversing the","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":137455,"byte_end":137528,"line_start":2644,"line_end":2644,"column_start":5,"column_end":78}},{"value":"/ string will likely result in invalid UTF-8 and otherwise non-sensical","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":137533,"byte_end":137606,"line_start":2645,"line_end":2645,"column_start":5,"column_end":78}},{"value":"/ content.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":137611,"byte_end":137623,"line_start":2646,"line_end":2646,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":137628,"byte_end":137631,"line_start":2647,"line_end":2647,"column_start":5,"column_end":8}},{"value":"/ Note that this is equivalent to the generic `[u8]::reverse` method.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":137636,"byte_end":137707,"line_start":2648,"line_end":2648,"column_start":5,"column_end":76}},{"value":"/ This method is provided to permit callers to explicitly differentiate","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":137712,"byte_end":137785,"line_start":2649,"line_end":2649,"column_start":5,"column_end":78}},{"value":"/ between reversing bytes, codepoints and graphemes.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":137790,"byte_end":137844,"line_start":2650,"line_end":2650,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":137849,"byte_end":137852,"line_start":2651,"line_end":2651,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":137857,"byte_end":137871,"line_start":2652,"line_end":2652,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":137876,"byte_end":137879,"line_start":2653,"line_end":2653,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":137884,"byte_end":137900,"line_start":2654,"line_end":2654,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":137905,"byte_end":137908,"line_start":2655,"line_end":2655,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":137913,"byte_end":137920,"line_start":2656,"line_end":2656,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":137925,"byte_end":137949,"line_start":2657,"line_end":2657,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":137954,"byte_end":137957,"line_start":2658,"line_end":2658,"column_start":5,"column_end":8}},{"value":"/ let mut s = <Vec<u8>>::from(\"hello\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":137962,"byte_end":138003,"line_start":2659,"line_end":2659,"column_start":5,"column_end":46}},{"value":"/ s.reverse_bytes();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":138008,"byte_end":138030,"line_start":2660,"line_end":2660,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(s, \"olleh\".as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":138035,"byte_end":138073,"line_start":2661,"line_end":2661,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":138078,"byte_end":138085,"line_start":2662,"line_end":2662,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":138090,"byte_end":138099,"line_start":2663,"line_end":2663,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":295},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":140525,"byte_end":140538,"line_start":2735,"line_end":2735,"column_start":8,"column_end":21},"name":"reverse_chars","qualname":"::ext_slice::ByteSlice::reverse_chars","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Reverse the codepoints in this string, in place.","sig":null,"attributes":[{"value":"/ Reverse the codepoints in this string, in place.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":138184,"byte_end":138236,"line_start":2668,"line_end":2668,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":138241,"byte_end":138244,"line_start":2669,"line_end":2669,"column_start":5,"column_end":8}},{"value":"/ If this byte string is valid UTF-8, then its reversal by codepoint","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":138249,"byte_end":138319,"line_start":2670,"line_end":2670,"column_start":5,"column_end":75}},{"value":"/ is also guaranteed to be valid UTF-8.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":138324,"byte_end":138365,"line_start":2671,"line_end":2671,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":138370,"byte_end":138373,"line_start":2672,"line_end":2672,"column_start":5,"column_end":8}},{"value":"/ This operation is equivalent to the following, but without allocating:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":138378,"byte_end":138452,"line_start":2673,"line_end":2673,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":138457,"byte_end":138460,"line_start":2674,"line_end":2674,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":138465,"byte_end":138472,"line_start":2675,"line_end":2675,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":138477,"byte_end":138501,"line_start":2676,"line_end":2676,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":138506,"byte_end":138509,"line_start":2677,"line_end":2677,"column_start":5,"column_end":8}},{"value":"/ let mut s = <Vec<u8>>::from(\"foo☃bar\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":138514,"byte_end":138559,"line_start":2678,"line_end":2678,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":138564,"byte_end":138567,"line_start":2679,"line_end":2679,"column_start":5,"column_end":8}},{"value":"/ let mut chars: Vec<char> = s.chars().collect();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":138572,"byte_end":138623,"line_start":2680,"line_end":2680,"column_start":5,"column_end":56}},{"value":"/ chars.reverse();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":138628,"byte_end":138648,"line_start":2681,"line_end":2681,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":138653,"byte_end":138656,"line_start":2682,"line_end":2682,"column_start":5,"column_end":8}},{"value":"/ let reversed: String = chars.into_iter().collect();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":138661,"byte_end":138716,"line_start":2683,"line_end":2683,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(reversed, \"rab☃oof\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":138721,"byte_end":138759,"line_start":2684,"line_end":2684,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":138764,"byte_end":138771,"line_start":2685,"line_end":2685,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":138776,"byte_end":138779,"line_start":2686,"line_end":2686,"column_start":5,"column_end":8}},{"value":"/ Note that this is not necessarily a well formed operation. For example,","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":138784,"byte_end":138859,"line_start":2687,"line_end":2687,"column_start":5,"column_end":80}},{"value":"/ if this byte string contains grapheme clusters with more than one","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":138864,"byte_end":138933,"line_start":2688,"line_end":2688,"column_start":5,"column_end":74}},{"value":"/ codepoint, then those grapheme clusters will not necessarily be","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":138938,"byte_end":139005,"line_start":2689,"line_end":2689,"column_start":5,"column_end":72}},{"value":"/ preserved. If you'd like to preserve grapheme clusters, then use","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":139010,"byte_end":139078,"line_start":2690,"line_end":2690,"column_start":5,"column_end":73}},{"value":"/ [`reverse_graphemes`](#method.reverse_graphemes) instead.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":139083,"byte_end":139144,"line_start":2691,"line_end":2691,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":139149,"byte_end":139152,"line_start":2692,"line_end":2692,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":139157,"byte_end":139171,"line_start":2693,"line_end":2693,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":139176,"byte_end":139179,"line_start":2694,"line_end":2694,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":139184,"byte_end":139200,"line_start":2695,"line_end":2695,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":139205,"byte_end":139208,"line_start":2696,"line_end":2696,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":139213,"byte_end":139220,"line_start":2697,"line_end":2697,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":139225,"byte_end":139249,"line_start":2698,"line_end":2698,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":139254,"byte_end":139257,"line_start":2699,"line_end":2699,"column_start":5,"column_end":8}},{"value":"/ let mut s = <Vec<u8>>::from(\"foo☃bar\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":139262,"byte_end":139307,"line_start":2700,"line_end":2700,"column_start":5,"column_end":48}},{"value":"/ s.reverse_chars();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":139312,"byte_end":139334,"line_start":2701,"line_end":2701,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(s, \"rab☃oof\".as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":139339,"byte_end":139381,"line_start":2702,"line_end":2702,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":139386,"byte_end":139393,"line_start":2703,"line_end":2703,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":139398,"byte_end":139401,"line_start":2704,"line_end":2704,"column_start":5,"column_end":8}},{"value":"/ This example shows that not all reversals lead to a well formed string.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":139406,"byte_end":139481,"line_start":2705,"line_end":2705,"column_start":5,"column_end":80}},{"value":"/ For example, in this case, combining marks are used to put accents over","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":139486,"byte_end":139561,"line_start":2706,"line_end":2706,"column_start":5,"column_end":80}},{"value":"/ some letters, and those accent marks must appear after the codepoints","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":139566,"byte_end":139639,"line_start":2707,"line_end":2707,"column_start":5,"column_end":78}},{"value":"/ they modify.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":139644,"byte_end":139660,"line_start":2708,"line_end":2708,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":139665,"byte_end":139668,"line_start":2709,"line_end":2709,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":139673,"byte_end":139680,"line_start":2710,"line_end":2710,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":139685,"byte_end":139714,"line_start":2711,"line_end":2711,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":139719,"byte_end":139722,"line_start":2712,"line_end":2712,"column_start":5,"column_end":8}},{"value":"/ let mut s = <Vec<u8>>::from(\"résumé\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":139727,"byte_end":139773,"line_start":2713,"line_end":2713,"column_start":5,"column_end":49}},{"value":"/ s.reverse_chars();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":139778,"byte_end":139800,"line_start":2714,"line_end":2714,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(s, B(b\"\\xCC\\x81emus\\xCC\\x81er\"));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":139805,"byte_end":139853,"line_start":2715,"line_end":2715,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":139858,"byte_end":139865,"line_start":2716,"line_end":2716,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":139870,"byte_end":139873,"line_start":2717,"line_end":2717,"column_start":5,"column_end":8}},{"value":"/ A word of warning: the above example relies on the fact that","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":139878,"byte_end":139942,"line_start":2718,"line_end":2718,"column_start":5,"column_end":69}},{"value":"/ `résumé` is in decomposed normal form, which means there are separate","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":139947,"byte_end":140024,"line_start":2719,"line_end":2719,"column_start":5,"column_end":80}},{"value":"/ codepoints for the accents above `e`. If it is instead in composed","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":140029,"byte_end":140099,"line_start":2720,"line_end":2720,"column_start":5,"column_end":75}},{"value":"/ normal form, then the example works:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":140104,"byte_end":140144,"line_start":2721,"line_end":2721,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":140149,"byte_end":140152,"line_start":2722,"line_end":2722,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":140157,"byte_end":140164,"line_start":2723,"line_end":2723,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":140169,"byte_end":140198,"line_start":2724,"line_end":2724,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":140203,"byte_end":140206,"line_start":2725,"line_end":2725,"column_start":5,"column_end":8}},{"value":"/ let mut s = <Vec<u8>>::from(\"résumé\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":140211,"byte_end":140255,"line_start":2726,"line_end":2726,"column_start":5,"column_end":47}},{"value":"/ s.reverse_chars();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":140260,"byte_end":140282,"line_start":2727,"line_end":2727,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(s, B(\"émusér\"));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":140287,"byte_end":140320,"line_start":2728,"line_end":2728,"column_start":5,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":140325,"byte_end":140332,"line_start":2729,"line_end":2729,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":140337,"byte_end":140340,"line_start":2730,"line_end":2730,"column_start":5,"column_end":8}},{"value":"/ The point here is to be cautious and not assume that just because","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":140345,"byte_end":140414,"line_start":2731,"line_end":2731,"column_start":5,"column_end":74}},{"value":"/ `reverse_chars` works in one case, that it therefore works in all","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":140419,"byte_end":140488,"line_start":2732,"line_end":2732,"column_start":5,"column_end":74}},{"value":"/ cases.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":140493,"byte_end":140503,"line_start":2733,"line_end":2733,"column_start":5,"column_end":15}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":140508,"byte_end":140517,"line_start":2734,"line_end":2734,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":142094,"byte_end":142111,"line_start":2793,"line_end":2793,"column_start":8,"column_end":25},"name":"reverse_graphemes","qualname":"::ext_slice::ByteSlice::reverse_graphemes","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Reverse the graphemes in this string, in place.","sig":null,"attributes":[{"value":"/ Reverse the graphemes in this string, in place.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":140899,"byte_end":140950,"line_start":2750,"line_end":2750,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":140955,"byte_end":140958,"line_start":2751,"line_end":2751,"column_start":5,"column_end":8}},{"value":"/ If this byte string is valid UTF-8, then its reversal by grapheme","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":140963,"byte_end":141032,"line_start":2752,"line_end":2752,"column_start":5,"column_end":74}},{"value":"/ is also guaranteed to be valid UTF-8.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":141037,"byte_end":141078,"line_start":2753,"line_end":2753,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":141083,"byte_end":141086,"line_start":2754,"line_end":2754,"column_start":5,"column_end":8}},{"value":"/ This operation is equivalent to the following, but without allocating:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":141091,"byte_end":141165,"line_start":2755,"line_end":2755,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":141170,"byte_end":141173,"line_start":2756,"line_end":2756,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":141178,"byte_end":141185,"line_start":2757,"line_end":2757,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":141190,"byte_end":141214,"line_start":2758,"line_end":2758,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":141219,"byte_end":141222,"line_start":2759,"line_end":2759,"column_start":5,"column_end":8}},{"value":"/ let mut s = <Vec<u8>>::from(\"foo☃bar\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":141227,"byte_end":141272,"line_start":2760,"line_end":2760,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":141277,"byte_end":141280,"line_start":2761,"line_end":2761,"column_start":5,"column_end":8}},{"value":"/ let mut graphemes: Vec<&str> = s.graphemes().collect();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":141285,"byte_end":141344,"line_start":2762,"line_end":2762,"column_start":5,"column_end":64}},{"value":"/ graphemes.reverse();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":141349,"byte_end":141373,"line_start":2763,"line_end":2763,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":141378,"byte_end":141381,"line_start":2764,"line_end":2764,"column_start":5,"column_end":8}},{"value":"/ let reversed = graphemes.concat();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":141386,"byte_end":141424,"line_start":2765,"line_end":2765,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(reversed, \"rab☃oof\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":141429,"byte_end":141467,"line_start":2766,"line_end":2766,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":141472,"byte_end":141479,"line_start":2767,"line_end":2767,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":141484,"byte_end":141487,"line_start":2768,"line_end":2768,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":141492,"byte_end":141506,"line_start":2769,"line_end":2769,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":141511,"byte_end":141514,"line_start":2770,"line_end":2770,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":141519,"byte_end":141535,"line_start":2771,"line_end":2771,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":141540,"byte_end":141543,"line_start":2772,"line_end":2772,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":141548,"byte_end":141555,"line_start":2773,"line_end":2773,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":141560,"byte_end":141584,"line_start":2774,"line_end":2774,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":141589,"byte_end":141592,"line_start":2775,"line_end":2775,"column_start":5,"column_end":8}},{"value":"/ let mut s = <Vec<u8>>::from(\"foo☃bar\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":141597,"byte_end":141642,"line_start":2776,"line_end":2776,"column_start":5,"column_end":48}},{"value":"/ s.reverse_graphemes();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":141647,"byte_end":141673,"line_start":2777,"line_end":2777,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(s, \"rab☃oof\".as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":141678,"byte_end":141720,"line_start":2778,"line_end":2778,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":141725,"byte_end":141732,"line_start":2779,"line_end":2779,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":141737,"byte_end":141740,"line_start":2780,"line_end":2780,"column_start":5,"column_end":8}},{"value":"/ This example shows how this correctly handles grapheme clusters,","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":141745,"byte_end":141813,"line_start":2781,"line_end":2781,"column_start":5,"column_end":73}},{"value":"/ unlike `reverse_chars`.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":141818,"byte_end":141845,"line_start":2782,"line_end":2782,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":141850,"byte_end":141853,"line_start":2783,"line_end":2783,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":141858,"byte_end":141865,"line_start":2784,"line_end":2784,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":141870,"byte_end":141894,"line_start":2785,"line_end":2785,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":141899,"byte_end":141902,"line_start":2786,"line_end":2786,"column_start":5,"column_end":8}},{"value":"/ let mut s = <Vec<u8>>::from(\"résumé\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":141907,"byte_end":141951,"line_start":2787,"line_end":2787,"column_start":5,"column_end":47}},{"value":"/ s.reverse_graphemes();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":141956,"byte_end":141982,"line_start":2788,"line_end":2788,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(s, \"émusér\".as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":141987,"byte_end":142028,"line_start":2789,"line_end":2789,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":142033,"byte_end":142040,"line_start":2790,"line_end":2790,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"unicode\")","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":142045,"byte_end":142072,"line_start":2791,"line_end":2791,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":142077,"byte_end":142086,"line_start":2792,"line_end":2792,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":143040,"byte_end":143048,"line_start":2828,"line_end":2828,"column_start":8,"column_end":16},"name":"is_ascii","qualname":"::ext_slice::ByteSlice::is_ascii","value":"fn (&self) -> bool","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns true if and only if every byte in this byte string is ASCII.","sig":null,"attributes":[{"value":"/ Returns true if and only if every byte in this byte string is ASCII.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":142514,"byte_end":142586,"line_start":2810,"line_end":2810,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":142591,"byte_end":142594,"line_start":2811,"line_end":2811,"column_start":5,"column_end":8}},{"value":"/ ASCII is an encoding that defines 128 codepoints. A byte corresponds to","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":142599,"byte_end":142674,"line_start":2812,"line_end":2812,"column_start":5,"column_end":80}},{"value":"/ an ASCII codepoint if and only if it is in the inclusive range","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":142679,"byte_end":142745,"line_start":2813,"line_end":2813,"column_start":5,"column_end":71}},{"value":"/ `[0, 127]`.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":142750,"byte_end":142765,"line_start":2814,"line_end":2814,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":142770,"byte_end":142773,"line_start":2815,"line_end":2815,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":142778,"byte_end":142792,"line_start":2816,"line_end":2816,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":142797,"byte_end":142800,"line_start":2817,"line_end":2817,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":142805,"byte_end":142821,"line_start":2818,"line_end":2818,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":142826,"byte_end":142829,"line_start":2819,"line_end":2819,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":142834,"byte_end":142841,"line_start":2820,"line_end":2820,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":142846,"byte_end":142875,"line_start":2821,"line_end":2821,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":142880,"byte_end":142883,"line_start":2822,"line_end":2822,"column_start":5,"column_end":8}},{"value":"/ assert!(B(\"abc\").is_ascii());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":142888,"byte_end":142921,"line_start":2823,"line_end":2823,"column_start":5,"column_end":38}},{"value":"/ assert!(!B(\"☃βツ\").is_ascii());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":142926,"byte_end":142965,"line_start":2824,"line_end":2824,"column_start":5,"column_end":39}},{"value":"/ assert!(!B(b\"\\xFF\").is_ascii());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":142970,"byte_end":143006,"line_start":2825,"line_end":2825,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":143011,"byte_end":143018,"line_start":2826,"line_end":2826,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":143023,"byte_end":143032,"line_start":2827,"line_end":2827,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":299},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":143925,"byte_end":143932,"line_start":2856,"line_end":2856,"column_start":8,"column_end":15},"name":"is_utf8","qualname":"::ext_slice::ByteSlice::is_utf8","value":"fn (&self) -> bool","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns true if and only if the entire byte string is valid UTF-8.","sig":null,"attributes":[{"value":"/ Returns true if and only if the entire byte string is valid UTF-8.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":143155,"byte_end":143225,"line_start":2832,"line_end":2832,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":143230,"byte_end":143233,"line_start":2833,"line_end":2833,"column_start":5,"column_end":8}},{"value":"/ If you need location information about where a byte string's first","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":143238,"byte_end":143308,"line_start":2834,"line_end":2834,"column_start":5,"column_end":75}},{"value":"/ invalid UTF-8 byte is, then use the [`to_str`](#method.to_str) method.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":143313,"byte_end":143387,"line_start":2835,"line_end":2835,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":143392,"byte_end":143395,"line_start":2836,"line_end":2836,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":143400,"byte_end":143414,"line_start":2837,"line_end":2837,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":143419,"byte_end":143422,"line_start":2838,"line_end":2838,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":143427,"byte_end":143443,"line_start":2839,"line_end":2839,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":143448,"byte_end":143451,"line_start":2840,"line_end":2840,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":143456,"byte_end":143463,"line_start":2841,"line_end":2841,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":143468,"byte_end":143497,"line_start":2842,"line_end":2842,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":143502,"byte_end":143505,"line_start":2843,"line_end":2843,"column_start":5,"column_end":8}},{"value":"/ assert!(B(\"abc\").is_utf8());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":143510,"byte_end":143542,"line_start":2844,"line_end":2844,"column_start":5,"column_end":37}},{"value":"/ assert!(B(\"☃βツ\").is_utf8());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":143547,"byte_end":143584,"line_start":2845,"line_end":2845,"column_start":5,"column_end":37}},{"value":"/ // invalid bytes","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":143589,"byte_end":143609,"line_start":2846,"line_end":2846,"column_start":5,"column_end":25}},{"value":"/ assert!(!B(b\"abc\\xFF\").is_utf8());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":143614,"byte_end":143652,"line_start":2847,"line_end":2847,"column_start":5,"column_end":43}},{"value":"/ // surrogate encoding","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":143657,"byte_end":143682,"line_start":2848,"line_end":2848,"column_start":5,"column_end":30}},{"value":"/ assert!(!B(b\"\\xED\\xA0\\x80\").is_utf8());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":143687,"byte_end":143730,"line_start":2849,"line_end":2849,"column_start":5,"column_end":48}},{"value":"/ // incomplete sequence","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":143735,"byte_end":143761,"line_start":2850,"line_end":2850,"column_start":5,"column_end":31}},{"value":"/ assert!(!B(b\"\\xF0\\x9D\\x9Ca\").is_utf8());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":143766,"byte_end":143810,"line_start":2851,"line_end":2851,"column_start":5,"column_end":49}},{"value":"/ // overlong sequence","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":143815,"byte_end":143839,"line_start":2852,"line_end":2852,"column_start":5,"column_end":29}},{"value":"/ assert!(!B(b\"\\xF0\\x82\\x82\\xAC\").is_utf8());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":143844,"byte_end":143891,"line_start":2853,"line_end":2853,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":143896,"byte_end":143903,"line_start":2854,"line_end":2854,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":143908,"byte_end":143917,"line_start":2855,"line_end":2855,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":300},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":144522,"byte_end":144531,"line_start":2877,"line_end":2877,"column_start":8,"column_end":17},"name":"last_byte","qualname":"::ext_slice::ByteSlice::last_byte","value":"fn (&self) -> Option<u8>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns the last byte in this byte string, if it's non-empty. If this\n byte string is empty, this returns `None`.","sig":null,"attributes":[{"value":"/ Returns the last byte in this byte string, if it's non-empty. If this","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":144009,"byte_end":144082,"line_start":2860,"line_end":2860,"column_start":5,"column_end":78}},{"value":"/ byte string is empty, this returns `None`.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":144087,"byte_end":144133,"line_start":2861,"line_end":2861,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":144138,"byte_end":144141,"line_start":2862,"line_end":2862,"column_start":5,"column_end":8}},{"value":"/ Note that this is like the generic `[u8]::last`, except this returns","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":144146,"byte_end":144218,"line_start":2863,"line_end":2863,"column_start":5,"column_end":77}},{"value":"/ the byte by value instead of a reference to the byte.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":144223,"byte_end":144280,"line_start":2864,"line_end":2864,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":144285,"byte_end":144288,"line_start":2865,"line_end":2865,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":144293,"byte_end":144307,"line_start":2866,"line_end":2866,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":144312,"byte_end":144315,"line_start":2867,"line_end":2867,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":144320,"byte_end":144336,"line_start":2868,"line_end":2868,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":144341,"byte_end":144344,"line_start":2869,"line_end":2869,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":144349,"byte_end":144356,"line_start":2870,"line_end":2870,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":144361,"byte_end":144385,"line_start":2871,"line_end":2871,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":144390,"byte_end":144393,"line_start":2872,"line_end":2872,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Some(b'z'), b\"baz\".last_byte());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":144398,"byte_end":144445,"line_start":2873,"line_end":2873,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(None, b\"\".last_byte());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":144450,"byte_end":144488,"line_start":2874,"line_end":2874,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":144493,"byte_end":144500,"line_start":2875,"line_end":2875,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":144505,"byte_end":144514,"line_start":2876,"line_end":2876,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":145212,"byte_end":145231,"line_start":2898,"line_end":2898,"column_start":8,"column_end":27},"name":"find_non_ascii_byte","qualname":"::ext_slice::ByteSlice::find_non_ascii_byte","value":"fn (&self) -> Option<usize>","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Returns the index of the first non-ASCII byte in this byte string (if\n any such indices exist). Specifically, it returns the index of the\n first byte with a value greater than or equal to `0x80`.","sig":null,"attributes":[{"value":"/ Returns the index of the first non-ASCII byte in this byte string (if","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":144664,"byte_end":144737,"line_start":2882,"line_end":2882,"column_start":5,"column_end":78}},{"value":"/ any such indices exist). Specifically, it returns the index of the","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":144742,"byte_end":144812,"line_start":2883,"line_end":2883,"column_start":5,"column_end":75}},{"value":"/ first byte with a value greater than or equal to `0x80`.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":144817,"byte_end":144877,"line_start":2884,"line_end":2884,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":144882,"byte_end":144885,"line_start":2885,"line_end":2885,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":144890,"byte_end":144904,"line_start":2886,"line_end":2886,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":144909,"byte_end":144912,"line_start":2887,"line_end":2887,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":144917,"byte_end":144933,"line_start":2888,"line_end":2888,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":144938,"byte_end":144941,"line_start":2889,"line_end":2889,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":144946,"byte_end":144953,"line_start":2890,"line_end":2890,"column_start":5,"column_end":12}},{"value":"/ use bstr::{ByteSlice, B};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":144958,"byte_end":144987,"line_start":2891,"line_end":2891,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":144992,"byte_end":144995,"line_start":2892,"line_end":2892,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Some(3), b\"abc\\xff\".find_non_ascii_byte());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":145000,"byte_end":145058,"line_start":2893,"line_end":2893,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(None, b\"abcde\".find_non_ascii_byte());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":145063,"byte_end":145116,"line_start":2894,"line_end":2894,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(Some(0), B(\"😀\").find_non_ascii_byte());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":145121,"byte_end":145178,"line_start":2895,"line_end":2895,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":145183,"byte_end":145190,"line_start":2896,"line_end":2896,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":145195,"byte_end":145204,"line_start":2897,"line_end":2897,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":303},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":146371,"byte_end":146386,"line_start":2933,"line_end":2933,"column_start":8,"column_end":23},"name":"copy_within_str","qualname":"::ext_slice::ByteSlice::copy_within_str","value":"fn <R> (&mut self, src: R, dest: usize) -> ()","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Copies elements from one part of the slice to another part of itself,\n where the parts may be overlapping.","sig":null,"attributes":[{"value":"/ Copies elements from one part of the slice to another part of itself,","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":145447,"byte_end":145520,"line_start":2907,"line_end":2907,"column_start":5,"column_end":78}},{"value":"/ where the parts may be overlapping.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":145525,"byte_end":145564,"line_start":2908,"line_end":2908,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":145569,"byte_end":145572,"line_start":2909,"line_end":2909,"column_start":5,"column_end":8}},{"value":"/ `src` is the range within this byte string to copy from, while `dest`","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":145577,"byte_end":145650,"line_start":2910,"line_end":2910,"column_start":5,"column_end":78}},{"value":"/ is the starting index of the range within this byte string to copy to.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":145655,"byte_end":145729,"line_start":2911,"line_end":2911,"column_start":5,"column_end":79}},{"value":"/ The length indicated by `src` must be less than or equal to the number","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":145734,"byte_end":145808,"line_start":2912,"line_end":2912,"column_start":5,"column_end":79}},{"value":"/ of bytes from `dest` to the end of the byte string.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":145813,"byte_end":145868,"line_start":2913,"line_end":2913,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":145873,"byte_end":145876,"line_start":2914,"line_end":2914,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":145881,"byte_end":145893,"line_start":2915,"line_end":2915,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":145898,"byte_end":145901,"line_start":2916,"line_end":2916,"column_start":5,"column_end":8}},{"value":"/ Panics if either range is out of bounds, or if `src` is too big to fit","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":145906,"byte_end":145980,"line_start":2917,"line_end":2917,"column_start":5,"column_end":79}},{"value":"/ into `dest`, or if the end of `src` is before the start.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":145985,"byte_end":146045,"line_start":2918,"line_end":2918,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":146050,"byte_end":146053,"line_start":2919,"line_end":2919,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":146058,"byte_end":146072,"line_start":2920,"line_end":2920,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":146077,"byte_end":146080,"line_start":2921,"line_end":2921,"column_start":5,"column_end":8}},{"value":"/ Copying four bytes within a byte string:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":146085,"byte_end":146129,"line_start":2922,"line_end":2922,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":146134,"byte_end":146137,"line_start":2923,"line_end":2923,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":146142,"byte_end":146149,"line_start":2924,"line_end":2924,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":146154,"byte_end":146183,"line_start":2925,"line_end":2925,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":146188,"byte_end":146191,"line_start":2926,"line_end":2926,"column_start":5,"column_end":8}},{"value":"/ let mut buf = *b\"Hello, World!\";","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":146196,"byte_end":146232,"line_start":2927,"line_end":2927,"column_start":5,"column_end":41}},{"value":"/ let s = &mut buf;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":146237,"byte_end":146258,"line_start":2928,"line_end":2928,"column_start":5,"column_end":26}},{"value":"/ s.copy_within_str(1..5, 8);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":146263,"byte_end":146294,"line_start":2929,"line_end":2929,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(s, B(\"Hello, Wello!\"));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":146299,"byte_end":146337,"line_start":2930,"line_end":2930,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":146342,"byte_end":146349,"line_start":2931,"line_end":2931,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":146354,"byte_end":146363,"line_start":2932,"line_end":2932,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1057},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":148861,"byte_end":148867,"line_start":2991,"line_end":2991,"column_start":12,"column_end":18},"name":"Finder","qualname":"::ext_slice::Finder","value":"Finder {  }","parent":null,"children":[{"krate":0,"index":1059}],"decl_id":null,"docs":" A single substring searcher fixed to a particular needle.","sig":null,"attributes":[{"value":"/ A single substring searcher fixed to a particular needle.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":147944,"byte_end":148005,"line_start":2974,"line_end":2974,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":148006,"byte_end":148009,"line_start":2975,"line_end":2975,"column_start":1,"column_end":4}},{"value":"/ The purpose of this type is to permit callers to construct a substring","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":148010,"byte_end":148084,"line_start":2976,"line_end":2976,"column_start":1,"column_end":75}},{"value":"/ searcher that can be used to search haystacks without the overhead of","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":148085,"byte_end":148158,"line_start":2977,"line_end":2977,"column_start":1,"column_end":74}},{"value":"/ constructing the searcher in the first place. This is a somewhat niche","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":148159,"byte_end":148233,"line_start":2978,"line_end":2978,"column_start":1,"column_end":75}},{"value":"/ concern when it's necessary to re-use the same needle to search multiple","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":148234,"byte_end":148310,"line_start":2979,"line_end":2979,"column_start":1,"column_end":77}},{"value":"/ different haystacks with as little overhead as possible. In general, using","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":148311,"byte_end":148389,"line_start":2980,"line_end":2980,"column_start":1,"column_end":79}},{"value":"/ [`ByteSlice::find`](trait.ByteSlice.html#method.find)","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":148390,"byte_end":148447,"line_start":2981,"line_end":2981,"column_start":1,"column_end":58}},{"value":"/ or","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":148448,"byte_end":148454,"line_start":2982,"line_end":2982,"column_start":1,"column_end":7}},{"value":"/ [`ByteSlice::find_iter`](trait.ByteSlice.html#method.find_iter)","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":148455,"byte_end":148522,"line_start":2983,"line_end":2983,"column_start":1,"column_end":68}},{"value":"/ is good enough, but `Finder` is useful when you can meaningfully observe","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":148523,"byte_end":148599,"line_start":2984,"line_end":2984,"column_start":1,"column_end":77}},{"value":"/ searcher construction time in a profile.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":148600,"byte_end":148644,"line_start":2985,"line_end":2985,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":148645,"byte_end":148648,"line_start":2986,"line_end":2986,"column_start":1,"column_end":4}},{"value":"/ When the `std` feature is enabled, then this type has an `into_owned`","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":148649,"byte_end":148722,"line_start":2987,"line_end":2987,"column_start":1,"column_end":74}},{"value":"/ version which permits building a `Finder` that is not connected to the","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":148723,"byte_end":148797,"line_start":2988,"line_end":2988,"column_start":1,"column_end":75}},{"value":"/ lifetime of its needle.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":148798,"byte_end":148825,"line_start":2989,"line_end":2989,"column_start":1,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":307},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":149000,"byte_end":149003,"line_start":2998,"line_end":2998,"column_start":12,"column_end":15},"name":"new","qualname":"<Finder>::new","value":"fn <B> (needle: &'a B) -> Finder<'a>","parent":null,"children":[],"decl_id":null,"docs":" Create a new finder for the given needle.\n","sig":null,"attributes":[{"value":"/ Create a new finder for the given needle.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":148929,"byte_end":148974,"line_start":2996,"line_end":2996,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":148979,"byte_end":148988,"line_start":2997,"line_end":2997,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":309},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":149476,"byte_end":149486,"line_start":3011,"line_end":3011,"column_start":12,"column_end":22},"name":"into_owned","qualname":"<Finder>::into_owned","value":"fn (self) -> Finder<'static>","parent":null,"children":[],"decl_id":null,"docs":" Convert this finder into its owned variant, such that it no longer\n borrows the needle.","sig":null,"attributes":[{"value":"/ Convert this finder into its owned variant, such that it no longer","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":149133,"byte_end":149203,"line_start":3002,"line_end":3002,"column_start":5,"column_end":75}},{"value":"/ borrows the needle.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":149208,"byte_end":149231,"line_start":3003,"line_end":3003,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":149236,"byte_end":149239,"line_start":3004,"line_end":3004,"column_start":5,"column_end":8}},{"value":"/ If this is already an owned finder, then this is a no-op. Otherwise,","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":149244,"byte_end":149316,"line_start":3005,"line_end":3005,"column_start":5,"column_end":77}},{"value":"/ this copies the needle.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":149321,"byte_end":149348,"line_start":3006,"line_end":3006,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":149353,"byte_end":149356,"line_start":3007,"line_end":3007,"column_start":5,"column_end":8}},{"value":"/ This is only available when the `std` feature is enabled.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":149361,"byte_end":149422,"line_start":3008,"line_end":3008,"column_start":5,"column_end":66}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":149427,"byte_end":149450,"line_start":3009,"line_end":3009,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":149455,"byte_end":149464,"line_start":3010,"line_end":3010,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":310},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":149970,"byte_end":149976,"line_start":3022,"line_end":3022,"column_start":12,"column_end":18},"name":"needle","qualname":"<Finder>::needle","value":"fn (&self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns the needle that this finder searches for.","sig":null,"attributes":[{"value":"/ Returns the needle that this finder searches for.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":149581,"byte_end":149634,"line_start":3015,"line_end":3015,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":149639,"byte_end":149642,"line_start":3016,"line_end":3016,"column_start":5,"column_end":8}},{"value":"/ Note that the lifetime of the needle returned is tied to the lifetime","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":149647,"byte_end":149720,"line_start":3017,"line_end":3017,"column_start":5,"column_end":78}},{"value":"/ of the finder, and may be shorter than the `'a` lifetime. Namely, a","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":149725,"byte_end":149796,"line_start":3018,"line_end":3018,"column_start":5,"column_end":76}},{"value":"/ finder's needle can be either borrowed or owned, so the lifetime of the","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":149801,"byte_end":149876,"line_start":3019,"line_end":3019,"column_start":5,"column_end":80}},{"value":"/ needle returned must necessarily be the shorter of the two.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":149881,"byte_end":149944,"line_start":3020,"line_end":3020,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":149949,"byte_end":149958,"line_start":3021,"line_end":3021,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":311},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":151006,"byte_end":151010,"line_start":3054,"line_end":3054,"column_start":12,"column_end":16},"name":"find","qualname":"<Finder>::find","value":"fn <B> (&self, haystack: B) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the index of the first occurrence of this needle in the given\n haystack.","sig":null,"attributes":[{"value":"/ Returns the index of the first occurrence of this needle in the given","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":150037,"byte_end":150110,"line_start":3026,"line_end":3026,"column_start":5,"column_end":78}},{"value":"/ haystack.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":150115,"byte_end":150128,"line_start":3027,"line_end":3027,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":150133,"byte_end":150136,"line_start":3028,"line_end":3028,"column_start":5,"column_end":8}},{"value":"/ The haystack may be any type that can be cheaply converted into a","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":150141,"byte_end":150210,"line_start":3029,"line_end":3029,"column_start":5,"column_end":74}},{"value":"/ `&[u8]`. This includes, but is not limited to, `&str` and `&[u8]`.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":150215,"byte_end":150285,"line_start":3030,"line_end":3030,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":150290,"byte_end":150293,"line_start":3031,"line_end":3031,"column_start":5,"column_end":8}},{"value":"/ # Complexity","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":150298,"byte_end":150314,"line_start":3032,"line_end":3032,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":150319,"byte_end":150322,"line_start":3033,"line_end":3033,"column_start":5,"column_end":8}},{"value":"/ This routine is guaranteed to have worst case linear time complexity","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":150327,"byte_end":150399,"line_start":3034,"line_end":3034,"column_start":5,"column_end":77}},{"value":"/ with respect to both the needle and the haystack. That is, this runs","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":150404,"byte_end":150476,"line_start":3035,"line_end":3035,"column_start":5,"column_end":77}},{"value":"/ in `O(needle.len() + haystack.len())` time.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":150481,"byte_end":150528,"line_start":3036,"line_end":3036,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":150533,"byte_end":150536,"line_start":3037,"line_end":3037,"column_start":5,"column_end":8}},{"value":"/ This routine is also guaranteed to have worst case constant space","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":150541,"byte_end":150610,"line_start":3038,"line_end":3038,"column_start":5,"column_end":74}},{"value":"/ complexity.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":150615,"byte_end":150630,"line_start":3039,"line_end":3039,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":150635,"byte_end":150638,"line_start":3040,"line_end":3040,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":150643,"byte_end":150657,"line_start":3041,"line_end":3041,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":150662,"byte_end":150665,"line_start":3042,"line_end":3042,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":150670,"byte_end":150686,"line_start":3043,"line_end":3043,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":150691,"byte_end":150694,"line_start":3044,"line_end":3044,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":150699,"byte_end":150706,"line_start":3045,"line_end":3045,"column_start":5,"column_end":12}},{"value":"/ use bstr::Finder;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":150711,"byte_end":150732,"line_start":3046,"line_end":3046,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":150737,"byte_end":150740,"line_start":3047,"line_end":3047,"column_start":5,"column_end":8}},{"value":"/ let haystack = \"foo bar baz\";","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":150745,"byte_end":150778,"line_start":3048,"line_end":3048,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(Some(0), Finder::new(\"foo\").find(haystack));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":150783,"byte_end":150842,"line_start":3049,"line_end":3049,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(Some(4), Finder::new(\"bar\").find(haystack));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":150847,"byte_end":150906,"line_start":3050,"line_end":3050,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(None, Finder::new(\"quux\").find(haystack));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":150911,"byte_end":150968,"line_start":3051,"line_end":3051,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":150973,"byte_end":150980,"line_start":3052,"line_end":3052,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":150985,"byte_end":150994,"line_start":3053,"line_end":3053,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1066},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":152064,"byte_end":152077,"line_start":3076,"line_end":3076,"column_start":12,"column_end":25},"name":"FinderReverse","qualname":"::ext_slice::FinderReverse","value":"FinderReverse {  }","parent":null,"children":[{"krate":0,"index":1068}],"decl_id":null,"docs":" A single substring reverse searcher fixed to a particular needle.","sig":null,"attributes":[{"value":"/ A single substring reverse searcher fixed to a particular needle.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":151121,"byte_end":151190,"line_start":3059,"line_end":3059,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":151191,"byte_end":151194,"line_start":3060,"line_end":3060,"column_start":1,"column_end":4}},{"value":"/ The purpose of this type is to permit callers to construct a substring","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":151195,"byte_end":151269,"line_start":3061,"line_end":3061,"column_start":1,"column_end":75}},{"value":"/ searcher that can be used to search haystacks without the overhead of","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":151270,"byte_end":151343,"line_start":3062,"line_end":3062,"column_start":1,"column_end":74}},{"value":"/ constructing the searcher in the first place. This is a somewhat niche","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":151344,"byte_end":151418,"line_start":3063,"line_end":3063,"column_start":1,"column_end":75}},{"value":"/ concern when it's necessary to re-use the same needle to search multiple","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":151419,"byte_end":151495,"line_start":3064,"line_end":3064,"column_start":1,"column_end":77}},{"value":"/ different haystacks with as little overhead as possible. In general, using","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":151496,"byte_end":151574,"line_start":3065,"line_end":3065,"column_start":1,"column_end":79}},{"value":"/ [`ByteSlice::rfind`](trait.ByteSlice.html#method.rfind)","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":151575,"byte_end":151634,"line_start":3066,"line_end":3066,"column_start":1,"column_end":60}},{"value":"/ or","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":151635,"byte_end":151641,"line_start":3067,"line_end":3067,"column_start":1,"column_end":7}},{"value":"/ [`ByteSlice::rfind_iter`](trait.ByteSlice.html#method.rfind_iter)","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":151642,"byte_end":151711,"line_start":3068,"line_end":3068,"column_start":1,"column_end":70}},{"value":"/ is good enough, but `FinderReverse` is useful when you can meaningfully","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":151712,"byte_end":151787,"line_start":3069,"line_end":3069,"column_start":1,"column_end":76}},{"value":"/ observe searcher construction time in a profile.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":151788,"byte_end":151840,"line_start":3070,"line_end":3070,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":151841,"byte_end":151844,"line_start":3071,"line_end":3071,"column_start":1,"column_end":4}},{"value":"/ When the `std` feature is enabled, then this type has an `into_owned`","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":151845,"byte_end":151918,"line_start":3072,"line_end":3072,"column_start":1,"column_end":74}},{"value":"/ version which permits building a `FinderReverse` that is not connected to","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":151919,"byte_end":151996,"line_start":3073,"line_end":3073,"column_start":1,"column_end":78}},{"value":"/ the lifetime of its needle.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":151997,"byte_end":152028,"line_start":3074,"line_end":3074,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":315},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":152225,"byte_end":152228,"line_start":3083,"line_end":3083,"column_start":12,"column_end":15},"name":"new","qualname":"<FinderReverse>::new","value":"fn <B> (needle: &'a B) -> FinderReverse<'a>","parent":null,"children":[],"decl_id":null,"docs":" Create a new reverse finder for the given needle.\n","sig":null,"attributes":[{"value":"/ Create a new reverse finder for the given needle.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":152146,"byte_end":152199,"line_start":3081,"line_end":3081,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":152204,"byte_end":152213,"line_start":3082,"line_end":3082,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":317},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":152715,"byte_end":152725,"line_start":3096,"line_end":3096,"column_start":12,"column_end":22},"name":"into_owned","qualname":"<FinderReverse>::into_owned","value":"fn (self) -> FinderReverse<'static>","parent":null,"children":[],"decl_id":null,"docs":" Convert this finder into its owned variant, such that it no longer\n borrows the needle.","sig":null,"attributes":[{"value":"/ Convert this finder into its owned variant, such that it no longer","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":152372,"byte_end":152442,"line_start":3087,"line_end":3087,"column_start":5,"column_end":75}},{"value":"/ borrows the needle.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":152447,"byte_end":152470,"line_start":3088,"line_end":3088,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":152475,"byte_end":152478,"line_start":3089,"line_end":3089,"column_start":5,"column_end":8}},{"value":"/ If this is already an owned finder, then this is a no-op. Otherwise,","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":152483,"byte_end":152555,"line_start":3090,"line_end":3090,"column_start":5,"column_end":77}},{"value":"/ this copies the needle.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":152560,"byte_end":152587,"line_start":3091,"line_end":3091,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":152592,"byte_end":152595,"line_start":3092,"line_end":3092,"column_start":5,"column_end":8}},{"value":"/ This is only available when the `std` feature is enabled.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":152600,"byte_end":152661,"line_start":3093,"line_end":3093,"column_start":5,"column_end":66}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":152666,"byte_end":152689,"line_start":3094,"line_end":3094,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":152694,"byte_end":152703,"line_start":3095,"line_end":3095,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":318},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":153224,"byte_end":153230,"line_start":3107,"line_end":3107,"column_start":12,"column_end":18},"name":"needle","qualname":"<FinderReverse>::needle","value":"fn (&self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns the needle that this finder searches for.","sig":null,"attributes":[{"value":"/ Returns the needle that this finder searches for.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":152834,"byte_end":152887,"line_start":3100,"line_end":3100,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":152892,"byte_end":152895,"line_start":3101,"line_end":3101,"column_start":5,"column_end":8}},{"value":"/ Note that the lifetime of the needle returned is tied to the lifetime","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":152900,"byte_end":152973,"line_start":3102,"line_end":3102,"column_start":5,"column_end":78}},{"value":"/ of this finder, and may be shorter than the `'a` lifetime. Namely,","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":152978,"byte_end":153048,"line_start":3103,"line_end":3103,"column_start":5,"column_end":75}},{"value":"/ a finder's needle can be either borrowed or owned, so the lifetime of","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":153053,"byte_end":153126,"line_start":3104,"line_end":3104,"column_start":5,"column_end":78}},{"value":"/ the needle returned must necessarily be the shorter of the two.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":153131,"byte_end":153198,"line_start":3105,"line_end":3105,"column_start":5,"column_end":72}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":153203,"byte_end":153212,"line_start":3106,"line_end":3106,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":319},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":154290,"byte_end":154295,"line_start":3139,"line_end":3139,"column_start":12,"column_end":17},"name":"rfind","qualname":"<FinderReverse>::rfind","value":"fn <B> (&self, haystack: B) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the index of the last occurrence of this needle in the given\n haystack.","sig":null,"attributes":[{"value":"/ Returns the index of the last occurrence of this needle in the given","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":153291,"byte_end":153363,"line_start":3111,"line_end":3111,"column_start":5,"column_end":77}},{"value":"/ haystack.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":153368,"byte_end":153381,"line_start":3112,"line_end":3112,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":153386,"byte_end":153389,"line_start":3113,"line_end":3113,"column_start":5,"column_end":8}},{"value":"/ The haystack may be any type that can be cheaply converted into a","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":153394,"byte_end":153463,"line_start":3114,"line_end":3114,"column_start":5,"column_end":74}},{"value":"/ `&[u8]`. This includes, but is not limited to, `&str` and `&[u8]`.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":153468,"byte_end":153538,"line_start":3115,"line_end":3115,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":153543,"byte_end":153546,"line_start":3116,"line_end":3116,"column_start":5,"column_end":8}},{"value":"/ # Complexity","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":153551,"byte_end":153567,"line_start":3117,"line_end":3117,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":153572,"byte_end":153575,"line_start":3118,"line_end":3118,"column_start":5,"column_end":8}},{"value":"/ This routine is guaranteed to have worst case linear time complexity","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":153580,"byte_end":153652,"line_start":3119,"line_end":3119,"column_start":5,"column_end":77}},{"value":"/ with respect to both the needle and the haystack. That is, this runs","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":153657,"byte_end":153729,"line_start":3120,"line_end":3120,"column_start":5,"column_end":77}},{"value":"/ in `O(needle.len() + haystack.len())` time.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":153734,"byte_end":153781,"line_start":3121,"line_end":3121,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":153786,"byte_end":153789,"line_start":3122,"line_end":3122,"column_start":5,"column_end":8}},{"value":"/ This routine is also guaranteed to have worst case constant space","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":153794,"byte_end":153863,"line_start":3123,"line_end":3123,"column_start":5,"column_end":74}},{"value":"/ complexity.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":153868,"byte_end":153883,"line_start":3124,"line_end":3124,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":153888,"byte_end":153891,"line_start":3125,"line_end":3125,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":153896,"byte_end":153910,"line_start":3126,"line_end":3126,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":153915,"byte_end":153918,"line_start":3127,"line_end":3127,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":153923,"byte_end":153939,"line_start":3128,"line_end":3128,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":153944,"byte_end":153947,"line_start":3129,"line_end":3129,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":153952,"byte_end":153959,"line_start":3130,"line_end":3130,"column_start":5,"column_end":12}},{"value":"/ use bstr::FinderReverse;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":153964,"byte_end":153992,"line_start":3131,"line_end":3131,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":153997,"byte_end":154000,"line_start":3132,"line_end":3132,"column_start":5,"column_end":8}},{"value":"/ let haystack = \"foo bar baz\";","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":154005,"byte_end":154038,"line_start":3133,"line_end":3133,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(Some(0), FinderReverse::new(\"foo\").rfind(haystack));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":154043,"byte_end":154110,"line_start":3134,"line_end":3134,"column_start":5,"column_end":72}},{"value":"/ assert_eq!(Some(4), FinderReverse::new(\"bar\").rfind(haystack));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":154115,"byte_end":154182,"line_start":3135,"line_end":3135,"column_start":5,"column_end":72}},{"value":"/ assert_eq!(None, FinderReverse::new(\"quux\").rfind(haystack));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":154187,"byte_end":154252,"line_start":3136,"line_end":3136,"column_start":5,"column_end":70}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":154257,"byte_end":154264,"line_start":3137,"line_end":3137,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":154269,"byte_end":154278,"line_start":3138,"line_end":3138,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1075},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":154678,"byte_end":154682,"line_start":3151,"line_end":3151,"column_start":12,"column_end":16},"name":"Find","qualname":"::ext_slice::Find","value":"Find {  }","parent":null,"children":[{"krate":0,"index":1077},{"krate":0,"index":1078},{"krate":0,"index":1079},{"krate":0,"index":1080}],"decl_id":null,"docs":" An iterator over non-overlapping substring matches.","sig":null,"attributes":[{"value":"/ An iterator over non-overlapping substring matches.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":154407,"byte_end":154462,"line_start":3144,"line_end":3144,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":154463,"byte_end":154466,"line_start":3145,"line_end":3145,"column_start":1,"column_end":4}},{"value":"/ Matches are reported by the byte offset at which they begin.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":154467,"byte_end":154531,"line_start":3146,"line_end":3146,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":154532,"byte_end":154535,"line_start":3147,"line_end":3147,"column_start":1,"column_end":4}},{"value":"/ `'a` is the shorter of two lifetimes: the byte string being searched or the","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":154536,"byte_end":154615,"line_start":3148,"line_end":3148,"column_start":1,"column_end":80}},{"value":"/ byte string being looked for.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":154616,"byte_end":154649,"line_start":3149,"line_end":3149,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":1084},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":155876,"byte_end":155887,"line_start":3195,"line_end":3195,"column_start":12,"column_end":23},"name":"FindReverse","qualname":"::ext_slice::FindReverse","value":"FindReverse {  }","parent":null,"children":[{"krate":0,"index":1086},{"krate":0,"index":1087},{"krate":0,"index":1088},{"krate":0,"index":1089}],"decl_id":null,"docs":" An iterator over non-overlapping substring matches in reverse.","sig":null,"attributes":[{"value":"/ An iterator over non-overlapping substring matches in reverse.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":155594,"byte_end":155660,"line_start":3188,"line_end":3188,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":155661,"byte_end":155664,"line_start":3189,"line_end":3189,"column_start":1,"column_end":4}},{"value":"/ Matches are reported by the byte offset at which they begin.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":155665,"byte_end":155729,"line_start":3190,"line_end":3190,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":155730,"byte_end":155733,"line_start":3191,"line_end":3191,"column_start":1,"column_end":4}},{"value":"/ `'a` is the shorter of two lifetimes: the byte string being searched or the","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":155734,"byte_end":155813,"line_start":3192,"line_end":3192,"column_start":1,"column_end":80}},{"value":"/ byte string being looked for.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":155814,"byte_end":155847,"line_start":3193,"line_end":3193,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":1093},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":157351,"byte_end":157356,"line_start":3251,"line_end":3251,"column_start":12,"column_end":17},"name":"Bytes","qualname":"::ext_slice::Bytes","value":"Bytes {  }","parent":null,"children":[{"krate":0,"index":1095}],"decl_id":null,"docs":" An iterator over the bytes in a byte string.","sig":null,"attributes":[{"value":"/ An iterator over the bytes in a byte string.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":157202,"byte_end":157250,"line_start":3247,"line_end":3247,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":157251,"byte_end":157254,"line_start":3248,"line_end":3248,"column_start":1,"column_end":4}},{"value":"/ `'a` is the lifetime of the byte string being traversed.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":157255,"byte_end":157315,"line_start":3249,"line_end":3249,"column_start":1,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":1102},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":158111,"byte_end":158117,"line_start":3285,"line_end":3285,"column_start":12,"column_end":18},"name":"Fields","qualname":"::ext_slice::Fields","value":"Fields {  }","parent":null,"children":[{"krate":0,"index":1104}],"decl_id":null,"docs":" An iterator over the fields in a byte string, separated by whitespace.","sig":null,"attributes":[{"value":"/ An iterator over the fields in a byte string, separated by whitespace.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":157816,"byte_end":157890,"line_start":3278,"line_end":3278,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":157891,"byte_end":157894,"line_start":3279,"line_end":3279,"column_start":1,"column_end":4}},{"value":"/ This iterator splits on contiguous runs of whitespace, such that the fields","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":157895,"byte_end":157974,"line_start":3280,"line_end":3280,"column_start":1,"column_end":80}},{"value":"/ in `foo\\t\\t\\n  \\nbar` are `foo` and `bar`.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":157975,"byte_end":158021,"line_start":3281,"line_end":3281,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":158022,"byte_end":158025,"line_start":3282,"line_end":3282,"column_start":1,"column_end":4}},{"value":"/ `'a` is the lifetime of the byte string being split.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":158026,"byte_end":158082,"line_start":3283,"line_end":3283,"column_start":1,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":1108},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":158919,"byte_end":158929,"line_start":3314,"line_end":3314,"column_start":12,"column_end":22},"name":"FieldsWith","qualname":"::ext_slice::FieldsWith","value":"FieldsWith {  }","parent":null,"children":[{"krate":0,"index":1111},{"krate":0,"index":1112},{"krate":0,"index":1113}],"decl_id":null,"docs":" An iterator over fields in the byte string, separated by a predicate over\n codepoints.","sig":null,"attributes":[{"value":"/ An iterator over fields in the byte string, separated by a predicate over","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":158463,"byte_end":158540,"line_start":3304,"line_end":3304,"column_start":1,"column_end":78}},{"value":"/ codepoints.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":158541,"byte_end":158556,"line_start":3305,"line_end":3305,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":158557,"byte_end":158560,"line_start":3306,"line_end":3306,"column_start":1,"column_end":4}},{"value":"/ This iterator splits a byte string based on its predicate function such","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":158561,"byte_end":158636,"line_start":3307,"line_end":3307,"column_start":1,"column_end":76}},{"value":"/ that the elements returned are separated by contiguous runs of codepoints","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":158637,"byte_end":158714,"line_start":3308,"line_end":3308,"column_start":1,"column_end":78}},{"value":"/ for which the predicate returns true.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":158715,"byte_end":158756,"line_start":3309,"line_end":3309,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":158757,"byte_end":158760,"line_start":3310,"line_end":3310,"column_start":1,"column_end":4}},{"value":"/ `'a` is the lifetime of the byte string being split, while `F` is the type","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":158761,"byte_end":158839,"line_start":3311,"line_end":3311,"column_start":1,"column_end":79}},{"value":"/ of the predicate, i.e., `FnMut(char) -> bool`.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":158840,"byte_end":158890,"line_start":3312,"line_end":3312,"column_start":1,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":1118},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":160056,"byte_end":160061,"line_start":3358,"line_end":3358,"column_start":12,"column_end":17},"name":"Split","qualname":"::ext_slice::Split","value":"Split {  }","parent":null,"children":[{"krate":0,"index":1120},{"krate":0,"index":1121},{"krate":0,"index":1122}],"decl_id":null,"docs":" An iterator over substrings in a byte string, split by a separator.","sig":null,"attributes":[{"value":"/ An iterator over substrings in a byte string, split by a separator.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":159895,"byte_end":159966,"line_start":3354,"line_end":3354,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":159967,"byte_end":159970,"line_start":3355,"line_end":3355,"column_start":1,"column_end":4}},{"value":"/ `'a` is the lifetime of the byte string being split.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":159971,"byte_end":160027,"line_start":3356,"line_end":3356,"column_start":1,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":1126},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":161884,"byte_end":161896,"line_start":3414,"line_end":3414,"column_start":12,"column_end":24},"name":"SplitReverse","qualname":"::ext_slice::SplitReverse","value":"SplitReverse {  }","parent":null,"children":[{"krate":0,"index":1128},{"krate":0,"index":1129},{"krate":0,"index":1130}],"decl_id":null,"docs":" An iterator over substrings in a byte string, split by a separator, in\n reverse.","sig":null,"attributes":[{"value":"/ An iterator over substrings in a byte string, split by a separator, in","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":161634,"byte_end":161708,"line_start":3408,"line_end":3408,"column_start":1,"column_end":75}},{"value":"/ reverse.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":161709,"byte_end":161721,"line_start":3409,"line_end":3409,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":161722,"byte_end":161725,"line_start":3410,"line_end":3410,"column_start":1,"column_end":4}},{"value":"/ `'a` is the lifetime of the byte string being split, while `F` is the type","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":161726,"byte_end":161804,"line_start":3411,"line_end":3411,"column_start":1,"column_end":79}},{"value":"/ of the predicate, i.e., `FnMut(char) -> bool`.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":161805,"byte_end":161855,"line_start":3412,"line_end":3412,"column_start":1,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":1134},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":163768,"byte_end":163774,"line_start":3471,"line_end":3471,"column_start":12,"column_end":18},"name":"SplitN","qualname":"::ext_slice::SplitN","value":"SplitN {  }","parent":null,"children":[{"krate":0,"index":1136},{"krate":0,"index":1137},{"krate":0,"index":1138}],"decl_id":null,"docs":" An iterator over at most `n` substrings in a byte string, split by a\n separator.","sig":null,"attributes":[{"value":"/ An iterator over at most `n` substrings in a byte string, split by a","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":163518,"byte_end":163590,"line_start":3465,"line_end":3465,"column_start":1,"column_end":73}},{"value":"/ separator.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":163591,"byte_end":163605,"line_start":3466,"line_end":3466,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":163606,"byte_end":163609,"line_start":3467,"line_end":3467,"column_start":1,"column_end":4}},{"value":"/ `'a` is the lifetime of the byte string being split, while `F` is the type","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":163610,"byte_end":163688,"line_start":3468,"line_end":3468,"column_start":1,"column_end":79}},{"value":"/ of the predicate, i.e., `FnMut(char) -> bool`.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":163689,"byte_end":163739,"line_start":3469,"line_end":3469,"column_start":1,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":1142},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":164734,"byte_end":164747,"line_start":3510,"line_end":3510,"column_start":12,"column_end":25},"name":"SplitNReverse","qualname":"::ext_slice::SplitNReverse","value":"SplitNReverse {  }","parent":null,"children":[{"krate":0,"index":1144},{"krate":0,"index":1145},{"krate":0,"index":1146}],"decl_id":null,"docs":" An iterator over at most `n` substrings in a byte string, split by a\n separator, in reverse.","sig":null,"attributes":[{"value":"/ An iterator over at most `n` substrings in a byte string, split by a","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":164472,"byte_end":164544,"line_start":3504,"line_end":3504,"column_start":1,"column_end":73}},{"value":"/ separator, in reverse.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":164545,"byte_end":164571,"line_start":3505,"line_end":3505,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":164572,"byte_end":164575,"line_start":3506,"line_end":3506,"column_start":1,"column_end":4}},{"value":"/ `'a` is the lifetime of the byte string being split, while `F` is the type","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":164576,"byte_end":164654,"line_start":3507,"line_end":3507,"column_start":1,"column_end":79}},{"value":"/ of the predicate, i.e., `FnMut(char) -> bool`.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":164655,"byte_end":164705,"line_start":3508,"line_end":3508,"column_start":1,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":394},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":165728,"byte_end":165733,"line_start":3549,"line_end":3549,"column_start":12,"column_end":17},"name":"Lines","qualname":"::ext_slice::Lines","value":"Lines {  }","parent":null,"children":[{"krate":0,"index":396}],"decl_id":null,"docs":" An iterator over all lines in a byte string, without their terminators.","sig":null,"attributes":[{"value":"/ An iterator over all lines in a byte string, without their terminators.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":165483,"byte_end":165558,"line_start":3543,"line_end":3543,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":165559,"byte_end":165562,"line_start":3544,"line_end":3544,"column_start":1,"column_end":4}},{"value":"/ For this iterator, the only line terminators recognized are `\\r\\n` and","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":165563,"byte_end":165637,"line_start":3545,"line_end":3545,"column_start":1,"column_end":75}},{"value":"/ `\\n`.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":165638,"byte_end":165647,"line_start":3546,"line_end":3546,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":165648,"byte_end":165651,"line_start":3547,"line_end":3547,"column_start":1,"column_end":4}},{"value":"/ `'a` is the lifetime of the byte string being iterated over.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":165652,"byte_end":165716,"line_start":3548,"line_end":3548,"column_start":1,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":404},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":166906,"byte_end":166925,"line_start":3588,"line_end":3588,"column_start":12,"column_end":31},"name":"LinesWithTerminator","qualname":"::ext_slice::LinesWithTerminator","value":"LinesWithTerminator {  }","parent":null,"children":[{"krate":0,"index":406}],"decl_id":null,"docs":" An iterator over all lines in a byte string, including their terminators.","sig":null,"attributes":[{"value":"/ An iterator over all lines in a byte string, including their terminators.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":166301,"byte_end":166378,"line_start":3575,"line_end":3575,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":166379,"byte_end":166382,"line_start":3576,"line_end":3576,"column_start":1,"column_end":4}},{"value":"/ For this iterator, the only line terminator recognized is `\\n`. (Since","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":166383,"byte_end":166457,"line_start":3577,"line_end":3577,"column_start":1,"column_end":75}},{"value":"/ line terminators are included, this also handles `\\r\\n` line endings.)","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":166458,"byte_end":166532,"line_start":3578,"line_end":3578,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":166533,"byte_end":166536,"line_start":3579,"line_end":3579,"column_start":1,"column_end":4}},{"value":"/ Line terminators are only included if they are present in the original","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":166537,"byte_end":166611,"line_start":3580,"line_end":3580,"column_start":1,"column_end":75}},{"value":"/ byte string. For example, the last line in a byte string may not end with","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":166612,"byte_end":166689,"line_start":3581,"line_end":3581,"column_start":1,"column_end":78}},{"value":"/ a line terminator.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":166690,"byte_end":166712,"line_start":3582,"line_end":3582,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":166713,"byte_end":166716,"line_start":3583,"line_end":3583,"column_start":1,"column_end":4}},{"value":"/ Concatenating all elements yielded by this iterator is guaranteed to yield","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":166717,"byte_end":166795,"line_start":3584,"line_end":3584,"column_start":1,"column_end":79}},{"value":"/ the original byte string.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":166796,"byte_end":166825,"line_start":3585,"line_end":3585,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":166826,"byte_end":166829,"line_start":3586,"line_end":3586,"column_start":1,"column_end":4}},{"value":"/ `'a` is the lifetime of the byte string being iterated over.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":166830,"byte_end":166894,"line_start":3587,"line_end":3587,"column_start":1,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":433},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":169847,"byte_end":169853,"line_start":34,"line_end":34,"column_start":8,"column_end":14},"name":"concat","qualname":"::ext_vec::concat","value":"fn <T, I> (elements: I) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Concatenate the elements given by the iterator together into a single\n `Vec<u8>`.","sig":null,"attributes":[{"value":"/ Concatenate the elements given by the iterator together into a single","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":169408,"byte_end":169481,"line_start":17,"line_end":17,"column_start":1,"column_end":74}},{"value":"/ `Vec<u8>`.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":169482,"byte_end":169496,"line_start":18,"line_end":18,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":169497,"byte_end":169500,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ The elements may be any type that can be cheaply converted into an `&[u8]`.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":169501,"byte_end":169580,"line_start":20,"line_end":20,"column_start":1,"column_end":80}},{"value":"/ This includes, but is not limited to, `&str`, `&BStr` and `&[u8]` itself.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":169581,"byte_end":169658,"line_start":21,"line_end":21,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":169659,"byte_end":169662,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":169663,"byte_end":169677,"line_start":23,"line_end":23,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":169678,"byte_end":169681,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":169682,"byte_end":169698,"line_start":25,"line_end":25,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":169699,"byte_end":169702,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":169703,"byte_end":169710,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"/ use bstr;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":169711,"byte_end":169724,"line_start":28,"line_end":28,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":169725,"byte_end":169728,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ let s = bstr::concat(&[\"foo\", \"bar\", \"baz\"]);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":169729,"byte_end":169778,"line_start":30,"line_end":30,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(s, \"foobarbaz\".as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":169779,"byte_end":169821,"line_start":31,"line_end":31,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":169822,"byte_end":169829,"line_start":32,"line_end":32,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":169830,"byte_end":169839,"line_start":33,"line_end":33,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":436},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":170530,"byte_end":170534,"line_start":64,"line_end":64,"column_start":8,"column_end":12},"name":"join","qualname":"::ext_vec::join","value":"fn <B, T, I> (separator: B, elements: I) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Join the elements given by the iterator with the given separator into a\n single `Vec<u8>`.","sig":null,"attributes":[{"value":"/ Join the elements given by the iterator with the given separator into a","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":170050,"byte_end":170125,"line_start":46,"line_end":46,"column_start":1,"column_end":76}},{"value":"/ single `Vec<u8>`.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":170126,"byte_end":170147,"line_start":47,"line_end":47,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":170148,"byte_end":170151,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ Both the separator and the elements may be any type that can be cheaply","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":170152,"byte_end":170227,"line_start":49,"line_end":49,"column_start":1,"column_end":76}},{"value":"/ converted into an `&[u8]`. This includes, but is not limited to,","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":170228,"byte_end":170296,"line_start":50,"line_end":50,"column_start":1,"column_end":69}},{"value":"/ `&str`, `&BStr` and `&[u8]` itself.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":170297,"byte_end":170336,"line_start":51,"line_end":51,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":170337,"byte_end":170340,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":170341,"byte_end":170355,"line_start":53,"line_end":53,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":170356,"byte_end":170359,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":170360,"byte_end":170376,"line_start":55,"line_end":55,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":170377,"byte_end":170380,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":170381,"byte_end":170388,"line_start":57,"line_end":57,"column_start":1,"column_end":8}},{"value":"/ use bstr;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":170389,"byte_end":170402,"line_start":58,"line_end":58,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":170403,"byte_end":170406,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ let s = bstr::join(\",\", &[\"foo\", \"bar\", \"baz\"]);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":170407,"byte_end":170459,"line_start":60,"line_end":60,"column_start":1,"column_end":53}},{"value":"/ assert_eq!(s, \"foo,bar,baz\".as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":170460,"byte_end":170504,"line_start":61,"line_end":61,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":170505,"byte_end":170512,"line_start":62,"line_end":62,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":170513,"byte_end":170522,"line_start":63,"line_end":63,"column_start":1,"column_end":10}}]},{"kind":"Trait","id":{"krate":0,"index":444},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":171327,"byte_end":171333,"line_start":104,"line_end":104,"column_start":11,"column_end":17},"name":"Sealed","qualname":"::ext_vec::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":" Ensure that callers cannot implement `ByteSlice` by making an\n umplementable trait its super trait.\n","sig":null,"attributes":[{"value":"/ Ensure that callers cannot implement `ByteSlice` by making an","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":171210,"byte_end":171275,"line_start":102,"line_end":102,"column_start":1,"column_end":66}},{"value":"/ umplementable trait its super trait.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":171276,"byte_end":171316,"line_start":103,"line_end":103,"column_start":1,"column_end":41}}]},{"kind":"Trait","id":{"krate":0,"index":446},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":171753,"byte_end":171760,"line_start":119,"line_end":119,"column_start":11,"column_end":18},"name":"ByteVec","qualname":"::ext_vec::ByteVec","value":"ByteVec: Sealed","parent":null,"children":[{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":449},{"krate":0,"index":450},{"krate":0,"index":452},{"krate":0,"index":455},{"krate":0,"index":460},{"krate":0,"index":461},{"krate":0,"index":463},{"krate":0,"index":464},{"krate":0,"index":466},{"krate":0,"index":468},{"krate":0,"index":469},{"krate":0,"index":470},{"krate":0,"index":471},{"krate":0,"index":474},{"krate":0,"index":477},{"krate":0,"index":478},{"krate":0,"index":479},{"krate":0,"index":480},{"krate":0,"index":481},{"krate":0,"index":482},{"krate":0,"index":484},{"krate":0,"index":486},{"krate":0,"index":489}],"decl_id":null,"docs":" A trait that extends `Vec<u8>` with string oriented methods.","sig":null,"attributes":[{"value":"/ A trait that extends `Vec<u8>` with string oriented methods.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":171365,"byte_end":171429,"line_start":107,"line_end":107,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":171430,"byte_end":171433,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ Note that when using the constructor methods, such as","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":171434,"byte_end":171491,"line_start":109,"line_end":109,"column_start":1,"column_end":58}},{"value":"/ `ByteVec::from_slice`, one should actually call them using the concrete","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":171492,"byte_end":171567,"line_start":110,"line_end":110,"column_start":1,"column_end":76}},{"value":"/ type. For example:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":171568,"byte_end":171590,"line_start":111,"line_end":111,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":171591,"byte_end":171594,"line_start":112,"line_end":112,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":171595,"byte_end":171602,"line_start":113,"line_end":113,"column_start":1,"column_end":8}},{"value":"/ use bstr::{B, ByteVec};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":171603,"byte_end":171630,"line_start":114,"line_end":114,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":171631,"byte_end":171634,"line_start":115,"line_end":115,"column_start":1,"column_end":4}},{"value":"/ let s = Vec::from_slice(b\"abc\"); // NOT ByteVec::from_slice(\"...\")","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":171635,"byte_end":171705,"line_start":116,"line_end":116,"column_start":1,"column_end":71}},{"value":"/ assert_eq!(s, B(\"abc\"));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":171706,"byte_end":171734,"line_start":117,"line_end":117,"column_start":1,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":171735,"byte_end":171742,"line_start":118,"line_end":118,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":447},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":171993,"byte_end":171999,"line_start":124,"line_end":124,"column_start":8,"column_end":14},"name":"as_vec","qualname":"::ext_vec::ByteVec::as_vec","value":"fn (&self) -> &Vec<u8>","parent":{"krate":0,"index":446},"children":[],"decl_id":null,"docs":" A method for accessing the raw vector bytes of this type. This is\n always a no-op and callers shouldn't care about it. This only exists\n for making the extension trait work.\n","sig":null,"attributes":[{"value":"/ A method for accessing the raw vector bytes of this type. This is","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":171775,"byte_end":171844,"line_start":120,"line_end":120,"column_start":5,"column_end":74}},{"value":"/ always a no-op and callers shouldn't care about it. This only exists","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":171849,"byte_end":171921,"line_start":121,"line_end":121,"column_start":5,"column_end":77}},{"value":"/ for making the extension trait work.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":171926,"byte_end":171966,"line_start":122,"line_end":122,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":448},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":172252,"byte_end":172262,"line_start":130,"line_end":130,"column_start":8,"column_end":18},"name":"as_vec_mut","qualname":"::ext_vec::ByteVec::as_vec_mut","value":"fn (&mut self) -> &mut Vec<u8>","parent":{"krate":0,"index":446},"children":[],"decl_id":null,"docs":" A method for accessing the raw vector bytes of this type, mutably. This\n is always a no-op and callers shouldn't care about it. This only exists\n for making the extension trait work.\n","sig":null,"attributes":[{"value":"/ A method for accessing the raw vector bytes of this type, mutably. This","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":172025,"byte_end":172100,"line_start":126,"line_end":126,"column_start":5,"column_end":80}},{"value":"/ is always a no-op and callers shouldn't care about it. This only exists","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":172105,"byte_end":172180,"line_start":127,"line_end":127,"column_start":5,"column_end":80}},{"value":"/ for making the extension trait work.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":172185,"byte_end":172225,"line_start":128,"line_end":128,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":449},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":172505,"byte_end":172513,"line_start":136,"line_end":136,"column_start":8,"column_end":16},"name":"into_vec","qualname":"::ext_vec::ByteVec::into_vec","value":"fn (self) -> Vec<u8>","parent":{"krate":0,"index":446},"children":[],"decl_id":null,"docs":" A method for consuming ownership of this vector. This is always a no-op\n and callers shouldn't care about it. This only exists for making the\n extension trait work.\n","sig":null,"attributes":[{"value":"/ A method for consuming ownership of this vector. This is always a no-op","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":172296,"byte_end":172371,"line_start":132,"line_end":132,"column_start":5,"column_end":80}},{"value":"/ and callers shouldn't care about it. This only exists for making the","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":172376,"byte_end":172448,"line_start":133,"line_end":133,"column_start":5,"column_end":77}},{"value":"/ extension trait work.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":172453,"byte_end":172478,"line_start":134,"line_end":134,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":450},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":172838,"byte_end":172848,"line_start":152,"line_end":152,"column_start":8,"column_end":18},"name":"from_slice","qualname":"::ext_vec::ByteVec::from_slice","value":"fn <B> (bytes: B) -> Vec<u8>","parent":{"krate":0,"index":446},"children":[],"decl_id":null,"docs":" Create a new owned byte string from the given byte slice.","sig":null,"attributes":[{"value":"/ Create a new owned byte string from the given byte slice.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":172567,"byte_end":172628,"line_start":140,"line_end":140,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":172633,"byte_end":172636,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":172641,"byte_end":172655,"line_start":142,"line_end":142,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":172660,"byte_end":172663,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":172668,"byte_end":172684,"line_start":144,"line_end":144,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":172689,"byte_end":172692,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":172697,"byte_end":172704,"line_start":146,"line_end":146,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteVec};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":172709,"byte_end":172736,"line_start":147,"line_end":147,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":172741,"byte_end":172744,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ let s = Vec::from_slice(b\"abc\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":172749,"byte_end":172785,"line_start":149,"line_end":149,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(s, B(\"abc\"));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":172790,"byte_end":172818,"line_start":150,"line_end":150,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":172823,"byte_end":172830,"line_start":151,"line_end":151,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":452},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":173475,"byte_end":173489,"line_start":175,"line_end":175,"column_start":8,"column_end":22},"name":"from_os_string","qualname":"::ext_vec::ByteVec::from_os_string","value":"fn (os_str: OsString) -> Result<Vec<u8>, OsString>","parent":{"krate":0,"index":446},"children":[],"decl_id":null,"docs":" Create a new byte string from an owned OS string.","sig":null,"attributes":[{"value":"/ Create a new byte string from an owned OS string.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":172931,"byte_end":172984,"line_start":156,"line_end":156,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":172989,"byte_end":172992,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ On Unix, this always succeeds and is zero cost. On non-Unix systems,","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":172997,"byte_end":173069,"line_start":158,"line_end":158,"column_start":5,"column_end":77}},{"value":"/ this returns the original OS string if it is not valid UTF-8.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":173074,"byte_end":173139,"line_start":159,"line_end":159,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":173144,"byte_end":173147,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":173152,"byte_end":173166,"line_start":161,"line_end":161,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":173171,"byte_end":173174,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":173179,"byte_end":173195,"line_start":163,"line_end":163,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":173200,"byte_end":173203,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":173208,"byte_end":173215,"line_start":165,"line_end":165,"column_start":5,"column_end":12}},{"value":"/ use std::ffi::OsString;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":173220,"byte_end":173247,"line_start":166,"line_end":166,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":173252,"byte_end":173255,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ use bstr::{B, ByteVec};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":173260,"byte_end":173287,"line_start":168,"line_end":168,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":173292,"byte_end":173295,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ let os_str = OsString::from(\"foo\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":173300,"byte_end":173339,"line_start":170,"line_end":170,"column_start":5,"column_end":44}},{"value":"/ let bs = Vec::from_os_string(os_str).expect(\"valid UTF-8\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":173344,"byte_end":173407,"line_start":171,"line_end":171,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(bs, B(\"foo\"));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":173412,"byte_end":173441,"line_start":172,"line_end":172,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":173446,"byte_end":173453,"line_start":173,"line_end":173,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":173458,"byte_end":173467,"line_start":174,"line_end":174,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":455},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":174636,"byte_end":174653,"line_start":214,"line_end":214,"column_start":8,"column_end":25},"name":"from_os_str_lossy","qualname":"::ext_vec::ByteVec::from_os_str_lossy","value":"fn <'a> (os_str: &'a OsStr) -> Cow<'a, [u8]>","parent":{"krate":0,"index":446},"children":[],"decl_id":null,"docs":" Lossily create a new byte string from an OS string slice.","sig":null,"attributes":[{"value":"/ Lossily create a new byte string from an OS string slice.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":173946,"byte_end":174007,"line_start":193,"line_end":193,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":174012,"byte_end":174015,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ On Unix, this always succeeds, is zero cost and always returns a slice.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":174020,"byte_end":174095,"line_start":195,"line_end":195,"column_start":5,"column_end":80}},{"value":"/ On non-Unix systems, this does a UTF-8 check. If the given OS string","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":174100,"byte_end":174172,"line_start":196,"line_end":196,"column_start":5,"column_end":77}},{"value":"/ slice is not valid UTF-8, then it is lossily decoded into valid UTF-8","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":174177,"byte_end":174250,"line_start":197,"line_end":197,"column_start":5,"column_end":78}},{"value":"/ (with invalid bytes replaced by the Unicode replacement codepoint).","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":174255,"byte_end":174326,"line_start":198,"line_end":198,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":174331,"byte_end":174334,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":174339,"byte_end":174353,"line_start":200,"line_end":200,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":174358,"byte_end":174361,"line_start":201,"line_end":201,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":174366,"byte_end":174382,"line_start":202,"line_end":202,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":174387,"byte_end":174390,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":174395,"byte_end":174402,"line_start":204,"line_end":204,"column_start":5,"column_end":12}},{"value":"/ use std::ffi::OsStr;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":174407,"byte_end":174431,"line_start":205,"line_end":205,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":174436,"byte_end":174439,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ use bstr::{B, ByteVec};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":174444,"byte_end":174471,"line_start":207,"line_end":207,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":174476,"byte_end":174479,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ let os_str = OsStr::new(\"foo\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":174484,"byte_end":174519,"line_start":209,"line_end":209,"column_start":5,"column_end":40}},{"value":"/ let bs = Vec::from_os_str_lossy(os_str);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":174524,"byte_end":174568,"line_start":210,"line_end":210,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(bs, B(\"foo\"));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":174573,"byte_end":174602,"line_start":211,"line_end":211,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":174607,"byte_end":174614,"line_start":212,"line_end":212,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":174619,"byte_end":174628,"line_start":213,"line_end":213,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":460},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":175762,"byte_end":175775,"line_start":254,"line_end":254,"column_start":8,"column_end":21},"name":"from_path_buf","qualname":"::ext_vec::ByteVec::from_path_buf","value":"fn (path: PathBuf) -> Result<Vec<u8>, PathBuf>","parent":{"krate":0,"index":446},"children":[],"decl_id":null,"docs":" Create a new byte string from an owned file path.","sig":null,"attributes":[{"value":"/ Create a new byte string from an owned file path.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":175221,"byte_end":175274,"line_start":235,"line_end":235,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":175279,"byte_end":175282,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ On Unix, this always succeeds and is zero cost. On non-Unix systems,","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":175287,"byte_end":175359,"line_start":237,"line_end":237,"column_start":5,"column_end":77}},{"value":"/ this returns the original path if it is not valid UTF-8.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":175364,"byte_end":175424,"line_start":238,"line_end":238,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":175429,"byte_end":175432,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":175437,"byte_end":175451,"line_start":240,"line_end":240,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":175456,"byte_end":175459,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":175464,"byte_end":175480,"line_start":242,"line_end":242,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":175485,"byte_end":175488,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":175493,"byte_end":175500,"line_start":244,"line_end":244,"column_start":5,"column_end":12}},{"value":"/ use std::path::PathBuf;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":175505,"byte_end":175532,"line_start":245,"line_end":245,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":175537,"byte_end":175540,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ use bstr::{B, ByteVec};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":175545,"byte_end":175572,"line_start":247,"line_end":247,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":175577,"byte_end":175580,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ let path = PathBuf::from(\"foo\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":175585,"byte_end":175621,"line_start":249,"line_end":249,"column_start":5,"column_end":41}},{"value":"/ let bs = Vec::from_path_buf(path).expect(\"must be valid UTF-8\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":175626,"byte_end":175694,"line_start":250,"line_end":250,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(bs, B(\"foo\"));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":175699,"byte_end":175728,"line_start":251,"line_end":251,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":175733,"byte_end":175740,"line_start":252,"line_end":252,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":175745,"byte_end":175754,"line_start":253,"line_end":253,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":461},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":176571,"byte_end":176586,"line_start":279,"line_end":279,"column_start":8,"column_end":23},"name":"from_path_lossy","qualname":"::ext_vec::ByteVec::from_path_lossy","value":"fn <'a> (path: &'a Path) -> Cow<'a, [u8]>","parent":{"krate":0,"index":446},"children":[],"decl_id":null,"docs":" Lossily create a new byte string from a file path.","sig":null,"attributes":[{"value":"/ Lossily create a new byte string from a file path.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":175906,"byte_end":175960,"line_start":258,"line_end":258,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":175965,"byte_end":175968,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ On Unix, this always succeeds, is zero cost and always returns a slice.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":175973,"byte_end":176048,"line_start":260,"line_end":260,"column_start":5,"column_end":80}},{"value":"/ On non-Unix systems, this does a UTF-8 check. If the given path is not","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":176053,"byte_end":176127,"line_start":261,"line_end":261,"column_start":5,"column_end":79}},{"value":"/ valid UTF-8, then it is lossily decoded into valid UTF-8 (with invalid","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":176132,"byte_end":176206,"line_start":262,"line_end":262,"column_start":5,"column_end":79}},{"value":"/ bytes replaced by the Unicode replacement codepoint).","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":176211,"byte_end":176268,"line_start":263,"line_end":263,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":176273,"byte_end":176276,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":176281,"byte_end":176295,"line_start":265,"line_end":265,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":176300,"byte_end":176303,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":176308,"byte_end":176324,"line_start":267,"line_end":267,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":176329,"byte_end":176332,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":176337,"byte_end":176344,"line_start":269,"line_end":269,"column_start":5,"column_end":12}},{"value":"/ use std::path::Path;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":176349,"byte_end":176373,"line_start":270,"line_end":270,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":176378,"byte_end":176381,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ use bstr::{B, ByteVec};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":176386,"byte_end":176413,"line_start":272,"line_end":272,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":176418,"byte_end":176421,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ let path = Path::new(\"foo\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":176426,"byte_end":176458,"line_start":274,"line_end":274,"column_start":5,"column_end":37}},{"value":"/ let bs = Vec::from_path_lossy(path);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":176463,"byte_end":176503,"line_start":275,"line_end":275,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(bs, B(\"foo\"));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":176508,"byte_end":176537,"line_start":276,"line_end":276,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":176542,"byte_end":176549,"line_start":277,"line_end":277,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":176554,"byte_end":176563,"line_start":278,"line_end":278,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":463},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":177280,"byte_end":177289,"line_start":303,"line_end":303,"column_start":8,"column_end":17},"name":"push_byte","qualname":"::ext_vec::ByteVec::push_byte","value":"fn (&mut self, byte: u8) -> ()","parent":{"krate":0,"index":446},"children":[],"decl_id":null,"docs":" Appends the given byte to the end of this byte string.","sig":null,"attributes":[{"value":"/ Appends the given byte to the end of this byte string.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":176686,"byte_end":176744,"line_start":283,"line_end":283,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":176749,"byte_end":176752,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ Note that this is equivalent to the generic `Vec::push` method. This","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":176757,"byte_end":176829,"line_start":285,"line_end":285,"column_start":5,"column_end":77}},{"value":"/ method is provided to permit callers to explicitly differentiate","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":176834,"byte_end":176902,"line_start":286,"line_end":286,"column_start":5,"column_end":73}},{"value":"/ between pushing bytes, codepoints and strings.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":176907,"byte_end":176957,"line_start":287,"line_end":287,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":176962,"byte_end":176965,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":176970,"byte_end":176984,"line_start":289,"line_end":289,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":176989,"byte_end":176992,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":176997,"byte_end":177013,"line_start":291,"line_end":291,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":177018,"byte_end":177021,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":177026,"byte_end":177033,"line_start":293,"line_end":293,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":177038,"byte_end":177060,"line_start":294,"line_end":294,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":177065,"byte_end":177068,"line_start":295,"line_end":295,"column_start":5,"column_end":8}},{"value":"/ let mut s = <Vec<u8>>::from(\"abc\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":177073,"byte_end":177112,"line_start":296,"line_end":296,"column_start":5,"column_end":44}},{"value":"/ s.push_byte(b'\\xE2');","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":177117,"byte_end":177142,"line_start":297,"line_end":297,"column_start":5,"column_end":30}},{"value":"/ s.push_byte(b'\\x98');","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":177147,"byte_end":177172,"line_start":298,"line_end":298,"column_start":5,"column_end":30}},{"value":"/ s.push_byte(b'\\x83');","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":177177,"byte_end":177202,"line_start":299,"line_end":299,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(s, \"abc☃\".as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":177207,"byte_end":177246,"line_start":300,"line_end":300,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":177251,"byte_end":177258,"line_start":301,"line_end":301,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":177263,"byte_end":177272,"line_start":302,"line_end":302,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":464},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":177733,"byte_end":177742,"line_start":323,"line_end":323,"column_start":8,"column_end":17},"name":"push_char","qualname":"::ext_vec::ByteVec::push_char","value":"fn (&mut self, ch: char) -> ()","parent":{"krate":0,"index":446},"children":[],"decl_id":null,"docs":" Appends the given `char` to the end of this byte string.","sig":null,"attributes":[{"value":"/ Appends the given `char` to the end of this byte string.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":177362,"byte_end":177422,"line_start":307,"line_end":307,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":177427,"byte_end":177430,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":177435,"byte_end":177449,"line_start":309,"line_end":309,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":177454,"byte_end":177457,"line_start":310,"line_end":310,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":177462,"byte_end":177478,"line_start":311,"line_end":311,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":177483,"byte_end":177486,"line_start":312,"line_end":312,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":177491,"byte_end":177498,"line_start":313,"line_end":313,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":177503,"byte_end":177525,"line_start":314,"line_end":314,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":177530,"byte_end":177533,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/ let mut s = <Vec<u8>>::from(\"abc\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":177538,"byte_end":177577,"line_start":316,"line_end":316,"column_start":5,"column_end":44}},{"value":"/ s.push_char('1');","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":177582,"byte_end":177603,"line_start":317,"line_end":317,"column_start":5,"column_end":26}},{"value":"/ s.push_char('2');","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":177608,"byte_end":177629,"line_start":318,"line_end":318,"column_start":5,"column_end":26}},{"value":"/ s.push_char('3');","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":177634,"byte_end":177655,"line_start":319,"line_end":319,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(s, \"abc123\".as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":177660,"byte_end":177699,"line_start":320,"line_end":320,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":177704,"byte_end":177711,"line_start":321,"line_end":321,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":177716,"byte_end":177725,"line_start":322,"line_end":322,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":466},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":178451,"byte_end":178459,"line_start":348,"line_end":348,"column_start":8,"column_end":16},"name":"push_str","qualname":"::ext_vec::ByteVec::push_str","value":"fn <B> (&mut self, bytes: B) -> ()","parent":{"krate":0,"index":446},"children":[],"decl_id":null,"docs":" Appends the given slice to the end of this byte string. This accepts\n any type that be converted to a `&[u8]`. This includes, but is not\n limited to, `&str`, `&BStr`, and of course, `&[u8]` itself.","sig":null,"attributes":[{"value":"/ Appends the given slice to the end of this byte string. This accepts","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":177975,"byte_end":178047,"line_start":332,"line_end":332,"column_start":5,"column_end":77}},{"value":"/ any type that be converted to a `&[u8]`. This includes, but is not","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":178052,"byte_end":178122,"line_start":333,"line_end":333,"column_start":5,"column_end":75}},{"value":"/ limited to, `&str`, `&BStr`, and of course, `&[u8]` itself.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":178127,"byte_end":178190,"line_start":334,"line_end":334,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":178195,"byte_end":178198,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":178203,"byte_end":178217,"line_start":336,"line_end":336,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":178222,"byte_end":178225,"line_start":337,"line_end":337,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":178230,"byte_end":178246,"line_start":338,"line_end":338,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":178251,"byte_end":178254,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":178259,"byte_end":178266,"line_start":340,"line_end":340,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":178271,"byte_end":178293,"line_start":341,"line_end":341,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":178298,"byte_end":178301,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ let mut s = <Vec<u8>>::from(\"abc\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":178306,"byte_end":178345,"line_start":343,"line_end":343,"column_start":5,"column_end":44}},{"value":"/ s.push_str(b\"123\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":178350,"byte_end":178373,"line_start":344,"line_end":344,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(s, \"abc123\".as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":178378,"byte_end":178417,"line_start":345,"line_end":345,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":178422,"byte_end":178429,"line_start":346,"line_end":346,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":178434,"byte_end":178443,"line_start":347,"line_end":347,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":468},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":179975,"byte_end":179986,"line_start":393,"line_end":393,"column_start":8,"column_end":19},"name":"into_string","qualname":"::ext_vec::ByteVec::into_string","value":"fn (self) -> Result<String, FromUtf8Error>","parent":{"krate":0,"index":446},"children":[],"decl_id":null,"docs":" Converts a `Vec<u8>` into a `String` if and only if this byte string is\n valid UTF-8.","sig":null,"attributes":[{"value":"/ Converts a `Vec<u8>` into a `String` if and only if this byte string is","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":178571,"byte_end":178646,"line_start":352,"line_end":352,"column_start":5,"column_end":80}},{"value":"/ valid UTF-8.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":178651,"byte_end":178667,"line_start":353,"line_end":353,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":178672,"byte_end":178675,"line_start":354,"line_end":354,"column_start":5,"column_end":8}},{"value":"/ If it is not valid UTF-8, then a","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":178680,"byte_end":178716,"line_start":355,"line_end":355,"column_start":5,"column_end":41}},{"value":"/ [`FromUtf8Error`](struct.FromUtf8Error.html)","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":178721,"byte_end":178769,"line_start":356,"line_end":356,"column_start":5,"column_end":53}},{"value":"/ is returned. (This error can be used to examine why UTF-8 validation","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":178774,"byte_end":178846,"line_start":357,"line_end":357,"column_start":5,"column_end":77}},{"value":"/ failed, or to regain the original byte string.)","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":178851,"byte_end":178902,"line_start":358,"line_end":358,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":178907,"byte_end":178910,"line_start":359,"line_end":359,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":178915,"byte_end":178929,"line_start":360,"line_end":360,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":178934,"byte_end":178937,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":178942,"byte_end":178958,"line_start":362,"line_end":362,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":178963,"byte_end":178966,"line_start":363,"line_end":363,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":178971,"byte_end":178978,"line_start":364,"line_end":364,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":178983,"byte_end":179005,"line_start":365,"line_end":365,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":179010,"byte_end":179013,"line_start":366,"line_end":366,"column_start":5,"column_end":8}},{"value":"/ # fn example() -> Result<(), Box<dyn std::error::Error>> {","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":179018,"byte_end":179080,"line_start":367,"line_end":367,"column_start":5,"column_end":67}},{"value":"/ let bytes = Vec::from(\"hello\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":179085,"byte_end":179120,"line_start":368,"line_end":368,"column_start":5,"column_end":40}},{"value":"/ let string = bytes.into_string()?;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":179125,"byte_end":179163,"line_start":369,"line_end":369,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":179168,"byte_end":179171,"line_start":370,"line_end":370,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(\"hello\", string);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":179176,"byte_end":179208,"line_start":371,"line_end":371,"column_start":5,"column_end":37}},{"value":"/ # Ok(()) }; example().unwrap()","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":179213,"byte_end":179247,"line_start":372,"line_end":372,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":179252,"byte_end":179259,"line_start":373,"line_end":373,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":179264,"byte_end":179267,"line_start":374,"line_end":374,"column_start":5,"column_end":8}},{"value":"/ If this byte string is not valid UTF-8, then an error will be returned.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":179272,"byte_end":179347,"line_start":375,"line_end":375,"column_start":5,"column_end":80}},{"value":"/ That error can then be used to inspect the location at which invalid","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":179352,"byte_end":179424,"line_start":376,"line_end":376,"column_start":5,"column_end":77}},{"value":"/ UTF-8 was found, or to regain the original byte string:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":179429,"byte_end":179488,"line_start":377,"line_end":377,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":179493,"byte_end":179496,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":179501,"byte_end":179508,"line_start":379,"line_end":379,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteVec};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":179513,"byte_end":179540,"line_start":380,"line_end":380,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":179545,"byte_end":179548,"line_start":381,"line_end":381,"column_start":5,"column_end":8}},{"value":"/ let bytes = Vec::from_slice(b\"foo\\xFFbar\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":179553,"byte_end":179600,"line_start":382,"line_end":382,"column_start":5,"column_end":52}},{"value":"/ let err = bytes.into_string().unwrap_err();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":179605,"byte_end":179652,"line_start":383,"line_end":383,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":179657,"byte_end":179660,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(err.utf8_error().valid_up_to(), 3);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":179665,"byte_end":179715,"line_start":385,"line_end":385,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(err.utf8_error().error_len(), Some(1));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":179720,"byte_end":179774,"line_start":386,"line_end":386,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":179779,"byte_end":179782,"line_start":387,"line_end":387,"column_start":5,"column_end":8}},{"value":"/ // At no point in this example is an allocation performed.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":179787,"byte_end":179849,"line_start":388,"line_end":388,"column_start":5,"column_end":67}},{"value":"/ let bytes = Vec::from(err.into_vec());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":179854,"byte_end":179896,"line_start":389,"line_end":389,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(bytes, B(b\"foo\\xFFbar\"));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":179901,"byte_end":179941,"line_start":390,"line_end":390,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":179946,"byte_end":179953,"line_start":391,"line_end":391,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":179958,"byte_end":179967,"line_start":392,"line_end":392,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":469},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":180896,"byte_end":180913,"line_start":423,"line_end":423,"column_start":8,"column_end":25},"name":"into_string_lossy","qualname":"::ext_vec::ByteVec::into_string_lossy","value":"fn (self) -> String","parent":{"krate":0,"index":446},"children":[],"decl_id":null,"docs":" Lossily converts a `Vec<u8>` into a `String`. If this byte string\n contains invalid UTF-8, then the invalid bytes are replaced with the\n Unicode replacement codepoint.","sig":null,"attributes":[{"value":"/ Lossily converts a `Vec<u8>` into a `String`. If this byte string","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":180420,"byte_end":180489,"line_start":407,"line_end":407,"column_start":5,"column_end":74}},{"value":"/ contains invalid UTF-8, then the invalid bytes are replaced with the","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":180494,"byte_end":180566,"line_start":408,"line_end":408,"column_start":5,"column_end":77}},{"value":"/ Unicode replacement codepoint.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":180571,"byte_end":180605,"line_start":409,"line_end":409,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":180610,"byte_end":180613,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":180618,"byte_end":180632,"line_start":411,"line_end":411,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":180637,"byte_end":180640,"line_start":412,"line_end":412,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":180645,"byte_end":180661,"line_start":413,"line_end":413,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":180666,"byte_end":180669,"line_start":414,"line_end":414,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":180674,"byte_end":180681,"line_start":415,"line_end":415,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":180686,"byte_end":180708,"line_start":416,"line_end":416,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":180713,"byte_end":180716,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ let bytes = Vec::from_slice(b\"foo\\xFFbar\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":180721,"byte_end":180768,"line_start":418,"line_end":418,"column_start":5,"column_end":52}},{"value":"/ let string = bytes.into_string_lossy();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":180773,"byte_end":180816,"line_start":419,"line_end":419,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(string, \"foo\\u{FFFD}bar\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":180821,"byte_end":180862,"line_start":420,"line_end":420,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":180867,"byte_end":180874,"line_start":421,"line_end":421,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":180879,"byte_end":180888,"line_start":422,"line_end":422,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":470},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":182229,"byte_end":182250,"line_start":464,"line_end":464,"column_start":15,"column_end":36},"name":"into_string_unchecked","qualname":"::ext_vec::ByteVec::into_string_unchecked","value":"fn (self) -> String","parent":{"krate":0,"index":446},"children":[],"decl_id":null,"docs":" Unsafely convert this byte string into a `String`, without checking for\n valid UTF-8.","sig":null,"attributes":[{"value":"/ Unsafely convert this byte string into a `String`, without checking for","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":181233,"byte_end":181308,"line_start":438,"line_end":438,"column_start":5,"column_end":80}},{"value":"/ valid UTF-8.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":181313,"byte_end":181329,"line_start":439,"line_end":439,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":181334,"byte_end":181337,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":181342,"byte_end":181354,"line_start":441,"line_end":441,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":181359,"byte_end":181362,"line_start":442,"line_end":442,"column_start":5,"column_end":8}},{"value":"/ Callers *must* ensure that this byte string is valid UTF-8 before","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":181367,"byte_end":181436,"line_start":443,"line_end":443,"column_start":5,"column_end":74}},{"value":"/ calling this method. Converting a byte string into a `String` that is","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":181441,"byte_end":181514,"line_start":444,"line_end":444,"column_start":5,"column_end":78}},{"value":"/ not valid UTF-8 is considered undefined behavior.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":181519,"byte_end":181572,"line_start":445,"line_end":445,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":181577,"byte_end":181580,"line_start":446,"line_end":446,"column_start":5,"column_end":8}},{"value":"/ This routine is useful in performance sensitive contexts where the","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":181585,"byte_end":181655,"line_start":447,"line_end":447,"column_start":5,"column_end":75}},{"value":"/ UTF-8 validity of the byte string is already known and it is","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":181660,"byte_end":181724,"line_start":448,"line_end":448,"column_start":5,"column_end":69}},{"value":"/ undesirable to pay the cost of an additional UTF-8 validation check","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":181729,"byte_end":181800,"line_start":449,"line_end":449,"column_start":5,"column_end":76}},{"value":"/ that [`into_string`](#method.into_string) performs.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":181805,"byte_end":181860,"line_start":450,"line_end":450,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":181865,"byte_end":181868,"line_start":451,"line_end":451,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":181873,"byte_end":181887,"line_start":452,"line_end":452,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":181892,"byte_end":181895,"line_start":453,"line_end":453,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":181900,"byte_end":181916,"line_start":454,"line_end":454,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":181921,"byte_end":181924,"line_start":455,"line_end":455,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":181929,"byte_end":181936,"line_start":456,"line_end":456,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":181941,"byte_end":181963,"line_start":457,"line_end":457,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":181968,"byte_end":181971,"line_start":458,"line_end":458,"column_start":5,"column_end":8}},{"value":"/ // SAFETY: This is safe because string literals are guaranteed to be","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":181976,"byte_end":182048,"line_start":459,"line_end":459,"column_start":5,"column_end":77}},{"value":"/ // valid UTF-8 by the Rust compiler.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":182053,"byte_end":182093,"line_start":460,"line_end":460,"column_start":5,"column_end":45}},{"value":"/ let s = unsafe { Vec::from(\"☃βツ\").into_string_unchecked() };","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":182098,"byte_end":182167,"line_start":461,"line_end":461,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(\"☃βツ\", s);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":182172,"byte_end":182202,"line_start":462,"line_end":462,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":182207,"byte_end":182214,"line_start":463,"line_end":463,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":471},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":182921,"byte_end":182935,"line_start":490,"line_end":490,"column_start":8,"column_end":22},"name":"into_os_string","qualname":"::ext_vec::ByteVec::into_os_string","value":"fn (self) -> Result<OsString, Vec<u8>>","parent":{"krate":0,"index":446},"children":[],"decl_id":null,"docs":" Converts this byte string into an OS string, in place.","sig":null,"attributes":[{"value":"/ Converts this byte string into an OS string, in place.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":182368,"byte_end":182426,"line_start":471,"line_end":471,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":182431,"byte_end":182434,"line_start":472,"line_end":472,"column_start":5,"column_end":8}},{"value":"/ On Unix, this always succeeds and is zero cost. On non-Unix systems,","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":182439,"byte_end":182511,"line_start":473,"line_end":473,"column_start":5,"column_end":77}},{"value":"/ this returns the original byte string if it is not valid UTF-8.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":182516,"byte_end":182583,"line_start":474,"line_end":474,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":182588,"byte_end":182591,"line_start":475,"line_end":475,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":182596,"byte_end":182610,"line_start":476,"line_end":476,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":182615,"byte_end":182618,"line_start":477,"line_end":477,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":182623,"byte_end":182639,"line_start":478,"line_end":478,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":182644,"byte_end":182647,"line_start":479,"line_end":479,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":182652,"byte_end":182659,"line_start":480,"line_end":480,"column_start":5,"column_end":12}},{"value":"/ use std::ffi::OsStr;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":182664,"byte_end":182688,"line_start":481,"line_end":481,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":182693,"byte_end":182696,"line_start":482,"line_end":482,"column_start":5,"column_end":8}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":182701,"byte_end":182723,"line_start":483,"line_end":483,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":182728,"byte_end":182731,"line_start":484,"line_end":484,"column_start":5,"column_end":8}},{"value":"/ let bs = Vec::from(\"foo\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":182736,"byte_end":182766,"line_start":485,"line_end":485,"column_start":5,"column_end":35}},{"value":"/ let os_str = bs.into_os_string().expect(\"should be valid UTF-8\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":182771,"byte_end":182840,"line_start":486,"line_end":486,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(os_str, OsStr::new(\"foo\"));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":182845,"byte_end":182887,"line_start":487,"line_end":487,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":182892,"byte_end":182899,"line_start":488,"line_end":488,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":182904,"byte_end":182913,"line_start":489,"line_end":489,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":474},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":184303,"byte_end":184323,"line_start":536,"line_end":536,"column_start":8,"column_end":28},"name":"into_os_string_lossy","qualname":"::ext_vec::ByteVec::into_os_string_lossy","value":"fn (self) -> OsString","parent":{"krate":0,"index":446},"children":[],"decl_id":null,"docs":" Lossily converts this byte string into an OS string, in place.","sig":null,"attributes":[{"value":"/ Lossily converts this byte string into an OS string, in place.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":183504,"byte_end":183570,"line_start":514,"line_end":514,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":183575,"byte_end":183578,"line_start":515,"line_end":515,"column_start":5,"column_end":8}},{"value":"/ On Unix, this always succeeds and is zero cost. On non-Unix systems,","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":183583,"byte_end":183655,"line_start":516,"line_end":516,"column_start":5,"column_end":77}},{"value":"/ this will perform a UTF-8 check and lossily convert this byte string","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":183660,"byte_end":183732,"line_start":517,"line_end":517,"column_start":5,"column_end":77}},{"value":"/ into valid UTF-8 using the Unicode replacement codepoint.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":183737,"byte_end":183798,"line_start":518,"line_end":518,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":183803,"byte_end":183806,"line_start":519,"line_end":519,"column_start":5,"column_end":8}},{"value":"/ Note that this can prevent the correct roundtripping of file paths on","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":183811,"byte_end":183884,"line_start":520,"line_end":520,"column_start":5,"column_end":78}},{"value":"/ non-Unix systems such as Windows, where file paths are an arbitrary","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":183889,"byte_end":183960,"line_start":521,"line_end":521,"column_start":5,"column_end":76}},{"value":"/ sequence of 16-bit integers.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":183965,"byte_end":183997,"line_start":522,"line_end":522,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":184002,"byte_end":184005,"line_start":523,"line_end":523,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":184010,"byte_end":184024,"line_start":524,"line_end":524,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":184029,"byte_end":184032,"line_start":525,"line_end":525,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":184037,"byte_end":184053,"line_start":526,"line_end":526,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":184058,"byte_end":184061,"line_start":527,"line_end":527,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":184066,"byte_end":184073,"line_start":528,"line_end":528,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":184078,"byte_end":184100,"line_start":529,"line_end":529,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":184105,"byte_end":184108,"line_start":530,"line_end":530,"column_start":5,"column_end":8}},{"value":"/ let bs = Vec::from_slice(b\"foo\\xFFbar\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":184113,"byte_end":184157,"line_start":531,"line_end":531,"column_start":5,"column_end":49}},{"value":"/ let os_str = bs.into_os_string_lossy();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":184162,"byte_end":184205,"line_start":532,"line_end":532,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(os_str.to_string_lossy(), \"foo\\u{FFFD}bar\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":184210,"byte_end":184269,"line_start":533,"line_end":533,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":184274,"byte_end":184281,"line_start":534,"line_end":534,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":184286,"byte_end":184295,"line_start":535,"line_end":535,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":477},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":185257,"byte_end":185270,"line_start":574,"line_end":574,"column_start":8,"column_end":21},"name":"into_path_buf","qualname":"::ext_vec::ByteVec::into_path_buf","value":"fn (self) -> Result<PathBuf, Vec<u8>>","parent":{"krate":0,"index":446},"children":[],"decl_id":null,"docs":" Converts this byte string into an owned file path, in place.","sig":null,"attributes":[{"value":"/ Converts this byte string into an owned file path, in place.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":184740,"byte_end":184804,"line_start":557,"line_end":557,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":184809,"byte_end":184812,"line_start":558,"line_end":558,"column_start":5,"column_end":8}},{"value":"/ On Unix, this always succeeds and is zero cost. On non-Unix systems,","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":184817,"byte_end":184889,"line_start":559,"line_end":559,"column_start":5,"column_end":77}},{"value":"/ this returns the original byte string if it is not valid UTF-8.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":184894,"byte_end":184961,"line_start":560,"line_end":560,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":184966,"byte_end":184969,"line_start":561,"line_end":561,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":184974,"byte_end":184988,"line_start":562,"line_end":562,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":184993,"byte_end":184996,"line_start":563,"line_end":563,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":185001,"byte_end":185017,"line_start":564,"line_end":564,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":185022,"byte_end":185025,"line_start":565,"line_end":565,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":185030,"byte_end":185037,"line_start":566,"line_end":566,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":185042,"byte_end":185064,"line_start":567,"line_end":567,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":185069,"byte_end":185072,"line_start":568,"line_end":568,"column_start":5,"column_end":8}},{"value":"/ let bs = Vec::from(\"foo\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":185077,"byte_end":185107,"line_start":569,"line_end":569,"column_start":5,"column_end":35}},{"value":"/ let path = bs.into_path_buf().expect(\"should be valid UTF-8\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":185112,"byte_end":185178,"line_start":570,"line_end":570,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(path.as_os_str(), \"foo\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":185183,"byte_end":185223,"line_start":571,"line_end":571,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":185228,"byte_end":185235,"line_start":572,"line_end":572,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":185240,"byte_end":185249,"line_start":573,"line_end":573,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":478},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":186202,"byte_end":186221,"line_start":603,"line_end":603,"column_start":8,"column_end":27},"name":"into_path_buf_lossy","qualname":"::ext_vec::ByteVec::into_path_buf_lossy","value":"fn (self) -> PathBuf","parent":{"krate":0,"index":446},"children":[],"decl_id":null,"docs":" Lossily converts this byte string into an owned file path, in place.","sig":null,"attributes":[{"value":"/ Lossily converts this byte string into an owned file path, in place.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":185402,"byte_end":185474,"line_start":581,"line_end":581,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":185479,"byte_end":185482,"line_start":582,"line_end":582,"column_start":5,"column_end":8}},{"value":"/ On Unix, this always succeeds and is zero cost. On non-Unix systems,","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":185487,"byte_end":185559,"line_start":583,"line_end":583,"column_start":5,"column_end":77}},{"value":"/ this will perform a UTF-8 check and lossily convert this byte string","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":185564,"byte_end":185636,"line_start":584,"line_end":584,"column_start":5,"column_end":77}},{"value":"/ into valid UTF-8 using the Unicode replacement codepoint.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":185641,"byte_end":185702,"line_start":585,"line_end":585,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":185707,"byte_end":185710,"line_start":586,"line_end":586,"column_start":5,"column_end":8}},{"value":"/ Note that this can prevent the correct roundtripping of file paths on","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":185715,"byte_end":185788,"line_start":587,"line_end":587,"column_start":5,"column_end":78}},{"value":"/ non-Unix systems such as Windows, where file paths are an arbitrary","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":185793,"byte_end":185864,"line_start":588,"line_end":588,"column_start":5,"column_end":76}},{"value":"/ sequence of 16-bit integers.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":185869,"byte_end":185901,"line_start":589,"line_end":589,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":185906,"byte_end":185909,"line_start":590,"line_end":590,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":185914,"byte_end":185928,"line_start":591,"line_end":591,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":185933,"byte_end":185936,"line_start":592,"line_end":592,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":185941,"byte_end":185957,"line_start":593,"line_end":593,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":185962,"byte_end":185965,"line_start":594,"line_end":594,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":185970,"byte_end":185977,"line_start":595,"line_end":595,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":185982,"byte_end":186004,"line_start":596,"line_end":596,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":186009,"byte_end":186012,"line_start":597,"line_end":597,"column_start":5,"column_end":8}},{"value":"/ let bs = Vec::from_slice(b\"foo\\xFFbar\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":186017,"byte_end":186061,"line_start":598,"line_end":598,"column_start":5,"column_end":49}},{"value":"/ let path = bs.into_path_buf_lossy();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":186066,"byte_end":186106,"line_start":599,"line_end":599,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(path.to_string_lossy(), \"foo\\u{FFFD}bar\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":186111,"byte_end":186168,"line_start":600,"line_end":600,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":186173,"byte_end":186180,"line_start":601,"line_end":601,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":186185,"byte_end":186194,"line_start":602,"line_end":602,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":479},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":187193,"byte_end":187201,"line_start":635,"line_end":635,"column_start":8,"column_end":16},"name":"pop_byte","qualname":"::ext_vec::ByteVec::pop_byte","value":"fn (&mut self) -> Option<u8>","parent":{"krate":0,"index":446},"children":[],"decl_id":null,"docs":" Removes the last byte from this `Vec<u8>` and returns it.","sig":null,"attributes":[{"value":"/ Removes the last byte from this `Vec<u8>` and returns it.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":186338,"byte_end":186399,"line_start":610,"line_end":610,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":186404,"byte_end":186407,"line_start":611,"line_end":611,"column_start":5,"column_end":8}},{"value":"/ If this byte string is empty, then `None` is returned.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":186412,"byte_end":186470,"line_start":612,"line_end":612,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":186475,"byte_end":186478,"line_start":613,"line_end":613,"column_start":5,"column_end":8}},{"value":"/ If the last codepoint in this byte string is not ASCII, then removing","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":186483,"byte_end":186556,"line_start":614,"line_end":614,"column_start":5,"column_end":78}},{"value":"/ the last byte could make this byte string contain invalid UTF-8.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":186561,"byte_end":186629,"line_start":615,"line_end":615,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":186634,"byte_end":186637,"line_start":616,"line_end":616,"column_start":5,"column_end":8}},{"value":"/ Note that this is equivalent to the generic `Vec::pop` method. This","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":186642,"byte_end":186713,"line_start":617,"line_end":617,"column_start":5,"column_end":76}},{"value":"/ method is provided to permit callers to explicitly differentiate","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":186718,"byte_end":186786,"line_start":618,"line_end":618,"column_start":5,"column_end":73}},{"value":"/ between popping bytes and codepoints.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":186791,"byte_end":186832,"line_start":619,"line_end":619,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":186837,"byte_end":186840,"line_start":620,"line_end":620,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":186845,"byte_end":186859,"line_start":621,"line_end":621,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":186864,"byte_end":186867,"line_start":622,"line_end":622,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":186872,"byte_end":186888,"line_start":623,"line_end":623,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":186893,"byte_end":186896,"line_start":624,"line_end":624,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":186901,"byte_end":186908,"line_start":625,"line_end":625,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":186913,"byte_end":186935,"line_start":626,"line_end":626,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":186940,"byte_end":186943,"line_start":627,"line_end":627,"column_start":5,"column_end":8}},{"value":"/ let mut s = Vec::from(\"foo\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":186948,"byte_end":186981,"line_start":628,"line_end":628,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(s.pop_byte(), Some(b'o'));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":186986,"byte_end":187027,"line_start":629,"line_end":629,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(s.pop_byte(), Some(b'o'));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":187032,"byte_end":187073,"line_start":630,"line_end":630,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(s.pop_byte(), Some(b'f'));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":187078,"byte_end":187119,"line_start":631,"line_end":631,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(s.pop_byte(), None);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":187124,"byte_end":187159,"line_start":632,"line_end":632,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":187164,"byte_end":187171,"line_start":633,"line_end":633,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":187176,"byte_end":187185,"line_start":634,"line_end":634,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":480},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":188908,"byte_end":188916,"line_start":681,"line_end":681,"column_start":8,"column_end":16},"name":"pop_char","qualname":"::ext_vec::ByteVec::pop_char","value":"fn (&mut self) -> Option<char>","parent":{"krate":0,"index":446},"children":[],"decl_id":null,"docs":" Removes the last codepoint from this `Vec<u8>` and returns it.","sig":null,"attributes":[{"value":"/ Removes the last codepoint from this `Vec<u8>` and returns it.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":187272,"byte_end":187338,"line_start":639,"line_end":639,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":187343,"byte_end":187346,"line_start":640,"line_end":640,"column_start":5,"column_end":8}},{"value":"/ If this byte string is empty, then `None` is returned. If the last","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":187351,"byte_end":187421,"line_start":641,"line_end":641,"column_start":5,"column_end":75}},{"value":"/ bytes of this byte string do not correspond to a valid UTF-8 code unit","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":187426,"byte_end":187500,"line_start":642,"line_end":642,"column_start":5,"column_end":79}},{"value":"/ sequence, then the Unicode replacement codepoint is yielded instead in","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":187505,"byte_end":187579,"line_start":643,"line_end":643,"column_start":5,"column_end":79}},{"value":"/ accordance with the","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":187584,"byte_end":187607,"line_start":644,"line_end":644,"column_start":5,"column_end":28}},{"value":"/ [replacement codepoint substitution policy](index.html#handling-of-invalid-utf8-8).","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":187612,"byte_end":187699,"line_start":645,"line_end":645,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":187704,"byte_end":187707,"line_start":646,"line_end":646,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":187712,"byte_end":187726,"line_start":647,"line_end":647,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":187731,"byte_end":187734,"line_start":648,"line_end":648,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":187739,"byte_end":187755,"line_start":649,"line_end":649,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":187760,"byte_end":187763,"line_start":650,"line_end":650,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":187768,"byte_end":187775,"line_start":651,"line_end":651,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":187780,"byte_end":187802,"line_start":652,"line_end":652,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":187807,"byte_end":187810,"line_start":653,"line_end":653,"column_start":5,"column_end":8}},{"value":"/ let mut s = Vec::from(\"foo\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":187815,"byte_end":187848,"line_start":654,"line_end":654,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(s.pop_char(), Some('o'));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":187853,"byte_end":187893,"line_start":655,"line_end":655,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(s.pop_char(), Some('o'));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":187898,"byte_end":187938,"line_start":656,"line_end":656,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(s.pop_char(), Some('f'));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":187943,"byte_end":187983,"line_start":657,"line_end":657,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(s.pop_char(), None);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":187988,"byte_end":188023,"line_start":658,"line_end":658,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":188028,"byte_end":188035,"line_start":659,"line_end":659,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":188040,"byte_end":188043,"line_start":660,"line_end":660,"column_start":5,"column_end":8}},{"value":"/ This shows the replacement codepoint substitution policy. Note that","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":188048,"byte_end":188119,"line_start":661,"line_end":661,"column_start":5,"column_end":76}},{"value":"/ the first pop yields a replacement codepoint but actually removes two","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":188124,"byte_end":188197,"line_start":662,"line_end":662,"column_start":5,"column_end":78}},{"value":"/ bytes. This is in contrast with subsequent pops when encountering","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":188202,"byte_end":188271,"line_start":663,"line_end":663,"column_start":5,"column_end":74}},{"value":"/ `\\xFF` since `\\xFF` is never a valid prefix for any valid UTF-8","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":188276,"byte_end":188343,"line_start":664,"line_end":664,"column_start":5,"column_end":72}},{"value":"/ code unit sequence.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":188348,"byte_end":188371,"line_start":665,"line_end":665,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":188376,"byte_end":188379,"line_start":666,"line_end":666,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":188384,"byte_end":188391,"line_start":667,"line_end":667,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":188396,"byte_end":188418,"line_start":668,"line_end":668,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":188423,"byte_end":188426,"line_start":669,"line_end":669,"column_start":5,"column_end":8}},{"value":"/ let mut s = Vec::from_slice(b\"f\\xFF\\xFF\\xFFoo\\xE2\\x98\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":188431,"byte_end":188491,"line_start":670,"line_end":670,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(s.pop_char(), Some('\\u{FFFD}'));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":188496,"byte_end":188543,"line_start":671,"line_end":671,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(s.pop_char(), Some('o'));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":188548,"byte_end":188588,"line_start":672,"line_end":672,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(s.pop_char(), Some('o'));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":188593,"byte_end":188633,"line_start":673,"line_end":673,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(s.pop_char(), Some('\\u{FFFD}'));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":188638,"byte_end":188685,"line_start":674,"line_end":674,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(s.pop_char(), Some('\\u{FFFD}'));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":188690,"byte_end":188737,"line_start":675,"line_end":675,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(s.pop_char(), Some('\\u{FFFD}'));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":188742,"byte_end":188789,"line_start":676,"line_end":676,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(s.pop_char(), Some('f'));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":188794,"byte_end":188834,"line_start":677,"line_end":677,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(s.pop_char(), None);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":188839,"byte_end":188874,"line_start":678,"line_end":678,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":188879,"byte_end":188886,"line_start":679,"line_end":679,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":188891,"byte_end":188900,"line_start":680,"line_end":680,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":481},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":190168,"byte_end":190179,"line_start":725,"line_end":725,"column_start":8,"column_end":19},"name":"remove_char","qualname":"::ext_vec::ByteVec::remove_char","value":"fn (&mut self, at: usize) -> char","parent":{"krate":0,"index":446},"children":[],"decl_id":null,"docs":" Removes a `char` from this `Vec<u8>` at the given byte position and\n returns it.","sig":null,"attributes":[{"value":"/ Removes a `char` from this `Vec<u8>` at the given byte position and","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":189192,"byte_end":189263,"line_start":691,"line_end":691,"column_start":5,"column_end":76}},{"value":"/ returns it.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":189268,"byte_end":189283,"line_start":692,"line_end":692,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":189288,"byte_end":189291,"line_start":693,"line_end":693,"column_start":5,"column_end":8}},{"value":"/ If the bytes at the given position do not lead to a valid UTF-8 code","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":189296,"byte_end":189368,"line_start":694,"line_end":694,"column_start":5,"column_end":77}},{"value":"/ unit sequence, then a","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":189373,"byte_end":189398,"line_start":695,"line_end":695,"column_start":5,"column_end":30}},{"value":"/ [replacement codepoint is returned instead](index.html#handling-of-invalid-utf8-8).","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":189403,"byte_end":189490,"line_start":696,"line_end":696,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":189495,"byte_end":189498,"line_start":697,"line_end":697,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":189503,"byte_end":189515,"line_start":698,"line_end":698,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":189520,"byte_end":189523,"line_start":699,"line_end":699,"column_start":5,"column_end":8}},{"value":"/ Panics if `at` is larger than or equal to this byte string's length.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":189528,"byte_end":189600,"line_start":700,"line_end":700,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":189605,"byte_end":189608,"line_start":701,"line_end":701,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":189613,"byte_end":189627,"line_start":702,"line_end":702,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":189632,"byte_end":189635,"line_start":703,"line_end":703,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":189640,"byte_end":189656,"line_start":704,"line_end":704,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":189661,"byte_end":189664,"line_start":705,"line_end":705,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":189669,"byte_end":189676,"line_start":706,"line_end":706,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":189681,"byte_end":189703,"line_start":707,"line_end":707,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":189708,"byte_end":189711,"line_start":708,"line_end":708,"column_start":5,"column_end":8}},{"value":"/ let mut s = Vec::from(\"foo☃bar\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":189716,"byte_end":189755,"line_start":709,"line_end":709,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(s.remove_char(3), '☃');","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":189760,"byte_end":189800,"line_start":710,"line_end":710,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(s, b\"foobar\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":189805,"byte_end":189834,"line_start":711,"line_end":711,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":189839,"byte_end":189846,"line_start":712,"line_end":712,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":189851,"byte_end":189854,"line_start":713,"line_end":713,"column_start":5,"column_end":8}},{"value":"/ This example shows how the Unicode replacement codepoint policy is","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":189859,"byte_end":189929,"line_start":714,"line_end":714,"column_start":5,"column_end":75}},{"value":"/ used:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":189934,"byte_end":189943,"line_start":715,"line_end":715,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":189948,"byte_end":189951,"line_start":716,"line_end":716,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":189956,"byte_end":189963,"line_start":717,"line_end":717,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":189968,"byte_end":189990,"line_start":718,"line_end":718,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":189995,"byte_end":189998,"line_start":719,"line_end":719,"column_start":5,"column_end":8}},{"value":"/ let mut s = Vec::from_slice(b\"foo\\xFFbar\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":190003,"byte_end":190050,"line_start":720,"line_end":720,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(s.remove_char(3), '\\u{FFFD}');","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":190055,"byte_end":190100,"line_start":721,"line_end":721,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(s, b\"foobar\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":190105,"byte_end":190134,"line_start":722,"line_end":722,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":190139,"byte_end":190146,"line_start":723,"line_end":723,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":190151,"byte_end":190160,"line_start":724,"line_end":724,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":482},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":191083,"byte_end":191094,"line_start":759,"line_end":759,"column_start":8,"column_end":19},"name":"insert_char","qualname":"::ext_vec::ByteVec::insert_char","value":"fn (&mut self, at: usize, ch: char) -> ()","parent":{"krate":0,"index":446},"children":[],"decl_id":null,"docs":" Inserts the given codepoint into this `Vec<u8>` at a particular byte\n position.","sig":null,"attributes":[{"value":"/ Inserts the given codepoint into this `Vec<u8>` at a particular byte","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":190494,"byte_end":190566,"line_start":737,"line_end":737,"column_start":5,"column_end":77}},{"value":"/ position.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":190571,"byte_end":190584,"line_start":738,"line_end":738,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":190589,"byte_end":190592,"line_start":739,"line_end":739,"column_start":5,"column_end":8}},{"value":"/ This is an `O(n)` operation as it may copy a number of elements in this","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":190597,"byte_end":190672,"line_start":740,"line_end":740,"column_start":5,"column_end":80}},{"value":"/ byte string proportional to its length.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":190677,"byte_end":190720,"line_start":741,"line_end":741,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":190725,"byte_end":190728,"line_start":742,"line_end":742,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":190733,"byte_end":190745,"line_start":743,"line_end":743,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":190750,"byte_end":190753,"line_start":744,"line_end":744,"column_start":5,"column_end":8}},{"value":"/ Panics if `at` is larger than the byte string's length.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":190758,"byte_end":190817,"line_start":745,"line_end":745,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":190822,"byte_end":190825,"line_start":746,"line_end":746,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":190830,"byte_end":190844,"line_start":747,"line_end":747,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":190849,"byte_end":190852,"line_start":748,"line_end":748,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":190857,"byte_end":190873,"line_start":749,"line_end":749,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":190878,"byte_end":190881,"line_start":750,"line_end":750,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":190886,"byte_end":190893,"line_start":751,"line_end":751,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":190898,"byte_end":190920,"line_start":752,"line_end":752,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":190925,"byte_end":190928,"line_start":753,"line_end":753,"column_start":5,"column_end":8}},{"value":"/ let mut s = Vec::from(\"foobar\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":190933,"byte_end":190969,"line_start":754,"line_end":754,"column_start":5,"column_end":41}},{"value":"/ s.insert_char(3, '☃');","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":190974,"byte_end":191002,"line_start":755,"line_end":755,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(s, \"foo☃bar\".as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":191007,"byte_end":191049,"line_start":756,"line_end":756,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":191054,"byte_end":191061,"line_start":757,"line_end":757,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":191066,"byte_end":191075,"line_start":758,"line_end":758,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":484},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":191987,"byte_end":191997,"line_start":789,"line_end":789,"column_start":8,"column_end":18},"name":"insert_str","qualname":"::ext_vec::ByteVec::insert_str","value":"fn <B> (&mut self, at: usize, bytes: B) -> ()","parent":{"krate":0,"index":446},"children":[],"decl_id":null,"docs":" Inserts the given byte string into this byte string at a particular\n byte position.","sig":null,"attributes":[{"value":"/ Inserts the given byte string into this byte string at a particular","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":191209,"byte_end":191280,"line_start":763,"line_end":763,"column_start":5,"column_end":76}},{"value":"/ byte position.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":191285,"byte_end":191303,"line_start":764,"line_end":764,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":191308,"byte_end":191311,"line_start":765,"line_end":765,"column_start":5,"column_end":8}},{"value":"/ This is an `O(n)` operation as it may copy a number of elements in this","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":191316,"byte_end":191391,"line_start":766,"line_end":766,"column_start":5,"column_end":80}},{"value":"/ byte string proportional to its length.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":191396,"byte_end":191439,"line_start":767,"line_end":767,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":191444,"byte_end":191447,"line_start":768,"line_end":768,"column_start":5,"column_end":8}},{"value":"/ The given byte string may be any type that can be cheaply converted","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":191452,"byte_end":191523,"line_start":769,"line_end":769,"column_start":5,"column_end":76}},{"value":"/ into a `&[u8]`. This includes, but is not limited to, `&str` and","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":191528,"byte_end":191596,"line_start":770,"line_end":770,"column_start":5,"column_end":73}},{"value":"/ `&[u8]`.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":191601,"byte_end":191613,"line_start":771,"line_end":771,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":191618,"byte_end":191621,"line_start":772,"line_end":772,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":191626,"byte_end":191638,"line_start":773,"line_end":773,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":191643,"byte_end":191646,"line_start":774,"line_end":774,"column_start":5,"column_end":8}},{"value":"/ Panics if `at` is larger than the byte string's length.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":191651,"byte_end":191710,"line_start":775,"line_end":775,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":191715,"byte_end":191718,"line_start":776,"line_end":776,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":191723,"byte_end":191737,"line_start":777,"line_end":777,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":191742,"byte_end":191745,"line_start":778,"line_end":778,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":191750,"byte_end":191766,"line_start":779,"line_end":779,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":191771,"byte_end":191774,"line_start":780,"line_end":780,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":191779,"byte_end":191786,"line_start":781,"line_end":781,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":191791,"byte_end":191813,"line_start":782,"line_end":782,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":191818,"byte_end":191821,"line_start":783,"line_end":783,"column_start":5,"column_end":8}},{"value":"/ let mut s = Vec::from(\"foobar\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":191826,"byte_end":191862,"line_start":784,"line_end":784,"column_start":5,"column_end":41}},{"value":"/ s.insert_str(3, \"☃☃☃\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":191867,"byte_end":191900,"line_start":785,"line_end":785,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(s, \"foo☃☃☃bar\".as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":191905,"byte_end":191953,"line_start":786,"line_end":786,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":191958,"byte_end":191965,"line_start":787,"line_end":787,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":191970,"byte_end":191979,"line_start":788,"line_end":788,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":486},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":193990,"byte_end":194003,"line_start":841,"line_end":841,"column_start":8,"column_end":21},"name":"replace_range","qualname":"::ext_vec::ByteVec::replace_range","value":"fn <R, B> (&mut self, range: R, replace_with: B) -> ()","parent":{"krate":0,"index":446},"children":[],"decl_id":null,"docs":" Removes the specified range in this byte string and replaces it with\n the given bytes. The given bytes do not need to have the same length\n as the range provided.","sig":null,"attributes":[{"value":"/ Removes the specified range in this byte string and replaces it with","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":193458,"byte_end":193530,"line_start":821,"line_end":821,"column_start":5,"column_end":77}},{"value":"/ the given bytes. The given bytes do not need to have the same length","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":193535,"byte_end":193607,"line_start":822,"line_end":822,"column_start":5,"column_end":77}},{"value":"/ as the range provided.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":193612,"byte_end":193638,"line_start":823,"line_end":823,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":193643,"byte_end":193646,"line_start":824,"line_end":824,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":193651,"byte_end":193663,"line_start":825,"line_end":825,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":193668,"byte_end":193671,"line_start":826,"line_end":826,"column_start":5,"column_end":8}},{"value":"/ Panics if the given range is invalid.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":193676,"byte_end":193717,"line_start":827,"line_end":827,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":193722,"byte_end":193725,"line_start":828,"line_end":828,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":193730,"byte_end":193744,"line_start":829,"line_end":829,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":193749,"byte_end":193752,"line_start":830,"line_end":830,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":193757,"byte_end":193773,"line_start":831,"line_end":831,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":193778,"byte_end":193781,"line_start":832,"line_end":832,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":193786,"byte_end":193793,"line_start":833,"line_end":833,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":193798,"byte_end":193820,"line_start":834,"line_end":834,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":193825,"byte_end":193828,"line_start":835,"line_end":835,"column_start":5,"column_end":8}},{"value":"/ let mut s = Vec::from(\"foobar\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":193833,"byte_end":193869,"line_start":836,"line_end":836,"column_start":5,"column_end":41}},{"value":"/ s.replace_range(2..4, \"xxxxx\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":193874,"byte_end":193909,"line_start":837,"line_end":837,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(s, \"foxxxxxar\".as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":193914,"byte_end":193956,"line_start":838,"line_end":838,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":193961,"byte_end":193968,"line_start":839,"line_end":839,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":193973,"byte_end":193982,"line_start":840,"line_end":840,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":489},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":195168,"byte_end":195179,"line_start":879,"line_end":879,"column_start":8,"column_end":19},"name":"drain_bytes","qualname":"::ext_vec::ByteVec::drain_bytes","value":"fn <R> (&mut self, range: R) -> DrainBytes","parent":{"krate":0,"index":446},"children":[],"decl_id":null,"docs":" Creates a draining iterator that removes the specified range in this\n `Vec<u8>` and yields each of the removed bytes.","sig":null,"attributes":[{"value":"/ Creates a draining iterator that removes the specified range in this","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":194215,"byte_end":194287,"line_start":849,"line_end":849,"column_start":5,"column_end":77}},{"value":"/ `Vec<u8>` and yields each of the removed bytes.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":194292,"byte_end":194343,"line_start":850,"line_end":850,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":194348,"byte_end":194351,"line_start":851,"line_end":851,"column_start":5,"column_end":8}},{"value":"/ Note that the elements specified by the given range are removed","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":194356,"byte_end":194423,"line_start":852,"line_end":852,"column_start":5,"column_end":72}},{"value":"/ regardless of whether the returned iterator is fully exhausted.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":194428,"byte_end":194495,"line_start":853,"line_end":853,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":194500,"byte_end":194503,"line_start":854,"line_end":854,"column_start":5,"column_end":8}},{"value":"/ Also note that is is unspecified how many bytes are removed from the","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":194508,"byte_end":194580,"line_start":855,"line_end":855,"column_start":5,"column_end":77}},{"value":"/ `Vec<u8>` if the `DrainBytes` iterator is leaked.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":194585,"byte_end":194638,"line_start":856,"line_end":856,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":194643,"byte_end":194646,"line_start":857,"line_end":857,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":194651,"byte_end":194663,"line_start":858,"line_end":858,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":194668,"byte_end":194671,"line_start":859,"line_end":859,"column_start":5,"column_end":8}},{"value":"/ Panics if the given range is not valid.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":194676,"byte_end":194719,"line_start":860,"line_end":860,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":194724,"byte_end":194727,"line_start":861,"line_end":861,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":194732,"byte_end":194746,"line_start":862,"line_end":862,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":194751,"byte_end":194754,"line_start":863,"line_end":863,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":194759,"byte_end":194775,"line_start":864,"line_end":864,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":194780,"byte_end":194783,"line_start":865,"line_end":865,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":194788,"byte_end":194795,"line_start":866,"line_end":866,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":194800,"byte_end":194822,"line_start":867,"line_end":867,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":194827,"byte_end":194830,"line_start":868,"line_end":868,"column_start":5,"column_end":8}},{"value":"/ let mut s = Vec::from(\"foobar\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":194835,"byte_end":194871,"line_start":869,"line_end":869,"column_start":5,"column_end":41}},{"value":"/ {","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":194876,"byte_end":194881,"line_start":870,"line_end":870,"column_start":5,"column_end":10}},{"value":"/     let mut drainer = s.drain_bytes(2..4);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":194886,"byte_end":194932,"line_start":871,"line_end":871,"column_start":5,"column_end":51}},{"value":"/     assert_eq!(drainer.next(), Some(b'o'));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":194937,"byte_end":194984,"line_start":872,"line_end":872,"column_start":5,"column_end":52}},{"value":"/     assert_eq!(drainer.next(), Some(b'b'));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":194989,"byte_end":195036,"line_start":873,"line_end":873,"column_start":5,"column_end":52}},{"value":"/     assert_eq!(drainer.next(), None);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":195041,"byte_end":195082,"line_start":874,"line_end":874,"column_start":5,"column_end":46}},{"value":"/ }","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":195087,"byte_end":195092,"line_start":875,"line_end":875,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(s, \"foar\".as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":195097,"byte_end":195134,"line_start":876,"line_end":876,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":195139,"byte_end":195146,"line_start":877,"line_end":877,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":195151,"byte_end":195160,"line_start":878,"line_end":878,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1150},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":195882,"byte_end":195892,"line_start":909,"line_end":909,"column_start":12,"column_end":22},"name":"DrainBytes","qualname":"::ext_vec::DrainBytes","value":"DrainBytes {  }","parent":null,"children":[{"krate":0,"index":1152}],"decl_id":null,"docs":" A draining byte oriented iterator for `Vec<u8>`.","sig":null,"attributes":[{"value":"/ A draining byte oriented iterator for `Vec<u8>`.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":195337,"byte_end":195389,"line_start":887,"line_end":887,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":195390,"byte_end":195393,"line_start":888,"line_end":888,"column_start":1,"column_end":4}},{"value":"/ This iterator is created by","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":195394,"byte_end":195425,"line_start":889,"line_end":889,"column_start":1,"column_end":32}},{"value":"/ [`ByteVec::drain_bytes`](trait.ByteVec.html#method.drain_bytes).","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":195426,"byte_end":195494,"line_start":890,"line_end":890,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":195495,"byte_end":195498,"line_start":891,"line_end":891,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":195499,"byte_end":195513,"line_start":892,"line_end":892,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":195514,"byte_end":195517,"line_start":893,"line_end":893,"column_start":1,"column_end":4}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":195518,"byte_end":195534,"line_start":894,"line_end":894,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":195535,"byte_end":195538,"line_start":895,"line_end":895,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":195539,"byte_end":195546,"line_start":896,"line_end":896,"column_start":1,"column_end":8}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":195547,"byte_end":195569,"line_start":897,"line_end":897,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":195570,"byte_end":195573,"line_start":898,"line_end":898,"column_start":1,"column_end":4}},{"value":"/ let mut s = Vec::from(\"foobar\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":195574,"byte_end":195610,"line_start":899,"line_end":899,"column_start":1,"column_end":37}},{"value":"/ {","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":195611,"byte_end":195616,"line_start":900,"line_end":900,"column_start":1,"column_end":6}},{"value":"/     let mut drainer = s.drain_bytes(2..4);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":195617,"byte_end":195663,"line_start":901,"line_end":901,"column_start":1,"column_end":47}},{"value":"/     assert_eq!(drainer.next(), Some(b'o'));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":195664,"byte_end":195711,"line_start":902,"line_end":902,"column_start":1,"column_end":48}},{"value":"/     assert_eq!(drainer.next(), Some(b'b'));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":195712,"byte_end":195759,"line_start":903,"line_end":903,"column_start":1,"column_end":48}},{"value":"/     assert_eq!(drainer.next(), None);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":195760,"byte_end":195801,"line_start":904,"line_end":904,"column_start":1,"column_end":42}},{"value":"/ }","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":195802,"byte_end":195807,"line_start":905,"line_end":905,"column_start":1,"column_end":6}},{"value":"/ assert_eq!(s, \"foar\".as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":195808,"byte_end":195845,"line_start":906,"line_end":906,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":195846,"byte_end":195853,"line_start":907,"line_end":907,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":1156},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":197137,"byte_end":197150,"line_start":962,"line_end":962,"column_start":12,"column_end":25},"name":"FromUtf8Error","qualname":"::ext_vec::FromUtf8Error","value":"FromUtf8Error {  }","parent":null,"children":[{"krate":0,"index":1157},{"krate":0,"index":1158}],"decl_id":null,"docs":" An error that may occur when converting a `Vec<u8>` to a `String`.","sig":null,"attributes":[{"value":"/ An error that may occur when converting a `Vec<u8>` to a `String`.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":196394,"byte_end":196464,"line_start":938,"line_end":938,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":196465,"byte_end":196468,"line_start":939,"line_end":939,"column_start":1,"column_end":4}},{"value":"/ This error includes the original `Vec<u8>` that failed to convert to a","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":196469,"byte_end":196543,"line_start":940,"line_end":940,"column_start":1,"column_end":75}},{"value":"/ `String`. This permits callers to recover the allocation used even if it","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":196544,"byte_end":196620,"line_start":941,"line_end":941,"column_start":1,"column_end":77}},{"value":"/ it not valid UTF-8.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":196621,"byte_end":196644,"line_start":942,"line_end":942,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":196645,"byte_end":196648,"line_start":943,"line_end":943,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":196649,"byte_end":196663,"line_start":944,"line_end":944,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":196664,"byte_end":196667,"line_start":945,"line_end":945,"column_start":1,"column_end":4}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":196668,"byte_end":196684,"line_start":946,"line_end":946,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":196685,"byte_end":196688,"line_start":947,"line_end":947,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":196689,"byte_end":196696,"line_start":948,"line_end":948,"column_start":1,"column_end":8}},{"value":"/ use bstr::{B, ByteVec};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":196697,"byte_end":196724,"line_start":949,"line_end":949,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":196725,"byte_end":196728,"line_start":950,"line_end":950,"column_start":1,"column_end":4}},{"value":"/ let bytes = Vec::from_slice(b\"foo\\xFFbar\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":196729,"byte_end":196776,"line_start":951,"line_end":951,"column_start":1,"column_end":48}},{"value":"/ let err = bytes.into_string().unwrap_err();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":196777,"byte_end":196824,"line_start":952,"line_end":952,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":196825,"byte_end":196828,"line_start":953,"line_end":953,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(err.utf8_error().valid_up_to(), 3);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":196829,"byte_end":196879,"line_start":954,"line_end":954,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(err.utf8_error().error_len(), Some(1));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":196880,"byte_end":196934,"line_start":955,"line_end":955,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":196935,"byte_end":196938,"line_start":956,"line_end":956,"column_start":1,"column_end":4}},{"value":"/ // At no point in this example is an allocation performed.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":196939,"byte_end":197001,"line_start":957,"line_end":957,"column_start":1,"column_end":63}},{"value":"/ let bytes = Vec::from(err.into_vec());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":197002,"byte_end":197044,"line_start":958,"line_end":958,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(bytes, B(b\"foo\\xFFbar\"));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":197045,"byte_end":197085,"line_start":959,"line_end":959,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":197086,"byte_end":197093,"line_start":960,"line_end":960,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":504},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":197697,"byte_end":197705,"line_start":985,"line_end":985,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<FromUtf8Error>::as_bytes","value":"fn (&self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Return the original bytes as a slice that failed to convert to a\n `String`.","sig":null,"attributes":[{"value":"/ Return the original bytes as a slice that failed to convert to a","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":197224,"byte_end":197292,"line_start":968,"line_end":968,"column_start":5,"column_end":73}},{"value":"/ `String`.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":197297,"byte_end":197310,"line_start":969,"line_end":969,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":197315,"byte_end":197318,"line_start":970,"line_end":970,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":197323,"byte_end":197337,"line_start":971,"line_end":971,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":197342,"byte_end":197345,"line_start":972,"line_end":972,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":197350,"byte_end":197366,"line_start":973,"line_end":973,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":197371,"byte_end":197374,"line_start":974,"line_end":974,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":197379,"byte_end":197386,"line_start":975,"line_end":975,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteVec};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":197391,"byte_end":197418,"line_start":976,"line_end":976,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":197423,"byte_end":197426,"line_start":977,"line_end":977,"column_start":5,"column_end":8}},{"value":"/ let bytes = Vec::from_slice(b\"foo\\xFFbar\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":197431,"byte_end":197478,"line_start":978,"line_end":978,"column_start":5,"column_end":52}},{"value":"/ let err = bytes.into_string().unwrap_err();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":197483,"byte_end":197530,"line_start":979,"line_end":979,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":197535,"byte_end":197538,"line_start":980,"line_end":980,"column_start":5,"column_end":8}},{"value":"/ // At no point in this example is an allocation performed.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":197543,"byte_end":197605,"line_start":981,"line_end":981,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(err.as_bytes(), B(b\"foo\\xFFbar\"));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":197610,"byte_end":197659,"line_start":982,"line_end":982,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":197664,"byte_end":197671,"line_start":983,"line_end":983,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":197676,"byte_end":197685,"line_start":984,"line_end":984,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":505},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":198282,"byte_end":198290,"line_start":1007,"line_end":1007,"column_start":12,"column_end":20},"name":"into_vec","qualname":"<FromUtf8Error>::into_vec","value":"fn (self) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Consume this error and return the original byte string that failed to\n convert to a `String`.","sig":null,"attributes":[{"value":"/ Consume this error and return the original byte string that failed to","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":197758,"byte_end":197831,"line_start":989,"line_end":989,"column_start":5,"column_end":78}},{"value":"/ convert to a `String`.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":197836,"byte_end":197862,"line_start":990,"line_end":990,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":197867,"byte_end":197870,"line_start":991,"line_end":991,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":197875,"byte_end":197889,"line_start":992,"line_end":992,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":197894,"byte_end":197897,"line_start":993,"line_end":993,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":197902,"byte_end":197918,"line_start":994,"line_end":994,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":197923,"byte_end":197926,"line_start":995,"line_end":995,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":197931,"byte_end":197938,"line_start":996,"line_end":996,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteVec};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":197943,"byte_end":197970,"line_start":997,"line_end":997,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":197975,"byte_end":197978,"line_start":998,"line_end":998,"column_start":5,"column_end":8}},{"value":"/ let bytes = Vec::from_slice(b\"foo\\xFFbar\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":197983,"byte_end":198030,"line_start":999,"line_end":999,"column_start":5,"column_end":52}},{"value":"/ let err = bytes.into_string().unwrap_err();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":198035,"byte_end":198082,"line_start":1000,"line_end":1000,"column_start":5,"column_end":52}},{"value":"/ let original = err.into_vec();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":198087,"byte_end":198121,"line_start":1001,"line_end":1001,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":198126,"byte_end":198129,"line_start":1002,"line_end":1002,"column_start":5,"column_end":8}},{"value":"/ // At no point in this example is an allocation performed.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":198134,"byte_end":198196,"line_start":1003,"line_end":1003,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(original, B(b\"foo\\xFFbar\"));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":198201,"byte_end":198244,"line_start":1004,"line_end":1004,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":198249,"byte_end":198256,"line_start":1005,"line_end":1005,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":198261,"byte_end":198270,"line_start":1006,"line_end":1006,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":506},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":198873,"byte_end":198883,"line_start":1028,"line_end":1028,"column_start":12,"column_end":22},"name":"utf8_error","qualname":"<FromUtf8Error>::utf8_error","value":"fn (&self) -> &Utf8Error","parent":null,"children":[],"decl_id":null,"docs":" Return the underlying UTF-8 error that occurred. This error provides\n information on the nature and location of the invalid UTF-8 detected.","sig":null,"attributes":[{"value":"/ Return the underlying UTF-8 error that occurred. This error provides","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":198343,"byte_end":198415,"line_start":1011,"line_end":1011,"column_start":5,"column_end":77}},{"value":"/ information on the nature and location of the invalid UTF-8 detected.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":198420,"byte_end":198493,"line_start":1012,"line_end":1012,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":198498,"byte_end":198501,"line_start":1013,"line_end":1013,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":198506,"byte_end":198520,"line_start":1014,"line_end":1014,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":198525,"byte_end":198528,"line_start":1015,"line_end":1015,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":198533,"byte_end":198549,"line_start":1016,"line_end":1016,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":198554,"byte_end":198557,"line_start":1017,"line_end":1017,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":198562,"byte_end":198569,"line_start":1018,"line_end":1018,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteVec};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":198574,"byte_end":198601,"line_start":1019,"line_end":1019,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":198606,"byte_end":198609,"line_start":1020,"line_end":1020,"column_start":5,"column_end":8}},{"value":"/ let bytes = Vec::from_slice(b\"foo\\xFFbar\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":198614,"byte_end":198661,"line_start":1021,"line_end":1021,"column_start":5,"column_end":52}},{"value":"/ let err = bytes.into_string().unwrap_err();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":198666,"byte_end":198713,"line_start":1022,"line_end":1022,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":198718,"byte_end":198721,"line_start":1023,"line_end":1023,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(err.utf8_error().valid_up_to(), 3);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":198726,"byte_end":198776,"line_start":1024,"line_end":1024,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(err.utf8_error().error_len(), Some(1));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":198781,"byte_end":198835,"line_start":1025,"line_end":1025,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":198840,"byte_end":198847,"line_start":1026,"line_end":1026,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":198852,"byte_end":198861,"line_start":1027,"line_end":1027,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":743},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"io","qualname":"::io","value":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","parent":null,"children":[{"krate":0,"index":744},{"krate":0,"index":745},{"krate":0,"index":746},{"krate":0,"index":747},{"krate":0,"index":754},{"krate":0,"index":1448},{"krate":0,"index":1451},{"krate":0,"index":756},{"krate":0,"index":760},{"krate":0,"index":761}],"decl_id":null,"docs":"Utilities for working with I/O using byte strings.","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/lib.rs","byte_start":19355,"byte_end":19378,"line_start":419,"line_end":419,"column_start":1,"column_end":24}},{"value":"!\nUtilities for working with I/O using byte strings.\n\nThis module currently only exports a single trait, `BufReadExt`, which provides\nfacilities for conveniently and efficiently working with lines as byte strings.\n\nMore APIs may be added in the future.\n*/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":220098,"byte_end":220355,"line_start":1,"line_end":8,"column_start":1,"column_end":3}}]},{"kind":"Trait","id":{"krate":0,"index":747},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":220602,"byte_end":220612,"line_start":18,"line_end":18,"column_start":11,"column_end":21},"name":"BufReadExt","qualname":"::io::BufReadExt","value":"BufReadExt: io::BufRead","parent":null,"children":[{"krate":0,"index":748},{"krate":0,"index":749},{"krate":0,"index":752}],"decl_id":null,"docs":" An extention trait for\n [`std::io::BufRead`](https://doc.rust-lang.org/std/io/trait.BufRead.html)\n which provides convenience APIs for dealing with byte strings.\n","sig":null,"attributes":[{"value":"/ An extention trait for","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":220420,"byte_end":220446,"line_start":15,"line_end":15,"column_start":1,"column_end":27}},{"value":"/ [`std::io::BufRead`](https://doc.rust-lang.org/std/io/trait.BufRead.html)","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":220447,"byte_end":220524,"line_start":16,"line_end":16,"column_start":1,"column_end":78}},{"value":"/ which provides convenience APIs for dealing with byte strings.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":220525,"byte_end":220591,"line_start":17,"line_end":17,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":748},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":221719,"byte_end":221729,"line_start":52,"line_end":52,"column_start":8,"column_end":18},"name":"byte_lines","qualname":"::io::BufReadExt::byte_lines","value":"fn (self) -> ByteLines<Self>","parent":{"krate":0,"index":747},"children":[],"decl_id":null,"docs":" Returns an iterator over the lines of this reader, where each line\n is represented as a byte string.","sig":null,"attributes":[{"value":"/ Returns an iterator over the lines of this reader, where each line","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":220632,"byte_end":220702,"line_start":19,"line_end":19,"column_start":5,"column_end":75}},{"value":"/ is represented as a byte string.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":220707,"byte_end":220743,"line_start":20,"line_end":20,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":220748,"byte_end":220751,"line_start":21,"line_end":21,"column_start":5,"column_end":8}},{"value":"/ Each item yielded by this iterator is a `io::Result<Vec<u8>>`, where","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":220756,"byte_end":220828,"line_start":22,"line_end":22,"column_start":5,"column_end":77}},{"value":"/ an error is yielded if there was a problem reading from the underlying","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":220833,"byte_end":220907,"line_start":23,"line_end":23,"column_start":5,"column_end":79}},{"value":"/ reader.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":220912,"byte_end":220923,"line_start":24,"line_end":24,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":220928,"byte_end":220931,"line_start":25,"line_end":25,"column_start":5,"column_end":8}},{"value":"/ On success, the next line in the iterator is returned. The line does","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":220936,"byte_end":221008,"line_start":26,"line_end":26,"column_start":5,"column_end":77}},{"value":"/ *not* contain a trailing `\\n` or `\\r\\n`.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":221013,"byte_end":221057,"line_start":27,"line_end":27,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":221062,"byte_end":221065,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":221070,"byte_end":221084,"line_start":29,"line_end":29,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":221089,"byte_end":221092,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":221097,"byte_end":221113,"line_start":31,"line_end":31,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":221118,"byte_end":221121,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":221126,"byte_end":221133,"line_start":33,"line_end":33,"column_start":5,"column_end":12}},{"value":"/ use std::io;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":221138,"byte_end":221154,"line_start":34,"line_end":34,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":221159,"byte_end":221162,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ use bstr::io::BufReadExt;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":221167,"byte_end":221196,"line_start":36,"line_end":36,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":221201,"byte_end":221204,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ # fn example() -> Result<(), io::Error> {","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":221209,"byte_end":221254,"line_start":38,"line_end":38,"column_start":5,"column_end":50}},{"value":"/ let cursor = io::Cursor::new(b\"lorem\\nipsum\\r\\ndolor\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":221259,"byte_end":221318,"line_start":39,"line_end":39,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":221323,"byte_end":221326,"line_start":40,"line_end":40,"column_start":5,"column_end":8}},{"value":"/ let mut lines = vec![];","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":221331,"byte_end":221358,"line_start":41,"line_end":41,"column_start":5,"column_end":32}},{"value":"/ for result in cursor.byte_lines() {","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":221363,"byte_end":221402,"line_start":42,"line_end":42,"column_start":5,"column_end":44}},{"value":"/     let line = result?;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":221407,"byte_end":221434,"line_start":43,"line_end":43,"column_start":5,"column_end":32}},{"value":"/     lines.push(line);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":221439,"byte_end":221464,"line_start":44,"line_end":44,"column_start":5,"column_end":30}},{"value":"/ }","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":221469,"byte_end":221474,"line_start":45,"line_end":45,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(lines.len(), 3);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":221479,"byte_end":221510,"line_start":46,"line_end":46,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(lines[0], \"lorem\".as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":221515,"byte_end":221560,"line_start":47,"line_end":47,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(lines[1], \"ipsum\".as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":221565,"byte_end":221610,"line_start":48,"line_end":48,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(lines[2], \"dolor\".as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":221615,"byte_end":221660,"line_start":49,"line_end":49,"column_start":5,"column_end":50}},{"value":"/ # Ok(()) }; example().unwrap()","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":221665,"byte_end":221699,"line_start":50,"line_end":50,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":221704,"byte_end":221711,"line_start":51,"line_end":51,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":749},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":223182,"byte_end":223195,"line_start":95,"line_end":95,"column_start":8,"column_end":21},"name":"for_byte_line","qualname":"::io::BufReadExt::for_byte_line","value":"fn <F> (self, mut for_each_line: F) -> io::Result<()>","parent":{"krate":0,"index":747},"children":[],"decl_id":null,"docs":" Executes the given closure on each line in the underlying reader.","sig":null,"attributes":[{"value":"/ Executes the given closure on each line in the underlying reader.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":221835,"byte_end":221904,"line_start":59,"line_end":59,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":221909,"byte_end":221912,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ If the closure returns an error (or if the underlying reader returns an","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":221917,"byte_end":221992,"line_start":61,"line_end":61,"column_start":5,"column_end":80}},{"value":"/ error), then iteration is stopped and the error is returned. If false","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":221997,"byte_end":222070,"line_start":62,"line_end":62,"column_start":5,"column_end":78}},{"value":"/ is returned, then iteration is stopped and no error is returned.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":222075,"byte_end":222143,"line_start":63,"line_end":63,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":222148,"byte_end":222151,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ The closure given is called on exactly the same values as yielded by","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":222156,"byte_end":222228,"line_start":65,"line_end":65,"column_start":5,"column_end":77}},{"value":"/ the [`byte_lines`](trait.BufReadExt.html#method.byte_lines)","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":222233,"byte_end":222296,"line_start":66,"line_end":66,"column_start":5,"column_end":68}},{"value":"/ iterator. Namely, lines do _not_ contain trailing `\\n` or `\\r\\n` bytes.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":222301,"byte_end":222376,"line_start":67,"line_end":67,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":222381,"byte_end":222384,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ This routine is useful for iterating over lines as quickly as","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":222389,"byte_end":222454,"line_start":69,"line_end":69,"column_start":5,"column_end":70}},{"value":"/ possible. Namely, a single allocation is reused for each line.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":222459,"byte_end":222525,"line_start":70,"line_end":70,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":222530,"byte_end":222533,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":222538,"byte_end":222552,"line_start":72,"line_end":72,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":222557,"byte_end":222560,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":222565,"byte_end":222581,"line_start":74,"line_end":74,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":222586,"byte_end":222589,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":222594,"byte_end":222601,"line_start":76,"line_end":76,"column_start":5,"column_end":12}},{"value":"/ use std::io;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":222606,"byte_end":222622,"line_start":77,"line_end":77,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":222627,"byte_end":222630,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ use bstr::io::BufReadExt;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":222635,"byte_end":222664,"line_start":79,"line_end":79,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":222669,"byte_end":222672,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ # fn example() -> Result<(), io::Error> {","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":222677,"byte_end":222722,"line_start":81,"line_end":81,"column_start":5,"column_end":50}},{"value":"/ let cursor = io::Cursor::new(b\"lorem\\nipsum\\r\\ndolor\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":222727,"byte_end":222786,"line_start":82,"line_end":82,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":222791,"byte_end":222794,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ let mut lines = vec![];","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":222799,"byte_end":222826,"line_start":84,"line_end":84,"column_start":5,"column_end":32}},{"value":"/ cursor.for_byte_line(|line| {","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":222831,"byte_end":222864,"line_start":85,"line_end":85,"column_start":5,"column_end":38}},{"value":"/     lines.push(line.to_vec());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":222869,"byte_end":222903,"line_start":86,"line_end":86,"column_start":5,"column_end":39}},{"value":"/     Ok(true)","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":222908,"byte_end":222924,"line_start":87,"line_end":87,"column_start":5,"column_end":21}},{"value":"/ })?;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":222929,"byte_end":222937,"line_start":88,"line_end":88,"column_start":5,"column_end":13}},{"value":"/ assert_eq!(lines.len(), 3);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":222942,"byte_end":222973,"line_start":89,"line_end":89,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(lines[0], \"lorem\".as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":222978,"byte_end":223023,"line_start":90,"line_end":90,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(lines[1], \"ipsum\".as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":223028,"byte_end":223073,"line_start":91,"line_end":91,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(lines[2], \"dolor\".as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":223078,"byte_end":223123,"line_start":92,"line_end":92,"column_start":5,"column_end":50}},{"value":"/ # Ok(()) }; example().unwrap()","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":223128,"byte_end":223162,"line_start":93,"line_end":93,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":223167,"byte_end":223174,"line_start":94,"line_end":94,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":752},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":224773,"byte_end":224802,"line_start":142,"line_end":142,"column_start":8,"column_end":37},"name":"for_byte_line_with_terminator","qualname":"::io::BufReadExt::for_byte_line_with_terminator","value":"fn <F> (mut self, mut for_each_line: F) -> io::Result<()>","parent":{"krate":0,"index":747},"children":[],"decl_id":null,"docs":" Executes the given closure on each line in the underlying reader.","sig":null,"attributes":[{"value":"/ Executes the given closure on each line in the underlying reader.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":223447,"byte_end":223516,"line_start":105,"line_end":105,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":223521,"byte_end":223524,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ If the closure returns an error (or if the underlying reader returns an","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":223529,"byte_end":223604,"line_start":107,"line_end":107,"column_start":5,"column_end":80}},{"value":"/ error), then iteration is stopped and the error is returned. If false","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":223609,"byte_end":223682,"line_start":108,"line_end":108,"column_start":5,"column_end":78}},{"value":"/ is returned, then iteration is stopped and no error is returned.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":223687,"byte_end":223755,"line_start":109,"line_end":109,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":223760,"byte_end":223763,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ Unlike","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":223768,"byte_end":223778,"line_start":111,"line_end":111,"column_start":5,"column_end":15}},{"value":"/ [`for_byte_line`](trait.BufReadExt.html#method.for_byte_line),","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":223783,"byte_end":223849,"line_start":112,"line_end":112,"column_start":5,"column_end":71}},{"value":"/ the lines given to the closure *do* include the line terminator, if one","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":223854,"byte_end":223929,"line_start":113,"line_end":113,"column_start":5,"column_end":80}},{"value":"/ exists.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":223934,"byte_end":223945,"line_start":114,"line_end":114,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":223950,"byte_end":223953,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ This routine is useful for iterating over lines as quickly as","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":223958,"byte_end":224023,"line_start":116,"line_end":116,"column_start":5,"column_end":70}},{"value":"/ possible. Namely, a single allocation is reused for each line.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":224028,"byte_end":224094,"line_start":117,"line_end":117,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":224099,"byte_end":224102,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":224107,"byte_end":224121,"line_start":119,"line_end":119,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":224126,"byte_end":224129,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":224134,"byte_end":224150,"line_start":121,"line_end":121,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":224155,"byte_end":224158,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":224163,"byte_end":224170,"line_start":123,"line_end":123,"column_start":5,"column_end":12}},{"value":"/ use std::io;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":224175,"byte_end":224191,"line_start":124,"line_end":124,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":224196,"byte_end":224199,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ use bstr::io::BufReadExt;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":224204,"byte_end":224233,"line_start":126,"line_end":126,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":224238,"byte_end":224241,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ # fn example() -> Result<(), io::Error> {","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":224246,"byte_end":224291,"line_start":128,"line_end":128,"column_start":5,"column_end":50}},{"value":"/ let cursor = io::Cursor::new(b\"lorem\\nipsum\\r\\ndolor\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":224296,"byte_end":224355,"line_start":129,"line_end":129,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":224360,"byte_end":224363,"line_start":130,"line_end":130,"column_start":5,"column_end":8}},{"value":"/ let mut lines = vec![];","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":224368,"byte_end":224395,"line_start":131,"line_end":131,"column_start":5,"column_end":32}},{"value":"/ cursor.for_byte_line_with_terminator(|line| {","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":224400,"byte_end":224449,"line_start":132,"line_end":132,"column_start":5,"column_end":54}},{"value":"/     lines.push(line.to_vec());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":224454,"byte_end":224488,"line_start":133,"line_end":133,"column_start":5,"column_end":39}},{"value":"/     Ok(true)","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":224493,"byte_end":224509,"line_start":134,"line_end":134,"column_start":5,"column_end":21}},{"value":"/ })?;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":224514,"byte_end":224522,"line_start":135,"line_end":135,"column_start":5,"column_end":13}},{"value":"/ assert_eq!(lines.len(), 3);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":224527,"byte_end":224558,"line_start":136,"line_end":136,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(lines[0], \"lorem\\n\".as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":224563,"byte_end":224610,"line_start":137,"line_end":137,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(lines[1], \"ipsum\\r\\n\".as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":224615,"byte_end":224664,"line_start":138,"line_end":138,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(lines[2], \"dolor\".as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":224669,"byte_end":224714,"line_start":139,"line_end":139,"column_start":5,"column_end":50}},{"value":"/ # Ok(()) }; example().unwrap()","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":224719,"byte_end":224753,"line_start":140,"line_end":140,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":224758,"byte_end":224765,"line_start":141,"line_end":141,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":1448},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":226974,"byte_end":226983,"line_start":207,"line_end":207,"column_start":12,"column_end":21},"name":"ByteLines","qualname":"::io::ByteLines","value":"ByteLines {  }","parent":null,"children":[{"krate":0,"index":1450}],"decl_id":null,"docs":" An iterator over lines from an instance of\n [`std::io::BufRead`](https://doc.rust-lang.org/std/io/trait.BufRead.html).","sig":null,"attributes":[{"value":"/ An iterator over lines from an instance of","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":226631,"byte_end":226677,"line_start":198,"line_end":198,"column_start":1,"column_end":47}},{"value":"/ [`std::io::BufRead`](https://doc.rust-lang.org/std/io/trait.BufRead.html).","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":226678,"byte_end":226756,"line_start":199,"line_end":199,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":226757,"byte_end":226760,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"/ This iterator is generally created by calling the","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":226761,"byte_end":226814,"line_start":201,"line_end":201,"column_start":1,"column_end":54}},{"value":"/ [`byte_lines`](trait.BufReadExt.html#method.byte_lines)","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":226815,"byte_end":226874,"line_start":202,"line_end":202,"column_start":1,"column_end":60}},{"value":"/ method on the","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":226875,"byte_end":226892,"line_start":203,"line_end":203,"column_start":1,"column_end":18}},{"value":"/ [`BufReadExt`](trait.BufReadExt.html)","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":226893,"byte_end":226934,"line_start":204,"line_end":204,"column_start":1,"column_end":42}},{"value":"/ trait.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":226935,"byte_end":226945,"line_start":205,"line_end":205,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":1658},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":295084,"byte_end":295093,"line_start":30,"line_end":30,"column_start":12,"column_end":21},"name":"Graphemes","qualname":"::unicode::grapheme::Graphemes","value":"Graphemes {  }","parent":null,"children":[{"krate":0,"index":1660}],"decl_id":null,"docs":" An iterator over grapheme clusters in a byte string.","sig":null,"attributes":[{"value":"/ An iterator over grapheme clusters in a byte string.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":293976,"byte_end":294032,"line_start":9,"line_end":9,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":294033,"byte_end":294036,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ This iterator is typically constructed by","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":294037,"byte_end":294082,"line_start":11,"line_end":11,"column_start":1,"column_end":46}},{"value":"/ [`ByteSlice::graphemes`](trait.ByteSlice.html#method.graphemes).","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":294083,"byte_end":294151,"line_start":12,"line_end":12,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":294152,"byte_end":294155,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Unicode defines a grapheme cluster as an *approximation* to a single user","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":294156,"byte_end":294233,"line_start":14,"line_end":14,"column_start":1,"column_end":78}},{"value":"/ visible character. A grapheme cluster, or just \"grapheme,\" is made up of","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":294234,"byte_end":294310,"line_start":15,"line_end":15,"column_start":1,"column_end":77}},{"value":"/ one or more codepoints. For end user oriented tasks, one should generally","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":294311,"byte_end":294388,"line_start":16,"line_end":16,"column_start":1,"column_end":78}},{"value":"/ prefer using graphemes instead of [`Chars`](struct.Chars.html), which","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":294389,"byte_end":294462,"line_start":17,"line_end":17,"column_start":1,"column_end":74}},{"value":"/ always yields one codepoint at a time.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":294463,"byte_end":294505,"line_start":18,"line_end":18,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":294506,"byte_end":294509,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ Since graphemes are made up of one or more codepoints, this iterator yields","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":294510,"byte_end":294589,"line_start":20,"line_end":20,"column_start":1,"column_end":80}},{"value":"/ `&str` elements. When invalid UTF-8 is encountered, replacement codepoints","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":294590,"byte_end":294668,"line_start":21,"line_end":21,"column_start":1,"column_end":79}},{"value":"/ are [substituted](index.html#handling-of-invalid-utf-8).","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":294669,"byte_end":294729,"line_start":22,"line_end":22,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":294730,"byte_end":294733,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ This iterator can be used in reverse. When reversed, exactly the same","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":294734,"byte_end":294807,"line_start":24,"line_end":24,"column_start":1,"column_end":74}},{"value":"/ set of grapheme clusters are yielded, but in reverse order.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":294808,"byte_end":294871,"line_start":25,"line_end":25,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":294872,"byte_end":294875,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ This iterator only yields *extended* grapheme clusters, in accordance with","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":294876,"byte_end":294954,"line_start":27,"line_end":27,"column_start":1,"column_end":79}},{"value":"/ [UAX #29](https://www.unicode.org/reports/tr29/tr29-33.html#Grapheme_Cluster_Boundaries).","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":294955,"byte_end":295048,"line_start":28,"line_end":28,"column_start":1,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":858},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":295805,"byte_end":295813,"line_start":59,"line_end":59,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<Graphemes>::as_bytes","value":"fn (&self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":" View the underlying data as a subslice of the original data.","sig":null,"attributes":[{"value":"/ View the underlying data as a subslice of the original data.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":295237,"byte_end":295301,"line_start":39,"line_end":39,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":295306,"byte_end":295309,"line_start":40,"line_end":40,"column_start":5,"column_end":8}},{"value":"/ The slice returned has the same lifetime as the original slice, and so","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":295314,"byte_end":295388,"line_start":41,"line_end":41,"column_start":5,"column_end":79}},{"value":"/ the iterator can continue to be used while this exists.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":295393,"byte_end":295452,"line_start":42,"line_end":42,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":295457,"byte_end":295460,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":295465,"byte_end":295479,"line_start":44,"line_end":44,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":295484,"byte_end":295487,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":295492,"byte_end":295499,"line_start":46,"line_end":46,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":295504,"byte_end":295528,"line_start":47,"line_end":47,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":295533,"byte_end":295536,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ let mut it = b\"abc\".graphemes();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":295541,"byte_end":295577,"line_start":49,"line_end":49,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":295582,"byte_end":295585,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b\"abc\", it.as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":295590,"byte_end":295628,"line_start":51,"line_end":51,"column_start":5,"column_end":43}},{"value":"/ it.next();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":295633,"byte_end":295647,"line_start":52,"line_end":52,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(b\"bc\", it.as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":295652,"byte_end":295689,"line_start":53,"line_end":53,"column_start":5,"column_end":42}},{"value":"/ it.next();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":295694,"byte_end":295708,"line_start":54,"line_end":54,"column_start":5,"column_end":19}},{"value":"/ it.next();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":295713,"byte_end":295727,"line_start":55,"line_end":55,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(b\"\", it.as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":295732,"byte_end":295767,"line_start":56,"line_end":56,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":295772,"byte_end":295779,"line_start":57,"line_end":57,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":295784,"byte_end":295793,"line_start":58,"line_end":58,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1667},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":298196,"byte_end":298211,"line_start":120,"line_end":120,"column_start":12,"column_end":27},"name":"GraphemeIndices","qualname":"::unicode::grapheme::GraphemeIndices","value":"GraphemeIndices {  }","parent":null,"children":[{"krate":0,"index":1669},{"krate":0,"index":1670},{"krate":0,"index":1671}],"decl_id":null,"docs":" An iterator over grapheme clusters in a byte string and their byte index\n positions.","sig":null,"attributes":[{"value":"/ An iterator over grapheme clusters in a byte string and their byte index","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":296481,"byte_end":296557,"line_start":90,"line_end":90,"column_start":1,"column_end":77}},{"value":"/ positions.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":296558,"byte_end":296572,"line_start":91,"line_end":91,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":296573,"byte_end":296576,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ This iterator is typically constructed by","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":296577,"byte_end":296622,"line_start":93,"line_end":93,"column_start":1,"column_end":46}},{"value":"/ [`ByteSlice::grapheme_indices`](trait.ByteSlice.html#method.grapheme_indices).","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":296623,"byte_end":296705,"line_start":94,"line_end":94,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":296706,"byte_end":296709,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/ Unicode defines a grapheme cluster as an *approximation* to a single user","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":296710,"byte_end":296787,"line_start":96,"line_end":96,"column_start":1,"column_end":78}},{"value":"/ visible character. A grapheme cluster, or just \"grapheme,\" is made up of","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":296788,"byte_end":296864,"line_start":97,"line_end":97,"column_start":1,"column_end":77}},{"value":"/ one or more codepoints. For end user oriented tasks, one should generally","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":296865,"byte_end":296942,"line_start":98,"line_end":98,"column_start":1,"column_end":78}},{"value":"/ prefer using graphemes instead of [`Chars`](struct.Chars.html), which","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":296943,"byte_end":297016,"line_start":99,"line_end":99,"column_start":1,"column_end":74}},{"value":"/ always yields one codepoint at a time.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":297017,"byte_end":297059,"line_start":100,"line_end":100,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":297060,"byte_end":297063,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ Since graphemes are made up of one or more codepoints, this iterator","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":297064,"byte_end":297136,"line_start":102,"line_end":102,"column_start":1,"column_end":73}},{"value":"/ yields `&str` elements (along with their start and end byte offsets).","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":297137,"byte_end":297210,"line_start":103,"line_end":103,"column_start":1,"column_end":74}},{"value":"/ When invalid UTF-8 is encountered, replacement codepoints are","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":297211,"byte_end":297276,"line_start":104,"line_end":104,"column_start":1,"column_end":66}},{"value":"/ [substituted](index.html#handling-of-invalid-utf-8). Because of this, the","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":297277,"byte_end":297354,"line_start":105,"line_end":105,"column_start":1,"column_end":78}},{"value":"/ indices yielded by this iterator may not correspond to the length of the","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":297355,"byte_end":297431,"line_start":106,"line_end":106,"column_start":1,"column_end":77}},{"value":"/ grapheme cluster yielded with those indices. For example, when this","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":297432,"byte_end":297503,"line_start":107,"line_end":107,"column_start":1,"column_end":72}},{"value":"/ iterator encounters `\\xFF` in the byte string, then it will yield a pair","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":297504,"byte_end":297580,"line_start":108,"line_end":108,"column_start":1,"column_end":77}},{"value":"/ of indices ranging over a single byte, but will provide an `&str`","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":297581,"byte_end":297650,"line_start":109,"line_end":109,"column_start":1,"column_end":70}},{"value":"/ equivalent to `\"\\u{FFFD}\"`, which is three bytes in length. However, when","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":297651,"byte_end":297728,"line_start":110,"line_end":110,"column_start":1,"column_end":78}},{"value":"/ given only valid UTF-8, then all indices are in exact correspondence with","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":297729,"byte_end":297806,"line_start":111,"line_end":111,"column_start":1,"column_end":78}},{"value":"/ their paired grapheme cluster.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":297807,"byte_end":297841,"line_start":112,"line_end":112,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":297842,"byte_end":297845,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ This iterator can be used in reverse. When reversed, exactly the same","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":297846,"byte_end":297919,"line_start":114,"line_end":114,"column_start":1,"column_end":74}},{"value":"/ set of grapheme clusters are yielded, but in reverse order.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":297920,"byte_end":297983,"line_start":115,"line_end":115,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":297984,"byte_end":297987,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ This iterator only yields *extended* grapheme clusters, in accordance with","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":297988,"byte_end":298066,"line_start":117,"line_end":117,"column_start":1,"column_end":79}},{"value":"/ [UAX #29](https://www.unicode.org/reports/tr29/tr29-33.html#Grapheme_Cluster_Boundaries).","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":298067,"byte_end":298160,"line_start":118,"line_end":118,"column_start":1,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":869},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":299047,"byte_end":299055,"line_start":151,"line_end":151,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<GraphemeIndices>::as_bytes","value":"fn (&self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":" View the underlying data as a subslice of the original data.","sig":null,"attributes":[{"value":"/ View the underlying data as a subslice of the original data.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":298472,"byte_end":298536,"line_start":131,"line_end":131,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":298541,"byte_end":298544,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ The slice returned has the same lifetime as the original slice, and so","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":298549,"byte_end":298623,"line_start":133,"line_end":133,"column_start":5,"column_end":79}},{"value":"/ the iterator can continue to be used while this exists.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":298628,"byte_end":298687,"line_start":134,"line_end":134,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":298692,"byte_end":298695,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":298700,"byte_end":298714,"line_start":136,"line_end":136,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":298719,"byte_end":298722,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":298727,"byte_end":298734,"line_start":138,"line_end":138,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":298739,"byte_end":298763,"line_start":139,"line_end":139,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":298768,"byte_end":298771,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ let mut it = b\"abc\".grapheme_indices();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":298776,"byte_end":298819,"line_start":141,"line_end":141,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":298824,"byte_end":298827,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b\"abc\", it.as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":298832,"byte_end":298870,"line_start":143,"line_end":143,"column_start":5,"column_end":43}},{"value":"/ it.next();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":298875,"byte_end":298889,"line_start":144,"line_end":144,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(b\"bc\", it.as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":298894,"byte_end":298931,"line_start":145,"line_end":145,"column_start":5,"column_end":42}},{"value":"/ it.next();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":298936,"byte_end":298950,"line_start":146,"line_end":146,"column_start":5,"column_end":19}},{"value":"/ it.next();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":298955,"byte_end":298969,"line_start":147,"line_end":147,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(b\"\", it.as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":298974,"byte_end":299009,"line_start":148,"line_end":148,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":299014,"byte_end":299021,"line_start":149,"line_end":149,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":299026,"byte_end":299035,"line_start":150,"line_end":150,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1678},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":306899,"byte_end":306908,"line_start":22,"line_end":22,"column_start":12,"column_end":21},"name":"Sentences","qualname":"::unicode::sentence::Sentences","value":"Sentences {  }","parent":null,"children":[{"krate":0,"index":1680}],"decl_id":null,"docs":" An iterator over sentences in a byte string.","sig":null,"attributes":[{"value":"/ An iterator over sentences in a byte string.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":306200,"byte_end":306248,"line_start":7,"line_end":7,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":306249,"byte_end":306252,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ This iterator is typically constructed by","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":306253,"byte_end":306298,"line_start":9,"line_end":9,"column_start":1,"column_end":46}},{"value":"/ [`ByteSlice::sentences`](trait.ByteSlice.html#method.sentences).","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":306299,"byte_end":306367,"line_start":10,"line_end":10,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":306368,"byte_end":306371,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ Sentences typically include their trailing punctuation and whitespace.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":306372,"byte_end":306446,"line_start":12,"line_end":12,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":306447,"byte_end":306450,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Since sentences are made up of one or more codepoints, this iterator yields","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":306451,"byte_end":306530,"line_start":14,"line_end":14,"column_start":1,"column_end":80}},{"value":"/ `&str` elements. When invalid UTF-8 is encountered, replacement codepoints","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":306531,"byte_end":306609,"line_start":15,"line_end":15,"column_start":1,"column_end":79}},{"value":"/ are [substituted](index.html#handling-of-invalid-utf-8).","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":306610,"byte_end":306670,"line_start":16,"line_end":16,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":306671,"byte_end":306674,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ This iterator yields words in accordance with the default sentence boundary","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":306675,"byte_end":306754,"line_start":18,"line_end":18,"column_start":1,"column_end":80}},{"value":"/ rules specified in","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":306755,"byte_end":306777,"line_start":19,"line_end":19,"column_start":1,"column_end":23}},{"value":"/ [UAX #29](https://www.unicode.org/reports/tr29/tr29-33.html#Sentence_Boundaries).","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":306778,"byte_end":306863,"line_start":20,"line_end":20,"column_start":1,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":890},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":307703,"byte_end":307711,"line_start":51,"line_end":51,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<Sentences>::as_bytes","value":"fn (&self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":" View the underlying data as a subslice of the original data.","sig":null,"attributes":[{"value":"/ View the underlying data as a subslice of the original data.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":307052,"byte_end":307116,"line_start":31,"line_end":31,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":307121,"byte_end":307124,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ The slice returned has the same lifetime as the original slice, and so","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":307129,"byte_end":307203,"line_start":33,"line_end":33,"column_start":5,"column_end":79}},{"value":"/ the iterator can continue to be used while this exists.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":307208,"byte_end":307267,"line_start":34,"line_end":34,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":307272,"byte_end":307275,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":307280,"byte_end":307294,"line_start":36,"line_end":36,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":307299,"byte_end":307302,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":307307,"byte_end":307314,"line_start":38,"line_end":38,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":307319,"byte_end":307343,"line_start":39,"line_end":39,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":307348,"byte_end":307351,"line_start":40,"line_end":40,"column_start":5,"column_end":8}},{"value":"/ let mut it = b\"I want this. Not that. Right now.\".sentences();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":307356,"byte_end":307422,"line_start":41,"line_end":41,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":307427,"byte_end":307430,"line_start":42,"line_end":42,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&b\"I want this. Not that. Right now.\"[..], it.as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":307435,"byte_end":307508,"line_start":43,"line_end":43,"column_start":5,"column_end":78}},{"value":"/ it.next();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":307513,"byte_end":307527,"line_start":44,"line_end":44,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(b\"Not that. Right now.\", it.as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":307532,"byte_end":307587,"line_start":45,"line_end":45,"column_start":5,"column_end":60}},{"value":"/ it.next();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":307592,"byte_end":307606,"line_start":46,"line_end":46,"column_start":5,"column_end":19}},{"value":"/ it.next();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":307611,"byte_end":307625,"line_start":47,"line_end":47,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(b\"\", it.as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":307630,"byte_end":307665,"line_start":48,"line_end":48,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":307670,"byte_end":307677,"line_start":49,"line_end":49,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":307682,"byte_end":307691,"line_start":50,"line_end":50,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1687},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":309345,"byte_end":309360,"line_start":93,"line_end":93,"column_start":12,"column_end":27},"name":"SentenceIndices","qualname":"::unicode::sentence::SentenceIndices","value":"SentenceIndices {  }","parent":null,"children":[{"krate":0,"index":1689},{"krate":0,"index":1690}],"decl_id":null,"docs":" An iterator over sentences in a byte string, along with their byte offsets.","sig":null,"attributes":[{"value":"/ An iterator over sentences in a byte string, along with their byte offsets.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":308063,"byte_end":308142,"line_start":70,"line_end":70,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":308143,"byte_end":308146,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ This iterator is typically constructed by","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":308147,"byte_end":308192,"line_start":72,"line_end":72,"column_start":1,"column_end":46}},{"value":"/ [`ByteSlice::sentence_indices`](trait.ByteSlice.html#method.sentence_indices).","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":308193,"byte_end":308275,"line_start":73,"line_end":73,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":308276,"byte_end":308279,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ Sentences typically include their trailing punctuation and whitespace.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":308280,"byte_end":308354,"line_start":75,"line_end":75,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":308355,"byte_end":308358,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ Since sentences are made up of one or more codepoints, this iterator","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":308359,"byte_end":308431,"line_start":77,"line_end":77,"column_start":1,"column_end":73}},{"value":"/ yields `&str` elements (along with their start and end byte offsets).","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":308432,"byte_end":308505,"line_start":78,"line_end":78,"column_start":1,"column_end":74}},{"value":"/ When invalid UTF-8 is encountered, replacement codepoints are","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":308506,"byte_end":308571,"line_start":79,"line_end":79,"column_start":1,"column_end":66}},{"value":"/ [substituted](index.html#handling-of-invalid-utf-8). Because of this, the","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":308572,"byte_end":308649,"line_start":80,"line_end":80,"column_start":1,"column_end":78}},{"value":"/ indices yielded by this iterator may not correspond to the length of the","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":308650,"byte_end":308726,"line_start":81,"line_end":81,"column_start":1,"column_end":77}},{"value":"/ sentence yielded with those indices. For example, when this iterator","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":308727,"byte_end":308799,"line_start":82,"line_end":82,"column_start":1,"column_end":73}},{"value":"/ encounters `\\xFF` in the byte string, then it will yield a pair of indices","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":308800,"byte_end":308878,"line_start":83,"line_end":83,"column_start":1,"column_end":79}},{"value":"/ ranging over a single byte, but will provide an `&str` equivalent to","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":308879,"byte_end":308951,"line_start":84,"line_end":84,"column_start":1,"column_end":73}},{"value":"/ `\"\\u{FFFD}\"`, which is three bytes in length. However, when given only","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":308952,"byte_end":309026,"line_start":85,"line_end":85,"column_start":1,"column_end":75}},{"value":"/ valid UTF-8, then all indices are in exact correspondence with their paired","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":309027,"byte_end":309106,"line_start":86,"line_end":86,"column_start":1,"column_end":80}},{"value":"/ word.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":309107,"byte_end":309116,"line_start":87,"line_end":87,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":309117,"byte_end":309120,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ This iterator yields words in accordance with the default sentence boundary","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":309121,"byte_end":309200,"line_start":89,"line_end":89,"column_start":1,"column_end":80}},{"value":"/ rules specified in","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":309201,"byte_end":309223,"line_start":90,"line_end":90,"column_start":1,"column_end":23}},{"value":"/ [UAX #29](https://www.unicode.org/reports/tr29/tr29-33.html#Sentence_Boundaries).","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":309224,"byte_end":309309,"line_start":91,"line_end":91,"column_start":1,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":898},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":310228,"byte_end":310236,"line_start":123,"line_end":123,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<SentenceIndices>::as_bytes","value":"fn (&self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":" View the underlying data as a subslice of the original data.","sig":null,"attributes":[{"value":"/ View the underlying data as a subslice of the original data.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":309570,"byte_end":309634,"line_start":103,"line_end":103,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":309639,"byte_end":309642,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ The slice returned has the same lifetime as the original slice, and so","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":309647,"byte_end":309721,"line_start":105,"line_end":105,"column_start":5,"column_end":79}},{"value":"/ the iterator can continue to be used while this exists.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":309726,"byte_end":309785,"line_start":106,"line_end":106,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":309790,"byte_end":309793,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":309798,"byte_end":309812,"line_start":108,"line_end":108,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":309817,"byte_end":309820,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":309825,"byte_end":309832,"line_start":110,"line_end":110,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":309837,"byte_end":309861,"line_start":111,"line_end":111,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":309866,"byte_end":309869,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ let mut it = b\"I want this. Not that. Right now.\".sentence_indices();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":309874,"byte_end":309947,"line_start":113,"line_end":113,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":309952,"byte_end":309955,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&b\"I want this. Not that. Right now.\"[..], it.as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":309960,"byte_end":310033,"line_start":115,"line_end":115,"column_start":5,"column_end":78}},{"value":"/ it.next();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":310038,"byte_end":310052,"line_start":116,"line_end":116,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(b\"Not that. Right now.\", it.as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":310057,"byte_end":310112,"line_start":117,"line_end":117,"column_start":5,"column_end":60}},{"value":"/ it.next();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":310117,"byte_end":310131,"line_start":118,"line_end":118,"column_start":5,"column_end":19}},{"value":"/ it.next();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":310136,"byte_end":310150,"line_start":119,"line_end":119,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(b\"\", it.as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":310155,"byte_end":310190,"line_start":120,"line_end":120,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":310195,"byte_end":310202,"line_start":121,"line_end":121,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":310207,"byte_end":310216,"line_start":122,"line_end":122,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1697},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":314852,"byte_end":314857,"line_start":29,"line_end":29,"column_start":12,"column_end":17},"name":"Words","qualname":"::unicode::word::Words","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over words in a byte string.","sig":null,"attributes":[{"value":"/ An iterator over words in a byte string.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":313756,"byte_end":313800,"line_start":8,"line_end":8,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":313801,"byte_end":313804,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ This iterator is typically constructed by","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":313805,"byte_end":313850,"line_start":10,"line_end":10,"column_start":1,"column_end":46}},{"value":"/ [`ByteSlice::words`](trait.ByteSlice.html#method.words).","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":313851,"byte_end":313911,"line_start":11,"line_end":11,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":313912,"byte_end":313915,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ This is similar to the [`WordsWithBreaks`](struct.WordsWithBreaks.html)","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":313916,"byte_end":313991,"line_start":13,"line_end":13,"column_start":1,"column_end":76}},{"value":"/ iterator, except it only returns elements that contain a \"word\" character.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":313992,"byte_end":314070,"line_start":14,"line_end":14,"column_start":1,"column_end":79}},{"value":"/ A word character is defined by UTS #18 (Annex C) to be the combination","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":314071,"byte_end":314145,"line_start":15,"line_end":15,"column_start":1,"column_end":75}},{"value":"/ of the `Alphabetic` and `Join_Control` properties, along with the","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":314146,"byte_end":314215,"line_start":16,"line_end":16,"column_start":1,"column_end":70}},{"value":"/ `Decimal_Number`, `Mark` and `Connector_Punctuation` general categories.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":314216,"byte_end":314292,"line_start":17,"line_end":17,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":314293,"byte_end":314296,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ Since words are made up of one or more codepoints, this iterator yields","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":314297,"byte_end":314372,"line_start":19,"line_end":19,"column_start":1,"column_end":76}},{"value":"/ `&str` elements. When invalid UTF-8 is encountered, replacement codepoints","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":314373,"byte_end":314451,"line_start":20,"line_end":20,"column_start":1,"column_end":79}},{"value":"/ are [substituted](index.html#handling-of-invalid-utf-8).","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":314452,"byte_end":314512,"line_start":21,"line_end":21,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":314513,"byte_end":314516,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ This iterator yields words in accordance with the default word boundary","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":314517,"byte_end":314592,"line_start":23,"line_end":23,"column_start":1,"column_end":76}},{"value":"/ rules specified in","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":314593,"byte_end":314615,"line_start":24,"line_end":24,"column_start":1,"column_end":23}},{"value":"/ [UAX #29](https://www.unicode.org/reports/tr29/tr29-33.html#Word_Boundaries).","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":314616,"byte_end":314697,"line_start":25,"line_end":25,"column_start":1,"column_end":82}},{"value":"/ In particular, this may not be suitable for Japanese and Chinese scripts","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":314698,"byte_end":314774,"line_start":26,"line_end":26,"column_start":1,"column_end":77}},{"value":"/ that do not use spaces between words.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":314775,"byte_end":314816,"line_start":27,"line_end":27,"column_start":1,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":920},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":315590,"byte_end":315598,"line_start":56,"line_end":56,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<Words>::as_bytes","value":"fn (&self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":" View the underlying data as a subslice of the original data.","sig":null,"attributes":[{"value":"/ View the underlying data as a subslice of the original data.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":315008,"byte_end":315072,"line_start":36,"line_end":36,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":315077,"byte_end":315080,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ The slice returned has the same lifetime as the original slice, and so","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":315085,"byte_end":315159,"line_start":38,"line_end":38,"column_start":5,"column_end":79}},{"value":"/ the iterator can continue to be used while this exists.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":315164,"byte_end":315223,"line_start":39,"line_end":39,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":315228,"byte_end":315231,"line_start":40,"line_end":40,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":315236,"byte_end":315250,"line_start":41,"line_end":41,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":315255,"byte_end":315258,"line_start":42,"line_end":42,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":315263,"byte_end":315270,"line_start":43,"line_end":43,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":315275,"byte_end":315299,"line_start":44,"line_end":44,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":315304,"byte_end":315307,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ let mut it = b\"foo bar baz\".words();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":315312,"byte_end":315352,"line_start":46,"line_end":46,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":315357,"byte_end":315360,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b\"foo bar baz\", it.as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":315365,"byte_end":315411,"line_start":48,"line_end":48,"column_start":5,"column_end":51}},{"value":"/ it.next();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":315416,"byte_end":315430,"line_start":49,"line_end":49,"column_start":5,"column_end":19}},{"value":"/ it.next();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":315435,"byte_end":315449,"line_start":50,"line_end":50,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(b\" baz\", it.as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":315454,"byte_end":315493,"line_start":51,"line_end":51,"column_start":5,"column_end":44}},{"value":"/ it.next();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":315498,"byte_end":315512,"line_start":52,"line_end":52,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(b\"\", it.as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":315517,"byte_end":315552,"line_start":53,"line_end":53,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":315557,"byte_end":315564,"line_start":54,"line_end":54,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":315569,"byte_end":315578,"line_start":55,"line_end":55,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1707},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":317647,"byte_end":317658,"line_start":104,"line_end":104,"column_start":12,"column_end":23},"name":"WordIndices","qualname":"::unicode::word::WordIndices","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over words in a byte string and their byte index positions.","sig":null,"attributes":[{"value":"/ An iterator over words in a byte string and their byte index positions.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":315960,"byte_end":316035,"line_start":75,"line_end":75,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":316036,"byte_end":316039,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ This iterator is typically constructed by","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":316040,"byte_end":316085,"line_start":77,"line_end":77,"column_start":1,"column_end":46}},{"value":"/ [`ByteSlice::word_indices`](trait.ByteSlice.html#method.word_indices).","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":316086,"byte_end":316160,"line_start":78,"line_end":78,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":316161,"byte_end":316164,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ This is similar to the","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":316165,"byte_end":316191,"line_start":80,"line_end":80,"column_start":1,"column_end":27}},{"value":"/ [`WordsWithBreakIndices`](struct.WordsWithBreakIndices.html) iterator,","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":316192,"byte_end":316266,"line_start":81,"line_end":81,"column_start":1,"column_end":75}},{"value":"/ except it only returns elements that contain a \"word\" character. A","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":316267,"byte_end":316337,"line_start":82,"line_end":82,"column_start":1,"column_end":71}},{"value":"/ word character is defined by UTS #18 (Annex C) to be the combination","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":316338,"byte_end":316410,"line_start":83,"line_end":83,"column_start":1,"column_end":73}},{"value":"/ of the `Alphabetic` and `Join_Control` properties, along with the","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":316411,"byte_end":316480,"line_start":84,"line_end":84,"column_start":1,"column_end":70}},{"value":"/ `Decimal_Number`, `Mark` and `Connector_Punctuation` general categories.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":316481,"byte_end":316557,"line_start":85,"line_end":85,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":316558,"byte_end":316561,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ Since words are made up of one or more codepoints, this iterator","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":316562,"byte_end":316630,"line_start":87,"line_end":87,"column_start":1,"column_end":69}},{"value":"/ yields `&str` elements (along with their start and end byte offsets).","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":316631,"byte_end":316704,"line_start":88,"line_end":88,"column_start":1,"column_end":74}},{"value":"/ When invalid UTF-8 is encountered, replacement codepoints are","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":316705,"byte_end":316770,"line_start":89,"line_end":89,"column_start":1,"column_end":66}},{"value":"/ [substituted](index.html#handling-of-invalid-utf-8). Because of this, the","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":316771,"byte_end":316848,"line_start":90,"line_end":90,"column_start":1,"column_end":78}},{"value":"/ indices yielded by this iterator may not correspond to the length of the","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":316849,"byte_end":316925,"line_start":91,"line_end":91,"column_start":1,"column_end":77}},{"value":"/ word yielded with those indices. For example, when this iterator encounters","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":316926,"byte_end":317005,"line_start":92,"line_end":92,"column_start":1,"column_end":80}},{"value":"/ `\\xFF` in the byte string, then it will yield a pair of indices ranging","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":317006,"byte_end":317081,"line_start":93,"line_end":93,"column_start":1,"column_end":76}},{"value":"/ over a single byte, but will provide an `&str` equivalent to `\"\\u{FFFD}\"`,","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":317082,"byte_end":317160,"line_start":94,"line_end":94,"column_start":1,"column_end":79}},{"value":"/ which is three bytes in length. However, when given only valid UTF-8, then","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":317161,"byte_end":317239,"line_start":95,"line_end":95,"column_start":1,"column_end":79}},{"value":"/ all indices are in exact correspondence with their paired word.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":317240,"byte_end":317307,"line_start":96,"line_end":96,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":317308,"byte_end":317311,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ This iterator yields words in accordance with the default word boundary","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":317312,"byte_end":317387,"line_start":98,"line_end":98,"column_start":1,"column_end":76}},{"value":"/ rules specified in","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":317388,"byte_end":317410,"line_start":99,"line_end":99,"column_start":1,"column_end":23}},{"value":"/ [UAX #29](https://www.unicode.org/reports/tr29/tr29-33.html#Word_Boundaries).","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":317411,"byte_end":317492,"line_start":100,"line_end":100,"column_start":1,"column_end":82}},{"value":"/ In particular, this may not be suitable for Japanese and Chinese scripts","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":317493,"byte_end":317569,"line_start":101,"line_end":101,"column_start":1,"column_end":77}},{"value":"/ that do not use spaces between words.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":317570,"byte_end":317611,"line_start":102,"line_end":102,"column_start":1,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":928},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":318447,"byte_end":318455,"line_start":132,"line_end":132,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<WordIndices>::as_bytes","value":"fn (&self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":" View the underlying data as a subslice of the original data.","sig":null,"attributes":[{"value":"/ View the underlying data as a subslice of the original data.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":317839,"byte_end":317903,"line_start":111,"line_end":111,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":317908,"byte_end":317911,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ The slice returned has the same lifetime as the original slice, and so","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":317916,"byte_end":317990,"line_start":113,"line_end":113,"column_start":5,"column_end":79}},{"value":"/ the iterator can continue to be used while this exists.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":317995,"byte_end":318054,"line_start":114,"line_end":114,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":318059,"byte_end":318062,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":318067,"byte_end":318081,"line_start":116,"line_end":116,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":318086,"byte_end":318089,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":318094,"byte_end":318101,"line_start":118,"line_end":118,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":318106,"byte_end":318130,"line_start":119,"line_end":119,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":318135,"byte_end":318138,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ let mut it = b\"foo bar baz\".word_indices();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":318143,"byte_end":318190,"line_start":121,"line_end":121,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":318195,"byte_end":318198,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b\"foo bar baz\", it.as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":318203,"byte_end":318249,"line_start":123,"line_end":123,"column_start":5,"column_end":51}},{"value":"/ it.next();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":318254,"byte_end":318268,"line_start":124,"line_end":124,"column_start":5,"column_end":19}},{"value":"/ it.next();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":318273,"byte_end":318287,"line_start":125,"line_end":125,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(b\" baz\", it.as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":318292,"byte_end":318331,"line_start":126,"line_end":126,"column_start":5,"column_end":44}},{"value":"/ it.next();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":318336,"byte_end":318350,"line_start":127,"line_end":127,"column_start":5,"column_end":19}},{"value":"/ it.next();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":318355,"byte_end":318369,"line_start":128,"line_end":128,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(b\"\", it.as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":318374,"byte_end":318409,"line_start":129,"line_end":129,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":318414,"byte_end":318421,"line_start":130,"line_end":130,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":318426,"byte_end":318435,"line_start":131,"line_end":131,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1717},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":319906,"byte_end":319921,"line_start":171,"line_end":171,"column_start":12,"column_end":27},"name":"WordsWithBreaks","qualname":"::unicode::word::WordsWithBreaks","value":"WordsWithBreaks {  }","parent":null,"children":[{"krate":0,"index":1719}],"decl_id":null,"docs":" An iterator over all word breaks in a byte string.","sig":null,"attributes":[{"value":"/ An iterator over all word breaks in a byte string.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":318883,"byte_end":318937,"line_start":151,"line_end":151,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":318938,"byte_end":318941,"line_start":152,"line_end":152,"column_start":1,"column_end":4}},{"value":"/ This iterator is typically constructed by","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":318942,"byte_end":318987,"line_start":153,"line_end":153,"column_start":1,"column_end":46}},{"value":"/ [`ByteSlice::words_with_breaks`](trait.ByteSlice.html#method.words_with_breaks).","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":318988,"byte_end":319072,"line_start":154,"line_end":154,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":319073,"byte_end":319076,"line_start":155,"line_end":155,"column_start":1,"column_end":4}},{"value":"/ This iterator yields not only all words, but the content that comes between","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":319077,"byte_end":319156,"line_start":156,"line_end":156,"column_start":1,"column_end":80}},{"value":"/ words. In particular, if all elements yielded by this iterator are","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":319157,"byte_end":319227,"line_start":157,"line_end":157,"column_start":1,"column_end":71}},{"value":"/ concatenated, then the result is the original string (subject to Unicode","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":319228,"byte_end":319304,"line_start":158,"line_end":158,"column_start":1,"column_end":77}},{"value":"/ replacement codepoint substitutions).","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":319305,"byte_end":319346,"line_start":159,"line_end":159,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":319347,"byte_end":319350,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ Since words are made up of one or more codepoints, this iterator yields","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":319351,"byte_end":319426,"line_start":161,"line_end":161,"column_start":1,"column_end":76}},{"value":"/ `&str` elements. When invalid UTF-8 is encountered, replacement codepoints","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":319427,"byte_end":319505,"line_start":162,"line_end":162,"column_start":1,"column_end":79}},{"value":"/ are [substituted](index.html#handling-of-invalid-utf-8).","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":319506,"byte_end":319566,"line_start":163,"line_end":163,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":319567,"byte_end":319570,"line_start":164,"line_end":164,"column_start":1,"column_end":4}},{"value":"/ This iterator yields words in accordance with the default word boundary","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":319571,"byte_end":319646,"line_start":165,"line_end":165,"column_start":1,"column_end":76}},{"value":"/ rules specified in","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":319647,"byte_end":319669,"line_start":166,"line_end":166,"column_start":1,"column_end":23}},{"value":"/ [UAX #29](https://www.unicode.org/reports/tr29/tr29-33.html#Word_Boundaries).","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":319670,"byte_end":319751,"line_start":167,"line_end":167,"column_start":1,"column_end":82}},{"value":"/ In particular, this may not be suitable for Japanese and Chinese scripts","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":319752,"byte_end":319828,"line_start":168,"line_end":168,"column_start":1,"column_end":77}},{"value":"/ that do not use spaces between words.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":319829,"byte_end":319870,"line_start":169,"line_end":169,"column_start":1,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":936},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":320763,"byte_end":320771,"line_start":203,"line_end":203,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<WordsWithBreaks>::as_bytes","value":"fn (&self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":" View the underlying data as a subslice of the original data.","sig":null,"attributes":[{"value":"/ View the underlying data as a subslice of the original data.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":320083,"byte_end":320147,"line_start":180,"line_end":180,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":320152,"byte_end":320155,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ The slice returned has the same lifetime as the original slice, and so","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":320160,"byte_end":320234,"line_start":182,"line_end":182,"column_start":5,"column_end":79}},{"value":"/ the iterator can continue to be used while this exists.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":320239,"byte_end":320298,"line_start":183,"line_end":183,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":320303,"byte_end":320306,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":320311,"byte_end":320325,"line_start":185,"line_end":185,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":320330,"byte_end":320333,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":320338,"byte_end":320345,"line_start":187,"line_end":187,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":320350,"byte_end":320374,"line_start":188,"line_end":188,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":320379,"byte_end":320382,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ let mut it = b\"foo bar baz\".words_with_breaks();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":320387,"byte_end":320439,"line_start":190,"line_end":190,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":320444,"byte_end":320447,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b\"foo bar baz\", it.as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":320452,"byte_end":320498,"line_start":192,"line_end":192,"column_start":5,"column_end":51}},{"value":"/ it.next();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":320503,"byte_end":320517,"line_start":193,"line_end":193,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(b\" bar baz\", it.as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":320522,"byte_end":320565,"line_start":194,"line_end":194,"column_start":5,"column_end":48}},{"value":"/ it.next();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":320570,"byte_end":320584,"line_start":195,"line_end":195,"column_start":5,"column_end":19}},{"value":"/ it.next();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":320589,"byte_end":320603,"line_start":196,"line_end":196,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(b\" baz\", it.as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":320608,"byte_end":320647,"line_start":197,"line_end":197,"column_start":5,"column_end":44}},{"value":"/ it.next();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":320652,"byte_end":320666,"line_start":198,"line_end":198,"column_start":5,"column_end":19}},{"value":"/ it.next();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":320671,"byte_end":320685,"line_start":199,"line_end":199,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(b\"\", it.as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":320690,"byte_end":320725,"line_start":200,"line_end":200,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":320730,"byte_end":320737,"line_start":201,"line_end":201,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":320742,"byte_end":320751,"line_start":202,"line_end":202,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1726},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":322727,"byte_end":322748,"line_start":250,"line_end":250,"column_start":12,"column_end":33},"name":"WordsWithBreakIndices","qualname":"::unicode::word::WordsWithBreakIndices","value":"WordsWithBreakIndices {  }","parent":null,"children":[{"krate":0,"index":1728},{"krate":0,"index":1729}],"decl_id":null,"docs":" An iterator over all word breaks in a byte string, along with their byte\n index positions.","sig":null,"attributes":[{"value":"/ An iterator over all word breaks in a byte string, along with their byte","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":321117,"byte_end":321193,"line_start":222,"line_end":222,"column_start":1,"column_end":77}},{"value":"/ index positions.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":321194,"byte_end":321214,"line_start":223,"line_end":223,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":321215,"byte_end":321218,"line_start":224,"line_end":224,"column_start":1,"column_end":4}},{"value":"/ This iterator is typically constructed by","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":321219,"byte_end":321264,"line_start":225,"line_end":225,"column_start":1,"column_end":46}},{"value":"/ [`ByteSlice::words_with_break_indices`](trait.ByteSlice.html#method.words_with_break_indices).","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":321265,"byte_end":321363,"line_start":226,"line_end":226,"column_start":1,"column_end":99}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":321364,"byte_end":321367,"line_start":227,"line_end":227,"column_start":1,"column_end":4}},{"value":"/ This iterator yields not only all words, but the content that comes between","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":321368,"byte_end":321447,"line_start":228,"line_end":228,"column_start":1,"column_end":80}},{"value":"/ words. In particular, if all elements yielded by this iterator are","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":321448,"byte_end":321518,"line_start":229,"line_end":229,"column_start":1,"column_end":71}},{"value":"/ concatenated, then the result is the original string (subject to Unicode","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":321519,"byte_end":321595,"line_start":230,"line_end":230,"column_start":1,"column_end":77}},{"value":"/ replacement codepoint substitutions).","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":321596,"byte_end":321637,"line_start":231,"line_end":231,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":321638,"byte_end":321641,"line_start":232,"line_end":232,"column_start":1,"column_end":4}},{"value":"/ Since words are made up of one or more codepoints, this iterator","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":321642,"byte_end":321710,"line_start":233,"line_end":233,"column_start":1,"column_end":69}},{"value":"/ yields `&str` elements (along with their start and end byte offsets).","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":321711,"byte_end":321784,"line_start":234,"line_end":234,"column_start":1,"column_end":74}},{"value":"/ When invalid UTF-8 is encountered, replacement codepoints are","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":321785,"byte_end":321850,"line_start":235,"line_end":235,"column_start":1,"column_end":66}},{"value":"/ [substituted](index.html#handling-of-invalid-utf-8). Because of this, the","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":321851,"byte_end":321928,"line_start":236,"line_end":236,"column_start":1,"column_end":78}},{"value":"/ indices yielded by this iterator may not correspond to the length of the","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":321929,"byte_end":322005,"line_start":237,"line_end":237,"column_start":1,"column_end":77}},{"value":"/ word yielded with those indices. For example, when this iterator encounters","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":322006,"byte_end":322085,"line_start":238,"line_end":238,"column_start":1,"column_end":80}},{"value":"/ `\\xFF` in the byte string, then it will yield a pair of indices ranging","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":322086,"byte_end":322161,"line_start":239,"line_end":239,"column_start":1,"column_end":76}},{"value":"/ over a single byte, but will provide an `&str` equivalent to `\"\\u{FFFD}\"`,","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":322162,"byte_end":322240,"line_start":240,"line_end":240,"column_start":1,"column_end":79}},{"value":"/ which is three bytes in length. However, when given only valid UTF-8, then","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":322241,"byte_end":322319,"line_start":241,"line_end":241,"column_start":1,"column_end":79}},{"value":"/ all indices are in exact correspondence with their paired word.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":322320,"byte_end":322387,"line_start":242,"line_end":242,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":322388,"byte_end":322391,"line_start":243,"line_end":243,"column_start":1,"column_end":4}},{"value":"/ This iterator yields words in accordance with the default word boundary","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":322392,"byte_end":322467,"line_start":244,"line_end":244,"column_start":1,"column_end":76}},{"value":"/ rules specified in","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":322468,"byte_end":322490,"line_start":245,"line_end":245,"column_start":1,"column_end":23}},{"value":"/ [UAX #29](https://www.unicode.org/reports/tr29/tr29-33.html#Word_Boundaries).","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":322491,"byte_end":322572,"line_start":246,"line_end":246,"column_start":1,"column_end":82}},{"value":"/ In particular, this may not be suitable for Japanese and Chinese scripts","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":322573,"byte_end":322649,"line_start":247,"line_end":247,"column_start":1,"column_end":77}},{"value":"/ that do not use spaces between words.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":322650,"byte_end":322691,"line_start":248,"line_end":248,"column_start":1,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":944},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":323663,"byte_end":323671,"line_start":283,"line_end":283,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<WordsWithBreakIndices>::as_bytes","value":"fn (&self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":" View the underlying data as a subslice of the original data.","sig":null,"attributes":[{"value":"/ View the underlying data as a subslice of the original data.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":322976,"byte_end":323040,"line_start":260,"line_end":260,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":323045,"byte_end":323048,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ The slice returned has the same lifetime as the original slice, and so","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":323053,"byte_end":323127,"line_start":262,"line_end":262,"column_start":5,"column_end":79}},{"value":"/ the iterator can continue to be used while this exists.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":323132,"byte_end":323191,"line_start":263,"line_end":263,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":323196,"byte_end":323199,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":323204,"byte_end":323218,"line_start":265,"line_end":265,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":323223,"byte_end":323226,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":323231,"byte_end":323238,"line_start":267,"line_end":267,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":323243,"byte_end":323267,"line_start":268,"line_end":268,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":323272,"byte_end":323275,"line_start":269,"line_end":269,"column_start":5,"column_end":8}},{"value":"/ let mut it = b\"foo bar baz\".words_with_break_indices();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":323280,"byte_end":323339,"line_start":270,"line_end":270,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":323344,"byte_end":323347,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b\"foo bar baz\", it.as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":323352,"byte_end":323398,"line_start":272,"line_end":272,"column_start":5,"column_end":51}},{"value":"/ it.next();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":323403,"byte_end":323417,"line_start":273,"line_end":273,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(b\" bar baz\", it.as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":323422,"byte_end":323465,"line_start":274,"line_end":274,"column_start":5,"column_end":48}},{"value":"/ it.next();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":323470,"byte_end":323484,"line_start":275,"line_end":275,"column_start":5,"column_end":19}},{"value":"/ it.next();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":323489,"byte_end":323503,"line_start":276,"line_end":276,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(b\" baz\", it.as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":323508,"byte_end":323547,"line_start":277,"line_end":277,"column_start":5,"column_end":44}},{"value":"/ it.next();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":323552,"byte_end":323566,"line_start":278,"line_end":278,"column_start":5,"column_end":19}},{"value":"/ it.next();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":323571,"byte_end":323585,"line_start":279,"line_end":279,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(b\"\", it.as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":323590,"byte_end":323625,"line_start":280,"line_end":280,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":323630,"byte_end":323637,"line_start":281,"line_end":281,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":323642,"byte_end":323651,"line_start":282,"line_end":282,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1736},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":330638,"byte_end":330643,"line_start":80,"line_end":80,"column_start":12,"column_end":17},"name":"Chars","qualname":"::utf8::Chars","value":"Chars {  }","parent":null,"children":[{"krate":0,"index":1738}],"decl_id":null,"docs":" An iterator over Unicode scalar values in a byte string.","sig":null,"attributes":[{"value":"/ An iterator over Unicode scalar values in a byte string.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":330146,"byte_end":330206,"line_start":70,"line_end":70,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":330207,"byte_end":330210,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ When invalid UTF-8 byte sequences are found, they are substituted with the","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":330211,"byte_end":330289,"line_start":72,"line_end":72,"column_start":1,"column_end":79}},{"value":"/ Unicode replacement codepoint (`U+FFFD`) using the","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":330290,"byte_end":330344,"line_start":73,"line_end":73,"column_start":1,"column_end":55}},{"value":"/ [\"maximal subpart\" strategy](http://www.unicode.org/review/pr-121.html).","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":330345,"byte_end":330421,"line_start":74,"line_end":74,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":330422,"byte_end":330425,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ This iterator is created by the","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":330426,"byte_end":330461,"line_start":76,"line_end":76,"column_start":1,"column_end":36}},{"value":"/ [`chars`](trait.ByteSlice.html#method.chars) method provided by the","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":330462,"byte_end":330533,"line_start":77,"line_end":77,"column_start":1,"column_end":72}},{"value":"/ [`ByteSlice`](trait.ByteSlice.html) extension trait for `&[u8]`.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":330534,"byte_end":330602,"line_start":78,"line_end":78,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":968},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":331360,"byte_end":331368,"line_start":109,"line_end":109,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<Chars>::as_bytes","value":"fn (&self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":" View the underlying data as a subslice of the original data.","sig":null,"attributes":[{"value":"/ View the underlying data as a subslice of the original data.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":330775,"byte_end":330839,"line_start":89,"line_end":89,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":330844,"byte_end":330847,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ The slice returned has the same lifetime as the original slice, and so","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":330852,"byte_end":330926,"line_start":91,"line_end":91,"column_start":5,"column_end":79}},{"value":"/ the iterator can continue to be used while this exists.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":330931,"byte_end":330990,"line_start":92,"line_end":92,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":330995,"byte_end":330998,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":331003,"byte_end":331017,"line_start":94,"line_end":94,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":331022,"byte_end":331025,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":331030,"byte_end":331037,"line_start":96,"line_end":96,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":331042,"byte_end":331066,"line_start":97,"line_end":97,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":331071,"byte_end":331074,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ let mut chars = b\"abc\".chars();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":331079,"byte_end":331114,"line_start":99,"line_end":99,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":331119,"byte_end":331122,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b\"abc\", chars.as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":331127,"byte_end":331168,"line_start":101,"line_end":101,"column_start":5,"column_end":46}},{"value":"/ chars.next();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":331173,"byte_end":331190,"line_start":102,"line_end":102,"column_start":5,"column_end":22}},{"value":"/ assert_eq!(b\"bc\", chars.as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":331195,"byte_end":331235,"line_start":103,"line_end":103,"column_start":5,"column_end":45}},{"value":"/ chars.next();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":331240,"byte_end":331257,"line_start":104,"line_end":104,"column_start":5,"column_end":22}},{"value":"/ chars.next();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":331262,"byte_end":331279,"line_start":105,"line_end":105,"column_start":5,"column_end":22}},{"value":"/ assert_eq!(b\"\", chars.as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":331284,"byte_end":331322,"line_start":106,"line_end":106,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":331327,"byte_end":331334,"line_start":107,"line_end":107,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":331339,"byte_end":331348,"line_start":108,"line_end":108,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1745},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":333061,"byte_end":333072,"line_start":159,"line_end":159,"column_start":12,"column_end":23},"name":"CharIndices","qualname":"::utf8::CharIndices","value":"CharIndices {  }","parent":null,"children":[{"krate":0,"index":1747},{"krate":0,"index":1748},{"krate":0,"index":1749}],"decl_id":null,"docs":" An iterator over Unicode scalar values in a byte string and their\n byte index positions.","sig":null,"attributes":[{"value":"/ An iterator over Unicode scalar values in a byte string and their","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":331989,"byte_end":332058,"line_start":140,"line_end":140,"column_start":1,"column_end":70}},{"value":"/ byte index positions.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":332059,"byte_end":332084,"line_start":141,"line_end":141,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":332085,"byte_end":332088,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/ When invalid UTF-8 byte sequences are found, they are substituted with the","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":332089,"byte_end":332167,"line_start":143,"line_end":143,"column_start":1,"column_end":79}},{"value":"/ Unicode replacement codepoint (`U+FFFD`) using the","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":332168,"byte_end":332222,"line_start":144,"line_end":144,"column_start":1,"column_end":55}},{"value":"/ [\"maximal subpart\" strategy](http://www.unicode.org/review/pr-121.html).","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":332223,"byte_end":332299,"line_start":145,"line_end":145,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":332300,"byte_end":332303,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"/ Note that this is slightly different from the `CharIndices` iterator","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":332304,"byte_end":332376,"line_start":147,"line_end":147,"column_start":1,"column_end":73}},{"value":"/ provided by the standard library. Aside from working on possibly invalid","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":332377,"byte_end":332453,"line_start":148,"line_end":148,"column_start":1,"column_end":77}},{"value":"/ UTF-8, this iterator provides both the corresponding starting and ending","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":332454,"byte_end":332530,"line_start":149,"line_end":149,"column_start":1,"column_end":77}},{"value":"/ byte indices of each codepoint yielded. The ending position is necessary to","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":332531,"byte_end":332610,"line_start":150,"line_end":150,"column_start":1,"column_end":80}},{"value":"/ slice the original byte string when invalid UTF-8 bytes are converted into","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":332611,"byte_end":332689,"line_start":151,"line_end":151,"column_start":1,"column_end":79}},{"value":"/ a Unicode replacement codepoint, since a single replacement codepoint can","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":332690,"byte_end":332767,"line_start":152,"line_end":152,"column_start":1,"column_end":78}},{"value":"/ substitute anywhere from 1 to 3 invalid bytes (inclusive).","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":332768,"byte_end":332830,"line_start":153,"line_end":153,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":332831,"byte_end":332834,"line_start":154,"line_end":154,"column_start":1,"column_end":4}},{"value":"/ This iterator is created by the","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":332835,"byte_end":332870,"line_start":155,"line_end":155,"column_start":1,"column_end":36}},{"value":"/ [`char_indices`](trait.ByteSlice.html#method.char_indices) method provided","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":332871,"byte_end":332949,"line_start":156,"line_end":156,"column_start":1,"column_end":79}},{"value":"/ by the [`ByteSlice`](trait.ByteSlice.html) extension trait for `&[u8]`.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":332950,"byte_end":333025,"line_start":157,"line_end":157,"column_start":1,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":979},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":333892,"byte_end":333900,"line_start":190,"line_end":190,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<CharIndices>::as_bytes","value":"fn (&self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":" View the underlying data as a subslice of the original data.","sig":null,"attributes":[{"value":"/ View the underlying data as a subslice of the original data.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":333321,"byte_end":333385,"line_start":170,"line_end":170,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":333390,"byte_end":333393,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ The slice returned has the same lifetime as the original slice, and so","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":333398,"byte_end":333472,"line_start":172,"line_end":172,"column_start":5,"column_end":79}},{"value":"/ the iterator can continue to be used while this exists.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":333477,"byte_end":333536,"line_start":173,"line_end":173,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":333541,"byte_end":333544,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":333549,"byte_end":333563,"line_start":175,"line_end":175,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":333568,"byte_end":333571,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":333576,"byte_end":333583,"line_start":177,"line_end":177,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":333588,"byte_end":333612,"line_start":178,"line_end":178,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":333617,"byte_end":333620,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ let mut it = b\"abc\".char_indices();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":333625,"byte_end":333664,"line_start":180,"line_end":180,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":333669,"byte_end":333672,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b\"abc\", it.as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":333677,"byte_end":333715,"line_start":182,"line_end":182,"column_start":5,"column_end":43}},{"value":"/ it.next();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":333720,"byte_end":333734,"line_start":183,"line_end":183,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(b\"bc\", it.as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":333739,"byte_end":333776,"line_start":184,"line_end":184,"column_start":5,"column_end":42}},{"value":"/ it.next();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":333781,"byte_end":333795,"line_start":185,"line_end":185,"column_start":5,"column_end":19}},{"value":"/ it.next();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":333800,"byte_end":333814,"line_start":186,"line_end":186,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(b\"\", it.as_bytes());","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":333819,"byte_end":333854,"line_start":187,"line_end":187,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":333859,"byte_end":333866,"line_start":188,"line_end":188,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":333871,"byte_end":333880,"line_start":189,"line_end":189,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1756},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":334930,"byte_end":334940,"line_start":228,"line_end":228,"column_start":12,"column_end":22},"name":"Utf8Chunks","qualname":"::utf8::Utf8Chunks","value":"Utf8Chunks {  }","parent":null,"children":[{"krate":0,"index":1758}],"decl_id":null,"docs":" An iterator over chunks of valid UTF-8 in a byte slice.","sig":null,"attributes":[{"value":"/ An iterator over chunks of valid UTF-8 in a byte slice.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":334765,"byte_end":334824,"line_start":224,"line_end":224,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":334825,"byte_end":334828,"line_start":225,"line_end":225,"column_start":1,"column_end":4}},{"value":"/ See [`utf8_chunks`](trait.ByteSlice.html#method.utf8_chunks).","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":334829,"byte_end":334894,"line_start":226,"line_end":226,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":987},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":335375,"byte_end":335384,"line_start":242,"line_end":242,"column_start":12,"column_end":21},"name":"Utf8Chunk","qualname":"::utf8::Utf8Chunk","value":"Utf8Chunk {  }","parent":null,"children":[{"krate":0,"index":989},{"krate":0,"index":990}],"decl_id":null,"docs":" A chunk of valid UTF-8, possibly followed by invalid UTF-8 bytes.","sig":null,"attributes":[{"value":"/ A chunk of valid UTF-8, possibly followed by invalid UTF-8 bytes.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":334982,"byte_end":335051,"line_start":232,"line_end":232,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":335052,"byte_end":335055,"line_start":233,"line_end":233,"column_start":1,"column_end":4}},{"value":"/ This is yielded by the","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":335056,"byte_end":335082,"line_start":234,"line_end":234,"column_start":1,"column_end":27}},{"value":"/ [`Utf8Chunks`](struct.Utf8Chunks.html)","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":335083,"byte_end":335125,"line_start":235,"line_end":235,"column_start":1,"column_end":43}},{"value":"/ iterator, which can be created via the","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":335126,"byte_end":335168,"line_start":236,"line_end":236,"column_start":1,"column_end":43}},{"value":"/ [`ByteSlice::utf8_chunks`](trait.ByteSlice.html#method.utf8_chunks)","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":335169,"byte_end":335240,"line_start":237,"line_end":237,"column_start":1,"column_end":72}},{"value":"/ method.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":335241,"byte_end":335252,"line_start":238,"line_end":238,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":335253,"byte_end":335256,"line_start":239,"line_end":239,"column_start":1,"column_end":4}},{"value":"/ The `'a` lifetime parameter corresponds to the lifetime of the bytes that","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":335257,"byte_end":335334,"line_start":240,"line_end":240,"column_start":1,"column_end":78}},{"value":"/ are being iterated over.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":335335,"byte_end":335363,"line_start":241,"line_end":241,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":993},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":336011,"byte_end":336016,"line_start":262,"line_end":262,"column_start":12,"column_end":17},"name":"valid","qualname":"<Utf8Chunk>::valid","value":"fn (&self) -> &'a str","parent":null,"children":[],"decl_id":null,"docs":" Returns the (possibly empty) valid UTF-8 bytes in this chunk.","sig":null,"attributes":[{"value":"/ Returns the (possibly empty) valid UTF-8 bytes in this chunk.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":335819,"byte_end":335884,"line_start":257,"line_end":257,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":335889,"byte_end":335892,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ This may be empty if there are consecutive sequences of invalid UTF-8","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":335897,"byte_end":335970,"line_start":259,"line_end":259,"column_start":5,"column_end":78}},{"value":"/ bytes.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":335975,"byte_end":335985,"line_start":260,"line_end":260,"column_start":5,"column_end":15}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":335990,"byte_end":335999,"line_start":261,"line_end":261,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":994},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":336769,"byte_end":336776,"line_start":280,"line_end":280,"column_start":12,"column_end":19},"name":"invalid","qualname":"<Utf8Chunk>::invalid","value":"fn (&self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns the (possibly empty) invalid UTF-8 bytes in this chunk that\n immediately follow the valid UTF-8 bytes in this chunk.","sig":null,"attributes":[{"value":"/ Returns the (possibly empty) invalid UTF-8 bytes in this chunk that","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":336067,"byte_end":336138,"line_start":266,"line_end":266,"column_start":5,"column_end":76}},{"value":"/ immediately follow the valid UTF-8 bytes in this chunk.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":336143,"byte_end":336202,"line_start":267,"line_end":267,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":336207,"byte_end":336210,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ This is only empty when this chunk corresponds to the last chunk in","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":336215,"byte_end":336286,"line_start":269,"line_end":269,"column_start":5,"column_end":76}},{"value":"/ the original bytes.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":336291,"byte_end":336314,"line_start":270,"line_end":270,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":336319,"byte_end":336322,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ The maximum length of this slice is 3. That is, invalid UTF-8 byte","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":336327,"byte_end":336397,"line_start":272,"line_end":272,"column_start":5,"column_end":75}},{"value":"/ sequences greater than 1 always correspond to a valid _prefix_ of","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":336402,"byte_end":336471,"line_start":273,"line_end":273,"column_start":5,"column_end":74}},{"value":"/ a valid UTF-8 encoded codepoint. This corresponds to the \"substitution","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":336476,"byte_end":336550,"line_start":274,"line_end":274,"column_start":5,"column_end":79}},{"value":"/ of maximal subparts\" strategy that is described in more detail in the","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":336555,"byte_end":336628,"line_start":275,"line_end":275,"column_start":5,"column_end":78}},{"value":"/ docs for the","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":336633,"byte_end":336649,"line_start":276,"line_end":276,"column_start":5,"column_end":21}},{"value":"/ [`ByteSlice::to_str_lossy`](trait.ByteSlice.html#method.to_str_lossy)","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":336654,"byte_end":336727,"line_start":277,"line_end":277,"column_start":5,"column_end":78}},{"value":"/ method.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":336732,"byte_end":336743,"line_start":278,"line_end":278,"column_start":5,"column_end":16}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":336748,"byte_end":336757,"line_start":279,"line_end":279,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1765},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":340029,"byte_end":340038,"line_start":378,"line_end":378,"column_start":12,"column_end":21},"name":"Utf8Error","qualname":"::utf8::Utf8Error","value":"Utf8Error {  }","parent":null,"children":[{"krate":0,"index":1766},{"krate":0,"index":1767}],"decl_id":null,"docs":" An error that occurs when UTF-8 decoding fails.","sig":null,"attributes":[{"value":"/ An error that occurs when UTF-8 decoding fails.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":338271,"byte_end":338322,"line_start":329,"line_end":329,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":338323,"byte_end":338326,"line_start":330,"line_end":330,"column_start":1,"column_end":4}},{"value":"/ This error occurs when attempting to convert a non-UTF-8 byte","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":338327,"byte_end":338392,"line_start":331,"line_end":331,"column_start":1,"column_end":66}},{"value":"/ string to a Rust string that must be valid UTF-8. For example,","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":338393,"byte_end":338459,"line_start":332,"line_end":332,"column_start":1,"column_end":67}},{"value":"/ [`to_str`](trait.ByteSlice.html#method.to_str) is one such method.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":338460,"byte_end":338530,"line_start":333,"line_end":333,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":338531,"byte_end":338534,"line_start":334,"line_end":334,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":338535,"byte_end":338548,"line_start":335,"line_end":335,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":338549,"byte_end":338552,"line_start":336,"line_end":336,"column_start":1,"column_end":4}},{"value":"/ This example shows what happens when a given byte sequence is invalid,","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":338553,"byte_end":338627,"line_start":337,"line_end":337,"column_start":1,"column_end":75}},{"value":"/ but ends with a sequence that is a possible prefix of valid UTF-8.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":338628,"byte_end":338698,"line_start":338,"line_end":338,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":338699,"byte_end":338702,"line_start":339,"line_end":339,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":338703,"byte_end":338710,"line_start":340,"line_end":340,"column_start":1,"column_end":8}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":338711,"byte_end":338740,"line_start":341,"line_end":341,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":338741,"byte_end":338744,"line_start":342,"line_end":342,"column_start":1,"column_end":4}},{"value":"/ let s = B(b\"foobar\\xF1\\x80\\x80\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":338745,"byte_end":338782,"line_start":343,"line_end":343,"column_start":1,"column_end":38}},{"value":"/ let err = s.to_str().unwrap_err();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":338783,"byte_end":338821,"line_start":344,"line_end":344,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(err.valid_up_to(), 6);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":338822,"byte_end":338859,"line_start":345,"line_end":345,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(err.error_len(), None);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":338860,"byte_end":338898,"line_start":346,"line_end":346,"column_start":1,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":338899,"byte_end":338906,"line_start":347,"line_end":347,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":338907,"byte_end":338910,"line_start":348,"line_end":348,"column_start":1,"column_end":4}},{"value":"/ This example shows what happens when a given byte sequence contains","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":338911,"byte_end":338982,"line_start":349,"line_end":349,"column_start":1,"column_end":72}},{"value":"/ invalid UTF-8.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":338983,"byte_end":339001,"line_start":350,"line_end":350,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":339002,"byte_end":339005,"line_start":351,"line_end":351,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":339006,"byte_end":339013,"line_start":352,"line_end":352,"column_start":1,"column_end":8}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":339014,"byte_end":339038,"line_start":353,"line_end":353,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":339039,"byte_end":339042,"line_start":354,"line_end":354,"column_start":1,"column_end":4}},{"value":"/ let s = b\"foobar\\xF1\\x80\\x80quux\";","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":339043,"byte_end":339081,"line_start":355,"line_end":355,"column_start":1,"column_end":39}},{"value":"/ let err = s.to_str().unwrap_err();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":339082,"byte_end":339120,"line_start":356,"line_end":356,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(err.valid_up_to(), 6);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":339121,"byte_end":339158,"line_start":357,"line_end":357,"column_start":1,"column_end":38}},{"value":"/ // The error length reports the maximum number of bytes that correspond to","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":339159,"byte_end":339237,"line_start":358,"line_end":358,"column_start":1,"column_end":79}},{"value":"/ // a valid prefix of a UTF-8 encoded codepoint.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":339238,"byte_end":339289,"line_start":359,"line_end":359,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(err.error_len(), Some(3));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":339290,"byte_end":339331,"line_start":360,"line_end":360,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":339332,"byte_end":339335,"line_start":361,"line_end":361,"column_start":1,"column_end":4}},{"value":"/ // In contrast to the above which contains a single invalid prefix,","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":339336,"byte_end":339407,"line_start":362,"line_end":362,"column_start":1,"column_end":72}},{"value":"/ // consider the case of multiple individal bytes that are never valid","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":339408,"byte_end":339481,"line_start":363,"line_end":363,"column_start":1,"column_end":74}},{"value":"/ // prefixes. Note how the value of error_len changes!","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":339482,"byte_end":339539,"line_start":364,"line_end":364,"column_start":1,"column_end":58}},{"value":"/ let s = b\"foobar\\xFF\\xFFquux\";","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":339540,"byte_end":339574,"line_start":365,"line_end":365,"column_start":1,"column_end":35}},{"value":"/ let err = s.to_str().unwrap_err();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":339575,"byte_end":339613,"line_start":366,"line_end":366,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(err.valid_up_to(), 6);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":339614,"byte_end":339651,"line_start":367,"line_end":367,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(err.error_len(), Some(1));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":339652,"byte_end":339693,"line_start":368,"line_end":368,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":339694,"byte_end":339697,"line_start":369,"line_end":369,"column_start":1,"column_end":4}},{"value":"/ // The fact that it's an invalid prefix does not change error_len even","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":339698,"byte_end":339772,"line_start":370,"line_end":370,"column_start":1,"column_end":75}},{"value":"/ // when it immediately precedes the end of the string.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":339773,"byte_end":339831,"line_start":371,"line_end":371,"column_start":1,"column_end":59}},{"value":"/ let s = b\"foobar\\xFF\";","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":339832,"byte_end":339858,"line_start":372,"line_end":372,"column_start":1,"column_end":27}},{"value":"/ let err = s.to_str().unwrap_err();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":339859,"byte_end":339897,"line_start":373,"line_end":373,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(err.valid_up_to(), 6);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":339898,"byte_end":339935,"line_start":374,"line_end":374,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(err.error_len(), Some(1));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":339936,"byte_end":339977,"line_start":375,"line_end":375,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":339978,"byte_end":339985,"line_start":376,"line_end":376,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":1003},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":340728,"byte_end":340739,"line_start":403,"line_end":403,"column_start":12,"column_end":23},"name":"valid_up_to","qualname":"<Utf8Error>::valid_up_to","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the byte index of the position immediately following the last\n valid UTF-8 byte.","sig":null,"attributes":[{"value":"/ Returns the byte index of the position immediately following the last","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":340119,"byte_end":340192,"line_start":384,"line_end":384,"column_start":5,"column_end":78}},{"value":"/ valid UTF-8 byte.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":340197,"byte_end":340218,"line_start":385,"line_end":385,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":340223,"byte_end":340226,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":340231,"byte_end":340244,"line_start":387,"line_end":387,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":340249,"byte_end":340252,"line_start":388,"line_end":388,"column_start":5,"column_end":8}},{"value":"/ This examples shows how `valid_up_to` can be used to retrieve a","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":340257,"byte_end":340324,"line_start":389,"line_end":389,"column_start":5,"column_end":72}},{"value":"/ possibly empty prefix that is guaranteed to be valid UTF-8:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":340329,"byte_end":340392,"line_start":390,"line_end":390,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":340397,"byte_end":340400,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":340405,"byte_end":340412,"line_start":392,"line_end":392,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":340417,"byte_end":340441,"line_start":393,"line_end":393,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":340446,"byte_end":340449,"line_start":394,"line_end":394,"column_start":5,"column_end":8}},{"value":"/ let s = b\"foobar\\xF1\\x80\\x80quux\";","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":340454,"byte_end":340492,"line_start":395,"line_end":395,"column_start":5,"column_end":43}},{"value":"/ let err = s.to_str().unwrap_err();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":340497,"byte_end":340535,"line_start":396,"line_end":396,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":340540,"byte_end":340543,"line_start":397,"line_end":397,"column_start":5,"column_end":8}},{"value":"/ // This is guaranteed to never panic.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":340548,"byte_end":340589,"line_start":398,"line_end":398,"column_start":5,"column_end":46}},{"value":"/ let string = s[..err.valid_up_to()].to_str().unwrap();","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":340594,"byte_end":340652,"line_start":399,"line_end":399,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(string, \"foobar\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":340657,"byte_end":340690,"line_start":400,"line_end":400,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":340695,"byte_end":340702,"line_start":401,"line_end":401,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":340707,"byte_end":340716,"line_start":402,"line_end":402,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1004},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":341345,"byte_end":341354,"line_start":417,"line_end":417,"column_start":12,"column_end":21},"name":"error_len","qualname":"<Utf8Error>::error_len","value":"fn (&self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of invalid UTF-8 bytes immediately following\n the position returned by `valid_up_to`. This value is always at least\n `1`, but can be up to `3` if bytes form a valid prefix of some UTF-8\n encoded codepoint.","sig":null,"attributes":[{"value":"/ Returns the total number of invalid UTF-8 bytes immediately following","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":340794,"byte_end":340867,"line_start":407,"line_end":407,"column_start":5,"column_end":78}},{"value":"/ the position returned by `valid_up_to`. This value is always at least","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":340872,"byte_end":340945,"line_start":408,"line_end":408,"column_start":5,"column_end":78}},{"value":"/ `1`, but can be up to `3` if bytes form a valid prefix of some UTF-8","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":340950,"byte_end":341022,"line_start":409,"line_end":409,"column_start":5,"column_end":77}},{"value":"/ encoded codepoint.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":341027,"byte_end":341049,"line_start":410,"line_end":410,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":341054,"byte_end":341057,"line_start":411,"line_end":411,"column_start":5,"column_end":8}},{"value":"/ If the end of the original input was found before a valid UTF-8 encoded","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":341062,"byte_end":341137,"line_start":412,"line_end":412,"column_start":5,"column_end":80}},{"value":"/ codepoint could be completed, then this returns `None`. This is useful","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":341142,"byte_end":341216,"line_start":413,"line_end":413,"column_start":5,"column_end":79}},{"value":"/ when processing streams, where a `None` value signals that more input","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":341221,"byte_end":341294,"line_start":414,"line_end":414,"column_start":5,"column_end":78}},{"value":"/ might be needed.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":341299,"byte_end":341319,"line_start":415,"line_end":415,"column_start":5,"column_end":25}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":341324,"byte_end":341333,"line_start":416,"line_end":416,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":1015},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":347294,"byte_end":347300,"line_start":581,"line_end":581,"column_start":8,"column_end":14},"name":"decode","qualname":"::utf8::decode","value":"fn <B> (slice: B) -> (Option<char>, usize)","parent":null,"children":[],"decl_id":null,"docs":" UTF-8 decode a single Unicode scalar value from the beginning of a slice.","sig":null,"attributes":[{"value":"/ UTF-8 decode a single Unicode scalar value from the beginning of a slice.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":345755,"byte_end":345832,"line_start":535,"line_end":535,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":345833,"byte_end":345836,"line_start":536,"line_end":536,"column_start":1,"column_end":4}},{"value":"/ When successful, the corresponding Unicode scalar value is returned along","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":345837,"byte_end":345914,"line_start":537,"line_end":537,"column_start":1,"column_end":78}},{"value":"/ with the number of bytes it was encoded with. The number of bytes consumed","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":345915,"byte_end":345993,"line_start":538,"line_end":538,"column_start":1,"column_end":79}},{"value":"/ for a successful decode is always between 1 and 4, inclusive.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":345994,"byte_end":346059,"line_start":539,"line_end":539,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":346060,"byte_end":346063,"line_start":540,"line_end":540,"column_start":1,"column_end":4}},{"value":"/ When unsuccessful, `None` is returned along with the number of bytes that","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":346064,"byte_end":346141,"line_start":541,"line_end":541,"column_start":1,"column_end":78}},{"value":"/ make up a maximal prefix of a valid UTF-8 code unit sequence. In this case,","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":346142,"byte_end":346221,"line_start":542,"line_end":542,"column_start":1,"column_end":80}},{"value":"/ the number of bytes consumed is always between 0 and 3, inclusive, where","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":346222,"byte_end":346298,"line_start":543,"line_end":543,"column_start":1,"column_end":77}},{"value":"/ 0 is only returned when `slice` is empty.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":346299,"byte_end":346344,"line_start":544,"line_end":544,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":346345,"byte_end":346348,"line_start":545,"line_end":545,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":346349,"byte_end":346363,"line_start":546,"line_end":546,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":346364,"byte_end":346367,"line_start":547,"line_end":547,"column_start":1,"column_end":4}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":346368,"byte_end":346384,"line_start":548,"line_end":548,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":346385,"byte_end":346388,"line_start":549,"line_end":549,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":346389,"byte_end":346396,"line_start":550,"line_end":550,"column_start":1,"column_end":8}},{"value":"/ use bstr::decode_utf8;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":346397,"byte_end":346423,"line_start":551,"line_end":551,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":346424,"byte_end":346427,"line_start":552,"line_end":552,"column_start":1,"column_end":4}},{"value":"/ // Decoding a valid codepoint.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":346428,"byte_end":346462,"line_start":553,"line_end":553,"column_start":1,"column_end":35}},{"value":"/ let (ch, size) = decode_utf8(b\"\\xE2\\x98\\x83\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":346463,"byte_end":346513,"line_start":554,"line_end":554,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(Some('☃'), ch);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":346514,"byte_end":346546,"line_start":555,"line_end":555,"column_start":1,"column_end":31}},{"value":"/ assert_eq!(3, size);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":346547,"byte_end":346571,"line_start":556,"line_end":556,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":346572,"byte_end":346575,"line_start":557,"line_end":557,"column_start":1,"column_end":4}},{"value":"/ // Decoding an incomplete codepoint.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":346576,"byte_end":346616,"line_start":558,"line_end":558,"column_start":1,"column_end":41}},{"value":"/ let (ch, size) = decode_utf8(b\"\\xE2\\x98\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":346617,"byte_end":346663,"line_start":559,"line_end":559,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(None, ch);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":346664,"byte_end":346689,"line_start":560,"line_end":560,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(2, size);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":346690,"byte_end":346714,"line_start":561,"line_end":561,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":346715,"byte_end":346722,"line_start":562,"line_end":562,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":346723,"byte_end":346726,"line_start":563,"line_end":563,"column_start":1,"column_end":4}},{"value":"/ This example shows how to iterate over all codepoints in UTF-8 encoded","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":346727,"byte_end":346801,"line_start":564,"line_end":564,"column_start":1,"column_end":75}},{"value":"/ bytes, while replacing invalid UTF-8 sequences with the replacement","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":346802,"byte_end":346873,"line_start":565,"line_end":565,"column_start":1,"column_end":72}},{"value":"/ codepoint:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":346874,"byte_end":346888,"line_start":566,"line_end":566,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":346889,"byte_end":346892,"line_start":567,"line_end":567,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":346893,"byte_end":346900,"line_start":568,"line_end":568,"column_start":1,"column_end":8}},{"value":"/ use bstr::{B, decode_utf8};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":346901,"byte_end":346932,"line_start":569,"line_end":569,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":346933,"byte_end":346936,"line_start":570,"line_end":570,"column_start":1,"column_end":4}},{"value":"/ let mut bytes = B(b\"\\xE2\\x98\\x83\\xFF\\xF0\\x9D\\x9E\\x83\\xE2\\x98\\x61\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":346937,"byte_end":347008,"line_start":571,"line_end":571,"column_start":1,"column_end":72}},{"value":"/ let mut chars = vec![];","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":347009,"byte_end":347036,"line_start":572,"line_end":572,"column_start":1,"column_end":28}},{"value":"/ while !bytes.is_empty() {","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":347037,"byte_end":347066,"line_start":573,"line_end":573,"column_start":1,"column_end":30}},{"value":"/     let (ch, size) = decode_utf8(bytes);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":347067,"byte_end":347111,"line_start":574,"line_end":574,"column_start":1,"column_end":45}},{"value":"/     bytes = &bytes[size..];","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":347112,"byte_end":347143,"line_start":575,"line_end":575,"column_start":1,"column_end":32}},{"value":"/     chars.push(ch.unwrap_or('\\u{FFFD}'));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":347144,"byte_end":347189,"line_start":576,"line_end":576,"column_start":1,"column_end":46}},{"value":"/ }","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":347190,"byte_end":347195,"line_start":577,"line_end":577,"column_start":1,"column_end":6}},{"value":"/ assert_eq!(vec!['☃', '\\u{FFFD}', '𝞃', '\\u{FFFD}', 'a'], chars);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":347196,"byte_end":347268,"line_start":578,"line_end":578,"column_start":1,"column_end":68}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":347269,"byte_end":347276,"line_start":579,"line_end":579,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":347277,"byte_end":347286,"line_start":580,"line_end":580,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1019},"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":351527,"byte_end":351538,"line_start":708,"line_end":708,"column_start":8,"column_end":19},"name":"decode_last","qualname":"::utf8::decode_last","value":"fn <B> (slice: B) -> (Option<char>, usize)","parent":null,"children":[],"decl_id":null,"docs":" UTF-8 decode a single Unicode scalar value from the end of a slice.","sig":null,"attributes":[{"value":"/ UTF-8 decode a single Unicode scalar value from the end of a slice.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":349946,"byte_end":350017,"line_start":662,"line_end":662,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":350018,"byte_end":350021,"line_start":663,"line_end":663,"column_start":1,"column_end":4}},{"value":"/ When successful, the corresponding Unicode scalar value is returned along","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":350022,"byte_end":350099,"line_start":664,"line_end":664,"column_start":1,"column_end":78}},{"value":"/ with the number of bytes it was encoded with. The number of bytes consumed","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":350100,"byte_end":350178,"line_start":665,"line_end":665,"column_start":1,"column_end":79}},{"value":"/ for a successful decode is always between 1 and 4, inclusive.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":350179,"byte_end":350244,"line_start":666,"line_end":666,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":350245,"byte_end":350248,"line_start":667,"line_end":667,"column_start":1,"column_end":4}},{"value":"/ When unsuccessful, `None` is returned along with the number of bytes that","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":350249,"byte_end":350326,"line_start":668,"line_end":668,"column_start":1,"column_end":78}},{"value":"/ make up a maximal prefix of a valid UTF-8 code unit sequence. In this case,","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":350327,"byte_end":350406,"line_start":669,"line_end":669,"column_start":1,"column_end":80}},{"value":"/ the number of bytes consumed is always between 0 and 3, inclusive, where","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":350407,"byte_end":350483,"line_start":670,"line_end":670,"column_start":1,"column_end":77}},{"value":"/ 0 is only returned when `slice` is empty.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":350484,"byte_end":350529,"line_start":671,"line_end":671,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":350530,"byte_end":350533,"line_start":672,"line_end":672,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":350534,"byte_end":350548,"line_start":673,"line_end":673,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":350549,"byte_end":350552,"line_start":674,"line_end":674,"column_start":1,"column_end":4}},{"value":"/ Basic usage:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":350553,"byte_end":350569,"line_start":675,"line_end":675,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":350570,"byte_end":350573,"line_start":676,"line_end":676,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":350574,"byte_end":350581,"line_start":677,"line_end":677,"column_start":1,"column_end":8}},{"value":"/ use bstr::decode_last_utf8;","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":350582,"byte_end":350613,"line_start":678,"line_end":678,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":350614,"byte_end":350617,"line_start":679,"line_end":679,"column_start":1,"column_end":4}},{"value":"/ // Decoding a valid codepoint.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":350618,"byte_end":350652,"line_start":680,"line_end":680,"column_start":1,"column_end":35}},{"value":"/ let (ch, size) = decode_last_utf8(b\"\\xE2\\x98\\x83\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":350653,"byte_end":350708,"line_start":681,"line_end":681,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(Some('☃'), ch);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":350709,"byte_end":350741,"line_start":682,"line_end":682,"column_start":1,"column_end":31}},{"value":"/ assert_eq!(3, size);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":350742,"byte_end":350766,"line_start":683,"line_end":683,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":350767,"byte_end":350770,"line_start":684,"line_end":684,"column_start":1,"column_end":4}},{"value":"/ // Decoding an incomplete codepoint.","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":350771,"byte_end":350811,"line_start":685,"line_end":685,"column_start":1,"column_end":41}},{"value":"/ let (ch, size) = decode_last_utf8(b\"\\xE2\\x98\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":350812,"byte_end":350863,"line_start":686,"line_end":686,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(None, ch);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":350864,"byte_end":350889,"line_start":687,"line_end":687,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(2, size);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":350890,"byte_end":350914,"line_start":688,"line_end":688,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":350915,"byte_end":350922,"line_start":689,"line_end":689,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":350923,"byte_end":350926,"line_start":690,"line_end":690,"column_start":1,"column_end":4}},{"value":"/ This example shows how to iterate over all codepoints in UTF-8 encoded","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":350927,"byte_end":351001,"line_start":691,"line_end":691,"column_start":1,"column_end":75}},{"value":"/ bytes in reverse, while replacing invalid UTF-8 sequences with the","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":351002,"byte_end":351072,"line_start":692,"line_end":692,"column_start":1,"column_end":71}},{"value":"/ replacement codepoint:","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":351073,"byte_end":351099,"line_start":693,"line_end":693,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":351100,"byte_end":351103,"line_start":694,"line_end":694,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":351104,"byte_end":351111,"line_start":695,"line_end":695,"column_start":1,"column_end":8}},{"value":"/ use bstr::{B, decode_last_utf8};","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":351112,"byte_end":351148,"line_start":696,"line_end":696,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":351149,"byte_end":351152,"line_start":697,"line_end":697,"column_start":1,"column_end":4}},{"value":"/ let mut bytes = B(b\"\\xE2\\x98\\x83\\xFF\\xF0\\x9D\\x9E\\x83\\xE2\\x98\\x61\");","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":351153,"byte_end":351224,"line_start":698,"line_end":698,"column_start":1,"column_end":72}},{"value":"/ let mut chars = vec![];","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":351225,"byte_end":351252,"line_start":699,"line_end":699,"column_start":1,"column_end":28}},{"value":"/ while !bytes.is_empty() {","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":351253,"byte_end":351282,"line_start":700,"line_end":700,"column_start":1,"column_end":30}},{"value":"/     let (ch, size) = decode_last_utf8(bytes);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":351283,"byte_end":351332,"line_start":701,"line_end":701,"column_start":1,"column_end":50}},{"value":"/     bytes = &bytes[..bytes.len()-size];","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":351333,"byte_end":351376,"line_start":702,"line_end":702,"column_start":1,"column_end":44}},{"value":"/     chars.push(ch.unwrap_or('\\u{FFFD}'));","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":351377,"byte_end":351422,"line_start":703,"line_end":703,"column_start":1,"column_end":46}},{"value":"/ }","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":351423,"byte_end":351428,"line_start":704,"line_end":704,"column_start":1,"column_end":6}},{"value":"/ assert_eq!(vec!['a', '\\u{FFFD}', '𝞃', '\\u{FFFD}', '☃'], chars);","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":351429,"byte_end":351501,"line_start":705,"line_end":705,"column_start":1,"column_end":68}},{"value":"/ ```","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":351502,"byte_end":351509,"line_start":706,"line_end":706,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":351510,"byte_end":351519,"line_start":707,"line_end":707,"column_start":1,"column_end":10}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstr.rs","byte_start":33556,"byte_end":33560,"line_start":35,"line_end":35,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":64},{"krate":0,"index":66},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstring.rs","byte_start":35616,"byte_end":35623,"line_start":44,"line_end":44,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/cow.rs","byte_start":49571,"byte_end":49579,"line_start":22,"line_end":22,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":125},{"krate":0,"index":126}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/cow.rs","byte_start":49684,"byte_end":49692,"line_start":30,"line_end":30,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":129},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/cow.rs","byte_start":50691,"byte_end":50694,"line_start":61,"line_end":61,"column_start":10,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":136},{"krate":0,"index":137}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":148912,"byte_end":148918,"line_start":2995,"line_end":2995,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":307},{"krate":0,"index":309},{"krate":0,"index":310},{"krate":0,"index":311}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":152122,"byte_end":152135,"line_start":3080,"line_end":3080,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":315},{"krate":0,"index":317},{"krate":0,"index":318},{"krate":0,"index":319}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":154797,"byte_end":154801,"line_start":3158,"line_end":3158,"column_start":10,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":323}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":155055,"byte_end":155059,"line_start":3166,"line_end":3166,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":326},{"krate":0,"index":327}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":156132,"byte_end":156143,"line_start":3204,"line_end":3204,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":330},{"krate":0,"index":331},{"krate":0,"index":332}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":156584,"byte_end":156595,"line_start":3221,"line_end":3221,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":335},{"krate":0,"index":336}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":157417,"byte_end":157422,"line_start":3255,"line_end":3255,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":339},{"krate":0,"index":340}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":157580,"byte_end":157585,"line_start":3264,"line_end":3264,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":344}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":157730,"byte_end":157735,"line_start":3271,"line_end":3271,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":348}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":158178,"byte_end":158184,"line_start":3289,"line_end":3289,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":351}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":158332,"byte_end":158338,"line_start":3295,"line_end":3295,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":355},{"krate":0,"index":356}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":159034,"byte_end":159044,"line_start":3320,"line_end":3320,"column_start":34,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":360}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":159227,"byte_end":159237,"line_start":3326,"line_end":3326,"column_start":47,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":364},{"krate":0,"index":365}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":160545,"byte_end":160550,"line_start":3370,"line_end":3370,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":368}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":160752,"byte_end":160757,"line_start":3377,"line_end":3377,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":371},{"krate":0,"index":372}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":162387,"byte_end":162399,"line_start":3426,"line_end":3426,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":375}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":162629,"byte_end":162641,"line_start":3433,"line_end":3433,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":378},{"krate":0,"index":379}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":163851,"byte_end":163857,"line_start":3477,"line_end":3477,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":382}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":164099,"byte_end":164105,"line_start":3488,"line_end":3488,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":385},{"krate":0,"index":386}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":164831,"byte_end":164844,"line_start":3516,"line_end":3516,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":389}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":165101,"byte_end":165114,"line_start":3527,"line_end":3527,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":392},{"krate":0,"index":393}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":165785,"byte_end":165790,"line_start":3553,"line_end":3553,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":399}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":165925,"byte_end":165930,"line_start":3559,"line_end":3559,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":402},{"krate":0,"index":403}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":166965,"byte_end":166984,"line_start":3592,"line_end":3592,"column_start":10,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":409}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":167117,"byte_end":167136,"line_start":3598,"line_end":3598,"column_start":23,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":412},{"krate":0,"index":413}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":170979,"byte_end":170982,"line_start":85,"line_end":85,"column_start":18,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":441},{"krate":0,"index":442},{"krate":0,"index":443}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":171353,"byte_end":171356,"line_start":105,"line_end":105,"column_start":17,"column_end":20},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":195963,"byte_end":195973,"line_start":913,"line_end":913,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":196004,"byte_end":196014,"line_start":915,"line_end":915,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":495},{"krate":0,"index":496}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":196160,"byte_end":196170,"line_start":924,"line_end":924,"column_start":34,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":499}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":196303,"byte_end":196313,"line_start":931,"line_end":931,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":502}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":197204,"byte_end":197217,"line_start":967,"line_end":967,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":504},{"krate":0,"index":505},{"krate":0,"index":506}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":198956,"byte_end":198969,"line_start":1033,"line_end":1033,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":508}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":199084,"byte_end":199097,"line_start":1040,"line_end":1040,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":510}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":202729,"byte_end":202736,"line_start":74,"line_end":74,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":528}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":202910,"byte_end":202917,"line_start":81,"line_end":81,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":530}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":203089,"byte_end":203096,"line_start":88,"line_end":88,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":532},{"krate":0,"index":533}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":203255,"byte_end":203262,"line_start":97,"line_end":97,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":535}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":203403,"byte_end":203410,"line_start":104,"line_end":104,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":537}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":203533,"byte_end":203540,"line_start":111,"line_end":111,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":539}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":203666,"byte_end":203673,"line_start":118,"line_end":118,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":541}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":203808,"byte_end":203815,"line_start":125,"line_end":125,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":543}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":203954,"byte_end":203961,"line_start":132,"line_end":132,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":545}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":204083,"byte_end":204087,"line_start":139,"line_end":139,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":547},{"krate":0,"index":548}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":204249,"byte_end":204256,"line_start":148,"line_end":148,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":550}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":204376,"byte_end":204383,"line_start":154,"line_end":154,"column_start":33,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":553}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":204528,"byte_end":204535,"line_start":161,"line_end":161,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":555}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":204674,"byte_end":204677,"line_start":168,"line_end":168,"column_start":28,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":557}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":204811,"byte_end":204818,"line_start":175,"line_end":175,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":560}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":204972,"byte_end":204979,"line_start":182,"line_end":182,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":562}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":205131,"byte_end":205138,"line_start":189,"line_end":189,"column_start":33,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":565}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":205293,"byte_end":205296,"line_start":196,"line_end":196,"column_start":32,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":568}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":205449,"byte_end":205456,"line_start":203,"line_end":203,"column_start":33,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":570}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":205661,"byte_end":205668,"line_start":210,"line_end":210,"column_start":31,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":573}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":205881,"byte_end":205888,"line_start":217,"line_end":217,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":577}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":206182,"byte_end":206189,"line_start":228,"line_end":228,"column_start":41,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":581}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":206484,"byte_end":206491,"line_start":239,"line_end":239,"column_start":41,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":585}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":206781,"byte_end":206788,"line_start":250,"line_end":250,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":588}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":207058,"byte_end":207065,"line_start":261,"line_end":261,"column_start":17,"column_end":24},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":207093,"byte_end":207100,"line_start":263,"line_end":263,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":592}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":207558,"byte_end":207565,"line_start":279,"line_end":279,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":594}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":207752,"byte_end":207759,"line_start":286,"line_end":286,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":596}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":208428,"byte_end":208432,"line_start":314,"line_end":314,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":605}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":208794,"byte_end":208798,"line_start":327,"line_end":327,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":607}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":209332,"byte_end":209336,"line_start":345,"line_end":345,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":609},{"krate":0,"index":610}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":209489,"byte_end":209493,"line_start":354,"line_end":354,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":612}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":209637,"byte_end":209641,"line_start":361,"line_end":361,"column_start":32,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":614},{"krate":0,"index":615}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":209825,"byte_end":209829,"line_start":370,"line_end":370,"column_start":41,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":617},{"krate":0,"index":618}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":210010,"byte_end":210014,"line_start":379,"line_end":379,"column_start":44,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":620},{"krate":0,"index":621}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":210246,"byte_end":210250,"line_start":388,"line_end":388,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":623},{"krate":0,"index":624}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":210493,"byte_end":210497,"line_start":397,"line_end":397,"column_start":48,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":626},{"krate":0,"index":627}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":210721,"byte_end":210725,"line_start":406,"line_end":406,"column_start":46,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":629},{"krate":0,"index":630}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":210954,"byte_end":210958,"line_start":415,"line_end":415,"column_start":55,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":632},{"krate":0,"index":633}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":211177,"byte_end":211181,"line_start":424,"line_end":424,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":635}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":211352,"byte_end":211356,"line_start":431,"line_end":431,"column_start":44,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":637}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":211523,"byte_end":211527,"line_start":438,"line_end":438,"column_start":47,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":639}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":211755,"byte_end":211759,"line_start":445,"line_end":445,"column_start":56,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":641}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":211998,"byte_end":212002,"line_start":452,"line_end":452,"column_start":51,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":643}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":212222,"byte_end":212226,"line_start":459,"line_end":459,"column_start":49,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":645}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":212451,"byte_end":212455,"line_start":466,"line_end":466,"column_start":58,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":647}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":212658,"byte_end":212662,"line_start":473,"line_end":473,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":649}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":213050,"byte_end":213054,"line_start":494,"line_end":494,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":655}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":213942,"byte_end":213945,"line_start":535,"line_end":535,"column_start":33,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":672}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":214086,"byte_end":214090,"line_start":542,"line_end":542,"column_start":17,"column_end":21},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":214124,"byte_end":214128,"line_start":544,"line_end":544,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":675}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":214929,"byte_end":214933,"line_start":571,"line_end":571,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":677}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":215125,"byte_end":215129,"line_start":578,"line_end":578,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":679}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":215911,"byte_end":215915,"line_start":611,"line_end":611,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":691}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":216408,"byte_end":216419,"line_start":629,"line_end":629,"column_start":40,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":702},{"krate":0,"index":703},{"krate":0,"index":704},{"krate":0,"index":706}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":217457,"byte_end":217464,"line_start":670,"line_end":670,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":721}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":217717,"byte_end":217724,"line_start":680,"line_end":680,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":725}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":217950,"byte_end":217964,"line_start":688,"line_end":688,"column_start":40,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":731},{"krate":0,"index":732},{"krate":0,"index":733},{"krate":0,"index":735},{"krate":0,"index":737},{"krate":0,"index":739},{"krate":0,"index":741}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":226625,"byte_end":226626,"line_start":196,"line_end":196,"column_start":37,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":227038,"byte_end":227047,"line_start":211,"line_end":211,"column_start":35,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":758},{"krate":0,"index":759}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Inherent","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/search/prefilter.rs","byte_start":236307,"byte_end":236321,"line_start":29,"line_end":29,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":773},{"krate":0,"index":774},{"krate":0,"index":775},{"krate":0,"index":776},{"krate":0,"index":777},{"krate":0,"index":778}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Inherent","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/search/prefilter.rs","byte_start":239441,"byte_end":239446,"line_start":116,"line_end":116,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":780},{"krate":0,"index":781},{"krate":0,"index":782},{"krate":0,"index":783},{"krate":0,"index":784},{"krate":0,"index":785},{"krate":0,"index":786},{"krate":0,"index":787}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Inherent","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/search/twoway.rs","byte_start":253240,"byte_end":253246,"line_start":51,"line_end":51,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":797},{"krate":0,"index":798},{"krate":0,"index":799},{"krate":0,"index":800},{"krate":0,"index":801},{"krate":0,"index":802},{"krate":0,"index":803},{"krate":0,"index":804},{"krate":0,"index":805},{"krate":0,"index":806},{"krate":0,"index":807},{"krate":0,"index":808},{"krate":0,"index":809},{"krate":0,"index":810},{"krate":0,"index":811},{"krate":0,"index":812},{"krate":0,"index":813}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Inherent","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/search/twoway.rs","byte_start":268988,"byte_end":268993,"line_start":491,"line_end":491,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":815},{"krate":0,"index":816}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Inherent","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/search/twoway.rs","byte_start":271561,"byte_end":271567,"line_start":557,"line_end":557,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":818},{"krate":0,"index":819}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Inherent","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/search/twoway.rs","byte_start":276710,"byte_end":276720,"line_start":685,"line_end":685,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":821}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Inherent","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":295130,"byte_end":295139,"line_start":34,"line_end":34,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":857},{"krate":0,"index":858}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":295882,"byte_end":295891,"line_start":64,"line_end":64,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":861},{"krate":0,"index":862}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":296198,"byte_end":296207,"line_start":78,"line_end":78,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":865}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Inherent","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":298300,"byte_end":298315,"line_start":126,"line_end":126,"column_start":10,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":868},{"krate":0,"index":869}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":299124,"byte_end":299139,"line_start":156,"line_end":156,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":872},{"krate":0,"index":873}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":299577,"byte_end":299592,"line_start":172,"line_end":172,"column_start":34,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":876}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Inherent","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":306945,"byte_end":306954,"line_start":26,"line_end":26,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":889},{"krate":0,"index":890}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":307780,"byte_end":307789,"line_start":56,"line_end":56,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":893},{"krate":0,"index":894}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Inherent","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":309423,"byte_end":309438,"line_start":98,"line_end":98,"column_start":10,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":897},{"krate":0,"index":898}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":310305,"byte_end":310320,"line_start":128,"line_end":128,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":901},{"krate":0,"index":902}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Inherent","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":314894,"byte_end":314899,"line_start":31,"line_end":31,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":919},{"krate":0,"index":920}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":315677,"byte_end":315682,"line_start":61,"line_end":61,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":923},{"krate":0,"index":924}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Inherent","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":317701,"byte_end":317712,"line_start":106,"line_end":106,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":927},{"krate":0,"index":928}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":318534,"byte_end":318545,"line_start":137,"line_end":137,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":931},{"krate":0,"index":932}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Inherent","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":319958,"byte_end":319973,"line_start":175,"line_end":175,"column_start":10,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":935},{"krate":0,"index":936}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":320840,"byte_end":320855,"line_start":208,"line_end":208,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":939},{"krate":0,"index":940}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Inherent","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":322811,"byte_end":322832,"line_start":255,"line_end":255,"column_start":10,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":943},{"krate":0,"index":944}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":323740,"byte_end":323761,"line_start":288,"line_end":288,"column_start":23,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":947},{"krate":0,"index":948}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Inherent","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":330680,"byte_end":330685,"line_start":84,"line_end":84,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":967},{"krate":0,"index":968}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":331437,"byte_end":331442,"line_start":114,"line_end":114,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":971},{"krate":0,"index":972}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":331728,"byte_end":331733,"line_start":128,"line_end":128,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":975}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Inherent","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":333161,"byte_end":333172,"line_start":165,"line_end":165,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":978},{"krate":0,"index":979}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":333969,"byte_end":333980,"line_start":195,"line_end":195,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":982},{"krate":0,"index":983}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":334397,"byte_end":334408,"line_start":211,"line_end":211,"column_start":34,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":986}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Inherent","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":335799,"byte_end":335808,"line_start":256,"line_end":256,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":993},{"krate":0,"index":994}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":336861,"byte_end":336871,"line_start":285,"line_end":285,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":997},{"krate":0,"index":998},{"krate":0,"index":999}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":338252,"byte_end":338262,"line_start":327,"line_end":327,"column_start":42,"column_end":52},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Inherent","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":340103,"byte_end":340112,"line_start":383,"line_end":383,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1003},{"krate":0,"index":1004}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":341459,"byte_end":341468,"line_start":423,"line_end":423,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1006}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Direct","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":341562,"byte_end":341571,"line_start":429,"line_end":429,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1008}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/lib.rs","byte_start":19387,"byte_end":19389,"line_start":420,"line_end":420,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":743}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstr.rs","byte_start":33556,"byte_end":33560,"line_start":35,"line_end":35,"column_start":6,"column_end":10},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1025},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/bstring.rs","byte_start":35616,"byte_end":35623,"line_start":44,"line_end":44,"column_start":6,"column_end":13},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1030},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/cow.rs","byte_start":49571,"byte_end":49579,"line_start":22,"line_end":22,"column_start":25,"column_end":33},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":1037},"to":{"krate":2,"index":2023}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/cow.rs","byte_start":49684,"byte_end":49692,"line_start":30,"line_end":30,"column_start":10,"column_end":18},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":1037},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/cow.rs","byte_start":50691,"byte_end":50694,"line_start":61,"line_end":61,"column_start":10,"column_end":13},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":1047},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":53959,"byte_end":53965,"line_start":98,"line_end":98,"column_start":22,"column_end":28},"kind":"SuperTrait","from":{"krate":0,"index":180},"to":{"krate":0,"index":182}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":148912,"byte_end":148918,"line_start":2995,"line_end":2995,"column_start":10,"column_end":16},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":1057},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":152122,"byte_end":152135,"line_start":3080,"line_end":3080,"column_start":10,"column_end":23},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":1066},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":154797,"byte_end":154801,"line_start":3158,"line_end":3158,"column_start":10,"column_end":14},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":1075},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":155055,"byte_end":155059,"line_start":3166,"line_end":3166,"column_start":23,"column_end":27},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":1075},"to":{"krate":2,"index":4716}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":156132,"byte_end":156143,"line_start":3204,"line_end":3204,"column_start":10,"column_end":21},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":1084},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":156584,"byte_end":156595,"line_start":3221,"line_end":3221,"column_start":23,"column_end":34},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":1084},"to":{"krate":2,"index":4716}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":157417,"byte_end":157422,"line_start":3255,"line_end":3255,"column_start":23,"column_end":28},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":1093},"to":{"krate":2,"index":4716}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":157580,"byte_end":157585,"line_start":3264,"line_end":3264,"column_start":34,"column_end":39},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":1093},"to":{"krate":2,"index":4643}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":157730,"byte_end":157735,"line_start":3271,"line_end":3271,"column_start":32,"column_end":37},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":1093},"to":{"krate":2,"index":4672}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":158178,"byte_end":158184,"line_start":3289,"line_end":3289,"column_start":10,"column_end":16},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":1102},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":158332,"byte_end":158338,"line_start":3295,"line_end":3295,"column_start":23,"column_end":29},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":1102},"to":{"krate":2,"index":4716}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":159034,"byte_end":159044,"line_start":3320,"line_end":3320,"column_start":34,"column_end":44},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":1108},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":159227,"byte_end":159237,"line_start":3326,"line_end":3326,"column_start":47,"column_end":57},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":1108},"to":{"krate":2,"index":4716}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":160545,"byte_end":160550,"line_start":3370,"line_end":3370,"column_start":10,"column_end":15},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":1118},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":160752,"byte_end":160757,"line_start":3377,"line_end":3377,"column_start":23,"column_end":28},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":1118},"to":{"krate":2,"index":4716}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":162387,"byte_end":162399,"line_start":3426,"line_end":3426,"column_start":10,"column_end":22},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":1126},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":162629,"byte_end":162641,"line_start":3433,"line_end":3433,"column_start":23,"column_end":35},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1126},"to":{"krate":2,"index":4716}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":163851,"byte_end":163857,"line_start":3477,"line_end":3477,"column_start":10,"column_end":16},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":1134},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":164099,"byte_end":164105,"line_start":3488,"line_end":3488,"column_start":23,"column_end":29},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":1134},"to":{"krate":2,"index":4716}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":164831,"byte_end":164844,"line_start":3516,"line_end":3516,"column_start":10,"column_end":23},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":1142},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":165101,"byte_end":165114,"line_start":3527,"line_end":3527,"column_start":23,"column_end":36},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":1142},"to":{"krate":2,"index":4716}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":165785,"byte_end":165790,"line_start":3553,"line_end":3553,"column_start":10,"column_end":15},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":394},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":165925,"byte_end":165930,"line_start":3559,"line_end":3559,"column_start":23,"column_end":28},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":394},"to":{"krate":2,"index":4716}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":166965,"byte_end":166984,"line_start":3592,"line_end":3592,"column_start":10,"column_end":29},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":404},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_slice.rs","byte_start":167117,"byte_end":167136,"line_start":3598,"line_end":3598,"column_start":23,"column_end":42},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":404},"to":{"krate":2,"index":4716}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":170979,"byte_end":170982,"line_start":85,"line_end":85,"column_start":18,"column_end":21},"kind":{"Impl":{"id":30}},"from":{"krate":5,"index":3899},"to":{"krate":0,"index":446}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":171353,"byte_end":171356,"line_start":105,"line_end":105,"column_start":17,"column_end":20},"kind":{"Impl":{"id":31}},"from":{"krate":5,"index":3899},"to":{"krate":0,"index":444}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":171762,"byte_end":171768,"line_start":119,"line_end":119,"column_start":20,"column_end":26},"kind":"SuperTrait","from":{"krate":0,"index":444},"to":{"krate":0,"index":446}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":195963,"byte_end":195973,"line_start":913,"line_end":913,"column_start":34,"column_end":44},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1150},"to":{"krate":2,"index":4976}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":196004,"byte_end":196014,"line_start":915,"line_end":915,"column_start":23,"column_end":33},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1150},"to":{"krate":2,"index":4716}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":196160,"byte_end":196170,"line_start":924,"line_end":924,"column_start":34,"column_end":44},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1150},"to":{"krate":2,"index":4643}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":196303,"byte_end":196313,"line_start":931,"line_end":931,"column_start":32,"column_end":42},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1150},"to":{"krate":2,"index":4672}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":197204,"byte_end":197217,"line_start":967,"line_end":967,"column_start":6,"column_end":19},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1156},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":198956,"byte_end":198969,"line_start":1033,"line_end":1033,"column_start":23,"column_end":36},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1156},"to":{"krate":1,"index":1620}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/ext_vec.rs","byte_start":199084,"byte_end":199097,"line_start":1040,"line_end":1040,"column_start":23,"column_end":36},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1156},"to":{"krate":2,"index":5921}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":202729,"byte_end":202736,"line_start":74,"line_end":74,"column_start":27,"column_end":34},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":1030},"to":{"krate":2,"index":5921}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":202910,"byte_end":202917,"line_start":81,"line_end":81,"column_start":25,"column_end":32},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":1030},"to":{"krate":2,"index":5916}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":203089,"byte_end":203096,"line_start":88,"line_end":88,"column_start":25,"column_end":32},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1030},"to":{"krate":2,"index":2023}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":203255,"byte_end":203262,"line_start":97,"line_end":97,"column_start":28,"column_end":35},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":1030},"to":{"krate":2,"index":2034}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":203403,"byte_end":203410,"line_start":104,"line_end":104,"column_start":26,"column_end":33},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1030},"to":{"krate":2,"index":1767}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":203533,"byte_end":203540,"line_start":111,"line_end":111,"column_start":26,"column_end":33},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1030},"to":{"krate":2,"index":1767}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":203666,"byte_end":203673,"line_start":118,"line_end":118,"column_start":26,"column_end":33},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1030},"to":{"krate":2,"index":1770}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":203808,"byte_end":203815,"line_start":125,"line_end":125,"column_start":26,"column_end":33},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1030},"to":{"krate":2,"index":1770}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":203954,"byte_end":203961,"line_start":132,"line_end":132,"column_start":27,"column_end":34},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1030},"to":{"krate":2,"index":1540}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":204083,"byte_end":204087,"line_start":139,"line_end":139,"column_start":22,"column_end":26},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":1025},"to":{"krate":5,"index":312}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":204249,"byte_end":204256,"line_start":148,"line_end":148,"column_start":22,"column_end":29},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":1030},"to":{"krate":2,"index":1843}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":204376,"byte_end":204383,"line_start":154,"line_end":154,"column_start":33,"column_end":40},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":1030},"to":{"krate":2,"index":1776}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":204528,"byte_end":204535,"line_start":161,"line_end":161,"column_start":28,"column_end":35},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1030},"to":{"krate":2,"index":1776}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":204674,"byte_end":204677,"line_start":168,"line_end":168,"column_start":28,"column_end":31},"kind":{"Impl":{"id":52}},"from":{"krate":5,"index":3899},"to":{"krate":2,"index":1776}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":204811,"byte_end":204818,"line_start":175,"line_end":175,"column_start":32,"column_end":39},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1030},"to":{"krate":2,"index":1776}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":204972,"byte_end":204979,"line_start":182,"line_end":182,"column_start":27,"column_end":34},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1030},"to":{"krate":2,"index":1776}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":205131,"byte_end":205138,"line_start":189,"line_end":189,"column_start":33,"column_end":40},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1030},"to":{"krate":2,"index":1776}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":205293,"byte_end":205296,"line_start":196,"line_end":196,"column_start":32,"column_end":35},"kind":{"Impl":{"id":56}},"from":{"krate":5,"index":321},"to":{"krate":2,"index":1776}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":205449,"byte_end":205456,"line_start":203,"line_end":203,"column_start":33,"column_end":40},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1030},"to":{"krate":2,"index":4620}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":205661,"byte_end":205668,"line_start":210,"line_end":210,"column_start":31,"column_end":38},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1030},"to":{"krate":2,"index":4620}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":205881,"byte_end":205888,"line_start":217,"line_end":217,"column_start":40,"column_end":47},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1030},"to":{"krate":2,"index":4620}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":206182,"byte_end":206189,"line_start":228,"line_end":228,"column_start":41,"column_end":48},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1030},"to":{"krate":2,"index":4620}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":206484,"byte_end":206491,"line_start":239,"line_end":239,"column_start":41,"column_end":48},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1030},"to":{"krate":2,"index":4620}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":206781,"byte_end":206788,"line_start":250,"line_end":250,"column_start":36,"column_end":43},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1030},"to":{"krate":2,"index":4620}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":207058,"byte_end":207065,"line_start":261,"line_end":261,"column_start":17,"column_end":24},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1030},"to":{"krate":2,"index":1593}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":207093,"byte_end":207100,"line_start":263,"line_end":263,"column_start":24,"column_end":31},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1030},"to":{"krate":2,"index":1588}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":207558,"byte_end":207565,"line_start":279,"line_end":279,"column_start":25,"column_end":32},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1030},"to":{"krate":2,"index":1625}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":207752,"byte_end":207759,"line_start":286,"line_end":286,"column_start":18,"column_end":25},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":1030},"to":{"krate":2,"index":1614}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":208428,"byte_end":208432,"line_start":314,"line_end":314,"column_start":27,"column_end":31},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":1025},"to":{"krate":2,"index":5921}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":208794,"byte_end":208798,"line_start":327,"line_end":327,"column_start":25,"column_end":29},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1025},"to":{"krate":2,"index":5916}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":209332,"byte_end":209336,"line_start":345,"line_end":345,"column_start":25,"column_end":29},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":1025},"to":{"krate":2,"index":2023}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":209489,"byte_end":209493,"line_start":354,"line_end":354,"column_start":28,"column_end":32},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":1025},"to":{"krate":2,"index":2034}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":209637,"byte_end":209641,"line_start":361,"line_end":361,"column_start":32,"column_end":36},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1025},"to":{"krate":2,"index":2099}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":209825,"byte_end":209829,"line_start":370,"line_end":370,"column_start":41,"column_end":45},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":1025},"to":{"krate":2,"index":2099}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":210010,"byte_end":210014,"line_start":379,"line_end":379,"column_start":44,"column_end":48},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1025},"to":{"krate":2,"index":2099}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":210246,"byte_end":210250,"line_start":388,"line_end":388,"column_start":53,"column_end":57},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1025},"to":{"krate":2,"index":2099}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":210493,"byte_end":210497,"line_start":397,"line_end":397,"column_start":48,"column_end":52},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1025},"to":{"krate":2,"index":2099}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":210721,"byte_end":210725,"line_start":406,"line_end":406,"column_start":46,"column_end":50},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1025},"to":{"krate":2,"index":2099}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":210954,"byte_end":210958,"line_start":415,"line_end":415,"column_start":55,"column_end":59},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1025},"to":{"krate":2,"index":2099}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":211177,"byte_end":211181,"line_start":424,"line_end":424,"column_start":35,"column_end":39},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":1025},"to":{"krate":2,"index":2103}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":211352,"byte_end":211356,"line_start":431,"line_end":431,"column_start":44,"column_end":48},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":1025},"to":{"krate":2,"index":2103}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":211523,"byte_end":211527,"line_start":438,"line_end":438,"column_start":47,"column_end":51},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":1025},"to":{"krate":2,"index":2103}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":211755,"byte_end":211759,"line_start":445,"line_end":445,"column_start":56,"column_end":60},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":1025},"to":{"krate":2,"index":2103}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":211998,"byte_end":212002,"line_start":452,"line_end":452,"column_start":51,"column_end":55},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1025},"to":{"krate":2,"index":2103}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":212222,"byte_end":212226,"line_start":459,"line_end":459,"column_start":49,"column_end":53},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":1025},"to":{"krate":2,"index":2103}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":212451,"byte_end":212455,"line_start":466,"line_end":466,"column_start":58,"column_end":62},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":1025},"to":{"krate":2,"index":2103}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":212658,"byte_end":212662,"line_start":473,"line_end":473,"column_start":26,"column_end":30},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":1025},"to":{"krate":2,"index":1767}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":213050,"byte_end":213054,"line_start":494,"line_end":494,"column_start":26,"column_end":30},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1025},"to":{"krate":2,"index":1770}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":213942,"byte_end":213945,"line_start":535,"line_end":535,"column_start":33,"column_end":36},"kind":{"Impl":{"id":112}},"from":{"krate":5,"index":321},"to":{"krate":2,"index":1776}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":214086,"byte_end":214090,"line_start":542,"line_end":542,"column_start":17,"column_end":21},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":1025},"to":{"krate":2,"index":1593}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":214124,"byte_end":214128,"line_start":544,"line_end":544,"column_start":30,"column_end":34},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":1025},"to":{"krate":2,"index":1588}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":214929,"byte_end":214933,"line_start":571,"line_end":571,"column_start":25,"column_end":29},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":1025},"to":{"krate":2,"index":1625}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":215125,"byte_end":215129,"line_start":578,"line_end":578,"column_start":18,"column_end":22},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":1025},"to":{"krate":2,"index":1614}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":215911,"byte_end":215915,"line_start":611,"line_end":611,"column_start":24,"column_end":28},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":1025},"to":{"krate":19,"index":1636}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":216408,"byte_end":216419,"line_start":629,"line_end":629,"column_start":40,"column_end":51},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":698},"to":{"krate":19,"index":1275}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":217457,"byte_end":217464,"line_start":670,"line_end":670,"column_start":24,"column_end":31},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":1030},"to":{"krate":19,"index":1636}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":217717,"byte_end":217724,"line_start":680,"line_end":680,"column_start":36,"column_end":43},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":1030},"to":{"krate":19,"index":1191}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/impls.rs","byte_start":217950,"byte_end":217964,"line_start":688,"line_end":688,"column_start":40,"column_end":54},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":727},"to":{"krate":19,"index":1275}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":220618,"byte_end":220625,"line_start":18,"line_end":18,"column_start":27,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":2928},"to":{"krate":0,"index":747}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":226625,"byte_end":226626,"line_start":196,"line_end":196,"column_start":37,"column_end":38},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":755},"to":{"krate":0,"index":747}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/io.rs","byte_start":227038,"byte_end":227047,"line_start":211,"line_end":211,"column_start":35,"column_end":44},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":1448},"to":{"krate":2,"index":4716}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/search/prefilter.rs","byte_start":236307,"byte_end":236321,"line_start":29,"line_end":29,"column_start":6,"column_end":20},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":1454},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/search/prefilter.rs","byte_start":239441,"byte_end":239446,"line_start":116,"line_end":116,"column_start":6,"column_end":11},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":1463},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/search/twoway.rs","byte_start":253240,"byte_end":253246,"line_start":51,"line_end":51,"column_start":10,"column_end":16},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":1474},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/search/twoway.rs","byte_start":268988,"byte_end":268993,"line_start":491,"line_end":491,"column_start":6,"column_end":11},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":1486},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/search/twoway.rs","byte_start":271561,"byte_end":271567,"line_start":557,"line_end":557,"column_start":6,"column_end":12},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":1495},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/search/twoway.rs","byte_start":276710,"byte_end":276720,"line_start":685,"line_end":685,"column_start":6,"column_end":16},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":1500},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":295130,"byte_end":295139,"line_start":34,"line_end":34,"column_start":10,"column_end":19},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":1658},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":295882,"byte_end":295891,"line_start":64,"line_end":64,"column_start":23,"column_end":32},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":1658},"to":{"krate":2,"index":4716}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":296198,"byte_end":296207,"line_start":78,"line_end":78,"column_start":34,"column_end":43},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":1658},"to":{"krate":2,"index":4643}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":298300,"byte_end":298315,"line_start":126,"line_end":126,"column_start":10,"column_end":25},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":1667},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":299124,"byte_end":299139,"line_start":156,"line_end":156,"column_start":23,"column_end":38},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":1667},"to":{"krate":2,"index":4716}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/grapheme.rs","byte_start":299577,"byte_end":299592,"line_start":172,"line_end":172,"column_start":34,"column_end":49},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":1667},"to":{"krate":2,"index":4643}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":306945,"byte_end":306954,"line_start":26,"line_end":26,"column_start":10,"column_end":19},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":1678},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":307780,"byte_end":307789,"line_start":56,"line_end":56,"column_start":23,"column_end":32},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":1678},"to":{"krate":2,"index":4716}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":309423,"byte_end":309438,"line_start":98,"line_end":98,"column_start":10,"column_end":25},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":1687},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/sentence.rs","byte_start":310305,"byte_end":310320,"line_start":128,"line_end":128,"column_start":23,"column_end":38},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":1687},"to":{"krate":2,"index":4716}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":314894,"byte_end":314899,"line_start":31,"line_end":31,"column_start":10,"column_end":15},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":1697},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":315677,"byte_end":315682,"line_start":61,"line_end":61,"column_start":23,"column_end":28},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":1697},"to":{"krate":2,"index":4716}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":317701,"byte_end":317712,"line_start":106,"line_end":106,"column_start":10,"column_end":21},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":1707},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":318534,"byte_end":318545,"line_start":137,"line_end":137,"column_start":23,"column_end":34},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":1707},"to":{"krate":2,"index":4716}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":319958,"byte_end":319973,"line_start":175,"line_end":175,"column_start":10,"column_end":25},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":1717},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":320840,"byte_end":320855,"line_start":208,"line_end":208,"column_start":23,"column_end":38},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":1717},"to":{"krate":2,"index":4716}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":322811,"byte_end":322832,"line_start":255,"line_end":255,"column_start":10,"column_end":31},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":1726},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/unicode/word.rs","byte_start":323740,"byte_end":323761,"line_start":288,"line_end":288,"column_start":23,"column_end":44},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":1726},"to":{"krate":2,"index":4716}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":330680,"byte_end":330685,"line_start":84,"line_end":84,"column_start":10,"column_end":15},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":1736},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":331437,"byte_end":331442,"line_start":114,"line_end":114,"column_start":23,"column_end":28},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":1736},"to":{"krate":2,"index":4716}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":331728,"byte_end":331733,"line_start":128,"line_end":128,"column_start":34,"column_end":39},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":1736},"to":{"krate":2,"index":4643}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":333161,"byte_end":333172,"line_start":165,"line_end":165,"column_start":10,"column_end":21},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":1745},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":333969,"byte_end":333980,"line_start":195,"line_end":195,"column_start":23,"column_end":34},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":1745},"to":{"krate":2,"index":4716}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":334397,"byte_end":334408,"line_start":211,"line_end":211,"column_start":34,"column_end":45},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":1745},"to":{"krate":2,"index":4643}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":335799,"byte_end":335808,"line_start":256,"line_end":256,"column_start":10,"column_end":19},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":987},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":336861,"byte_end":336871,"line_start":285,"line_end":285,"column_start":23,"column_end":33},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":1756},"to":{"krate":2,"index":4716}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":338252,"byte_end":338262,"line_start":327,"line_end":327,"column_start":42,"column_end":52},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":1756},"to":{"krate":2,"index":4976}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":340103,"byte_end":340112,"line_start":383,"line_end":383,"column_start":6,"column_end":15},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":1765},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":341459,"byte_end":341468,"line_start":423,"line_end":423,"column_start":23,"column_end":32},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":1765},"to":{"krate":1,"index":1620}},{"span":{"file_name":"/home/ryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.12/src/utf8.rs","byte_start":341562,"byte_end":341571,"line_start":429,"line_end":429,"column_start":23,"column_end":32},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":1765},"to":{"krate":2,"index":5921}}]}